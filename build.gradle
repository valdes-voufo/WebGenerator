import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

    plugins {
        id 'java'
        id 'monticore' version "$mc_version"
        id 'com.github.johnrengelman.shadow' version '6.0.0'
        id 'maven-publish'
    }

allprojects {

    group 'de.monticore'
    buildDir = "$projectDir/target"




    repositories {
        if (("true").equals(getProperty('useLocalRepo'))) {
            mavenLocal()
        }
        maven {
            credentials.username mavenUser
            credentials.password mavenPassword
            url repo
        }
        mavenCentral()
    }
}

subprojects {

    test {
        useJUnit()

        testLogging {
            // controls whether test output is shown
            showStandardStreams = !("false").equals(getProperty('showTestOutput'))
            showExceptions true
            showCauses true
            showStackTraces true
            exceptionFormat TestExceptionFormat.FULL
            info {
                events TestLogEvent.FAILED,
                        TestLogEvent.PASSED,
                        TestLogEvent.SKIPPED,
                        TestLogEvent.STANDARD_OUT
            }
        }
        afterTest { desc, result ->
            logger.lifecycle "${desc.className} > ${desc.name} ${result.resultType}"
        }
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                logger.lifecycle startItem + output + endItem
            }
        }
        reports {
            junitXml.required = false
            html.required = false
        }
    }

}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
    repositories.maven {
        credentials.username mavenUser
        credentials.password mavenPassword
        def releasesRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-releases/"
        def snapshotsRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-snapshots/"
        url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
    }
}
