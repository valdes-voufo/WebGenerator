import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id "java-library"
    id "monticore"
    id "jacoco"
    id "com.github.johnrengelman.shadow"
}

def grammarDir = "$projectDir/src/main/grammars"
def reportsDir = "$buildDir/generated-sources/monticore/sourcecode/reports"
sourceSets {
    main {
        java.srcDirs += ["$buildDir/generated-sources/monticore/sourcecode"]
    }
    test {
        java.srcDirs += ["$buildDir/generated-test-sources/monticore/sourcecode"]
    }
    grammars {
        resources {
            srcDirs(grammarDir, reportsDir)
            include("**/*.mc4", "**/*.cd")
        }
    }
}




configurations { grammar }

dependencies {
    implementation 'junit:junit:4.13.1'
    implementation 'junit:junit:4.13.1'
    grammar("de.monticore:monticore-grammar:$mc_version") {
        capabilities {
            requireCapability("de.monticore:monticore-grammar-grammars")
        }
    }

    implementation "de.se_rwth.commons:se-commons-logging:$se_commons_version"
    implementation "de.monticore:monticore-runtime:$mc_version"
    implementation "de.monticore:monticore-grammar:$mc_version"
    implementation "org.apache.commons:commons-lang3:3.9"
    implementation "commons-cli:commons-cli:1.4"

    testImplementation "junit:junit:$junit_version"
}

fileTree(grammarDir).matching { include '**/*.mc4' }.each {
    def g = it
    def grammarName = it.getName().substring(0, it.getName().lastIndexOf('.'))

    task "generateGrammar$grammarName"(type: MCTask) {
        grammar = file g
        outputDir = file "$buildDir/generated-sources/monticore/sourcecode"
        handcodedPath = [file("$projectDir/src/main/java")]
        def grammarIncludingPackage = file(grammarDir).toURI().relativize(g.toURI()).toString()
        def upToDate = incCheck(grammarIncludingPackage)
        outputs.upToDateWhen { upToDate }
    }
}

compileJava {
    tasks.findAll { task -> task.name.startsWith("generateGrammar") }.each {
        def grammarName = it.getName().substring("generateGrammar".length())
    }

    dependsOn project.collect { it.tasks.findAll { task -> task.name.startsWith("generateGrammar") } }
}

test {
    useJUnit()

    testLogging {
        // controls whether test output is shown
        showStandardStreams = !("false").equals(getProperty('showTestOutput'))
        showExceptions true
        showCauses true
        showStackTraces true
        exceptionFormat TestExceptionFormat.FULL
        info {
            events TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_OUT
        }
    }
    afterTest { desc, result ->
        logger.lifecycle "${desc.className} > ${desc.name} ${result.resultType}"
    }
    afterSuite { desc, result ->
        if (!desc.parent) { // will match the outermost suite
            def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
            def startItem = '|  ', endItem = '  |'
            logger.lifecycle startItem + output + endItem
        }
    }
    reports {
        junitXml.required = false
        html.required = false
    }
}

// all in one tool-jar
shadowJar {
    manifest {
        attributes "Main-Class": "de.monticore.gettingstarted.website.WebsiteTool"
    }
    archiveFileName = "Website.${archiveExtension.get()}"
    archiveClassifier = "mc-tool"
}

jar.dependsOn shadowJar
