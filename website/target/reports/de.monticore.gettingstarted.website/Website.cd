package de.monticore.gettingstarted;

classdiagram Website {
  package de.monticore.gettingstarted.website._auxiliary {
    public class MCCommonLiteralsMillForWebsite extends de.monticore.literals.mccommonliterals.MCCommonLiteralsMill {
      protected de.monticore.gettingstarted.website._symboltable.IWebsiteArtifactScope _artifactScope();
      protected de.monticore.gettingstarted.website._symboltable.IWebsiteGlobalScope _globalScope();
      protected de.monticore.gettingstarted.website._symboltable.IWebsiteScope _scope();
      protected de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser _traverser();
      protected de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser _inheritanceTraverser();
    }
    public class MCBasicsMillForWebsite extends de.monticore.mcbasics.MCBasicsMill {
      protected de.monticore.gettingstarted.website._symboltable.IWebsiteArtifactScope _artifactScope();
      protected de.monticore.gettingstarted.website._symboltable.IWebsiteGlobalScope _globalScope();
      protected de.monticore.gettingstarted.website._symboltable.IWebsiteScope _scope();
      protected de.monticore.mcbasics._visitor.MCBasicsTraverser _traverser();
      protected de.monticore.mcbasics._visitor.MCBasicsTraverser _inheritanceTraverser();
    }
    public class MCLiteralsBasisMillForWebsite extends de.monticore.literals.mcliteralsbasis.MCLiteralsBasisMill {
      protected de.monticore.gettingstarted.website._symboltable.IWebsiteArtifactScope _artifactScope();
      protected de.monticore.gettingstarted.website._symboltable.IWebsiteGlobalScope _globalScope();
      protected de.monticore.gettingstarted.website._symboltable.IWebsiteScope _scope();
      protected de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser _traverser();
      protected de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser _inheritanceTraverser();
    }
  }

  package de.monticore.gettingstarted.website {
    public class WebsiteMill {
      protected static WebsiteMill mill;
      protected WebsiteMill();
      protected static WebsiteMill getMill();
      public static void init();
      protected static WebsiteMill millASTWebsiteBuilder;
      protected static WebsiteMill millASTNavigationBuilder;
      protected static WebsiteMill millASTNavigationItemBuilder;
      protected static WebsiteMill millASTPageBuilder;
      protected static WebsiteMill millASTPageContentBuilder;
      protected static WebsiteMill millASTLinkBuilder;
      protected static WebsiteMill millASTPictureBuilder;
      protected static WebsiteMill millASTParagraphBuilder;
      protected static WebsiteMill millASTTextBlockBuilder;
      protected static WebsiteMill millASTCodeBlockBuilder;
      protected static WebsiteMill millASTAsideBuilder;
      protected static WebsiteMill millASTRowBuilder;
      protected static WebsiteMill millASTLandImageBuilder;
      protected static WebsiteMill millASTCardBuilder;
      protected static WebsiteMill millASTTableBuilder;
      public static de.monticore.gettingstarted.website._ast.ASTWebsiteBuilder websiteBuilder();
      protected de.monticore.gettingstarted.website._ast.ASTWebsiteBuilder _websiteBuilder();
      public static de.monticore.gettingstarted.website._ast.ASTNavigationBuilder navigationBuilder();
      protected de.monticore.gettingstarted.website._ast.ASTNavigationBuilder _navigationBuilder();
      public static de.monticore.gettingstarted.website._ast.ASTNavigationItemBuilder navigationItemBuilder();
      protected de.monticore.gettingstarted.website._ast.ASTNavigationItemBuilder _navigationItemBuilder();
      public static de.monticore.gettingstarted.website._ast.ASTPageBuilder pageBuilder();
      protected de.monticore.gettingstarted.website._ast.ASTPageBuilder _pageBuilder();
      public static de.monticore.gettingstarted.website._ast.ASTPageContentBuilder pageContentBuilder();
      protected de.monticore.gettingstarted.website._ast.ASTPageContentBuilder _pageContentBuilder();
      public static de.monticore.gettingstarted.website._ast.ASTLinkBuilder linkBuilder();
      protected de.monticore.gettingstarted.website._ast.ASTLinkBuilder _linkBuilder();
      public static de.monticore.gettingstarted.website._ast.ASTPictureBuilder pictureBuilder();
      protected de.monticore.gettingstarted.website._ast.ASTPictureBuilder _pictureBuilder();
      public static de.monticore.gettingstarted.website._ast.ASTParagraphBuilder paragraphBuilder();
      protected de.monticore.gettingstarted.website._ast.ASTParagraphBuilder _paragraphBuilder();
      public static de.monticore.gettingstarted.website._ast.ASTTextBlockBuilder textBlockBuilder();
      protected de.monticore.gettingstarted.website._ast.ASTTextBlockBuilder _textBlockBuilder();
      public static de.monticore.gettingstarted.website._ast.ASTCodeBlockBuilder codeBlockBuilder();
      protected de.monticore.gettingstarted.website._ast.ASTCodeBlockBuilder _codeBlockBuilder();
      public static de.monticore.gettingstarted.website._ast.ASTAsideBuilder asideBuilder();
      protected de.monticore.gettingstarted.website._ast.ASTAsideBuilder _asideBuilder();
      public static de.monticore.gettingstarted.website._ast.ASTRowBuilder rowBuilder();
      protected de.monticore.gettingstarted.website._ast.ASTRowBuilder _rowBuilder();
      public static de.monticore.gettingstarted.website._ast.ASTLandImageBuilder landImageBuilder();
      protected de.monticore.gettingstarted.website._ast.ASTLandImageBuilder _landImageBuilder();
      public static de.monticore.gettingstarted.website._ast.ASTCardBuilder cardBuilder();
      protected de.monticore.gettingstarted.website._ast.ASTCardBuilder _cardBuilder();
      public static de.monticore.gettingstarted.website._ast.ASTTableBuilder tableBuilder();
      protected de.monticore.gettingstarted.website._ast.ASTTableBuilder _tableBuilder();
      protected static WebsiteMill millWebsiteTraverserImplementation;
      protected static WebsiteMill millWebsiteInheritanceHandler;
      protected static WebsiteMill millPageSymbolBuilder;
      protected static WebsiteMill millWebsiteScope;
      protected static WebsiteMill millPageSymbolSurrogateBuilder;
      protected static WebsiteMill millWebsiteScopesGenitorDelegator;
      protected static WebsiteMill millWebsiteArtifactScope;
      protected static WebsiteMill millWebsiteGlobalScope;
      protected static WebsiteMill millWebsiteScopesGenitor;
      public static de.monticore.gettingstarted.website._symboltable.PageSymbolBuilder pageSymbolBuilder();
      protected de.monticore.gettingstarted.website._symboltable.PageSymbolBuilder _pageSymbolBuilder();
      public static de.monticore.gettingstarted.website._symboltable.PageSymbolSurrogateBuilder pageSymbolSurrogateBuilder();
      protected de.monticore.gettingstarted.website._symboltable.PageSymbolSurrogateBuilder _pageSymbolSurrogateBuilder();
      public static de.monticore.gettingstarted.website._visitor.WebsiteTraverser traverser();
      protected de.monticore.gettingstarted.website._visitor.WebsiteTraverser _traverser();
      public static de.monticore.gettingstarted.website._visitor.WebsiteTraverser inheritanceTraverser();
      protected de.monticore.gettingstarted.website._visitor.WebsiteTraverser _inheritanceTraverser();
      protected de.monticore.gettingstarted.website._symboltable.IWebsiteGlobalScope websiteGlobalScope;
      public static de.monticore.gettingstarted.website._symboltable.IWebsiteGlobalScope globalScope();
      protected de.monticore.gettingstarted.website._symboltable.IWebsiteGlobalScope _globalScope();
      public static de.monticore.gettingstarted.website._symboltable.IWebsiteArtifactScope artifactScope();
      protected de.monticore.gettingstarted.website._symboltable.IWebsiteArtifactScope _artifactScope();
      protected static WebsiteMill millWebsiteParser;
      public static de.monticore.gettingstarted.website._parser.WebsiteParser parser();
      protected de.monticore.gettingstarted.website._parser.WebsiteParser _parser();
      public static de.monticore.gettingstarted.website._symboltable.IWebsiteScope scope();
      protected de.monticore.gettingstarted.website._symboltable.IWebsiteScope _scope();
      public static de.monticore.gettingstarted.website._symboltable.WebsiteScopesGenitor scopesGenitor();
      protected de.monticore.gettingstarted.website._symboltable.WebsiteScopesGenitor _scopesGenitor();
      public static de.monticore.gettingstarted.website._symboltable.WebsiteScopesGenitorDelegator scopesGenitorDelegator();
      protected de.monticore.gettingstarted.website._symboltable.WebsiteScopesGenitorDelegator _scopesGenitorDelegator();
      public static de.monticore.literals.mccommonliterals._ast.ASTNullLiteralBuilder nullLiteralBuilder();
      public static de.monticore.literals.mccommonliterals._ast.ASTBooleanLiteralBuilder booleanLiteralBuilder();
      public static de.monticore.literals.mccommonliterals._ast.ASTCharLiteralBuilder charLiteralBuilder();
      public static de.monticore.literals.mccommonliterals._ast.ASTStringLiteralBuilder stringLiteralBuilder();
      public static de.monticore.literals.mccommonliterals._ast.ASTNatLiteralBuilder natLiteralBuilder();
      public static de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteralBuilder signedNatLiteralBuilder();
      public static de.monticore.literals.mccommonliterals._ast.ASTBasicLongLiteralBuilder basicLongLiteralBuilder();
      public static de.monticore.literals.mccommonliterals._ast.ASTSignedBasicLongLiteralBuilder signedBasicLongLiteralBuilder();
      public static de.monticore.literals.mccommonliterals._ast.ASTBasicFloatLiteralBuilder basicFloatLiteralBuilder();
      public static de.monticore.literals.mccommonliterals._ast.ASTSignedBasicFloatLiteralBuilder signedBasicFloatLiteralBuilder();
      public static de.monticore.literals.mccommonliterals._ast.ASTBasicDoubleLiteralBuilder basicDoubleLiteralBuilder();
      public static de.monticore.literals.mccommonliterals._ast.ASTSignedBasicDoubleLiteralBuilder signedBasicDoubleLiteralBuilder();
      public static void initMe(WebsiteMill a);
      public static void reset();
    }
    public class WebsiteTool {
      public static void main(String[] args);
      public void run(String[] args);
      public de.monticore.gettingstarted.website._ast.ASTWebsite parse(String model);
      public void init();
      public void prettyPrint(de.monticore.gettingstarted.website._ast.ASTWebsite ast, String file);
      public void print(String content, String path);
      public void printHelp(org.apache.commons.cli.Options options);
      public void printVersion();
      public void report(de.monticore.gettingstarted.website._ast.ASTWebsite ast, String path);
      public void runDefaultCoCos(de.monticore.gettingstarted.website._ast.ASTWebsite ast);
      public void runAdditionalCoCos(de.monticore.gettingstarted.website._ast.ASTWebsite ast);
      public void storeSymbols(de.monticore.gettingstarted.website._symboltable.IWebsiteArtifactScope scope, String path);
      public org.apache.commons.cli.Options initOptions();
      public org.apache.commons.cli.Options addStandardOptions(org.apache.commons.cli.Options options);
      public org.apache.commons.cli.Options addAdditionalOptions(org.apache.commons.cli.Options options);
      public de.monticore.gettingstarted.website._symboltable.IWebsiteArtifactScope createSymbolTable(de.monticore.gettingstarted.website._ast.ASTWebsite node);
      public void completeSymbolTable(de.monticore.gettingstarted.website._ast.ASTWebsite node);
    }
  }

  package de.monticore.gettingstarted.website._od {
    public class Website2OD implements de.monticore.gettingstarted.website._visitor.WebsiteVisitor2, de.monticore.gettingstarted.website._visitor.WebsiteHandler {
      public Website2OD(de.monticore.prettyprint.IndentPrinter printer, de.monticore.generating.templateengine.reporting.commons.ReportingRepository reporting);
      protected de.monticore.gettingstarted.website._visitor.WebsiteTraverser traverser;
      protected de.monticore.prettyprint.IndentPrinter pp;
      protected de.monticore.generating.templateengine.reporting.commons.ReportingRepository reporting;
      protected boolean printEmptyOptional;
      protected boolean printEmptyList;
      public void handle(de.monticore.gettingstarted.website._ast.ASTWebsite node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTNavigation node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTNavigationItem node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTPage node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTPageContent node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTLink node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTPicture node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTParagraph node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTTextBlock node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTCodeBlock node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTAside node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTRow node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTLandImage node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTCard node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTTable node);
      public de.monticore.gettingstarted.website._visitor.WebsiteTraverser getTraverser();
      public void setTraverser(de.monticore.gettingstarted.website._visitor.WebsiteTraverser traverser);
      protected void printAttribute(String name, String value);
      protected void printObject(String objName, String objType);
      public String printObjectDiagram(String modelName, de.monticore.gettingstarted.website._ast.ASTWebsiteNode node);
      public boolean isPrintEmptyOptional();
      public void setPrintEmptyOptional(boolean printEmptyOptional);
      public boolean isPrintEmptyList();
      public void setPrintEmptyList(boolean printEmptyList);
    }
  }

  package de.monticore.gettingstarted.website._cocos {
    public class WebsiteCoCoChecker {
      protected de.monticore.gettingstarted.website._visitor.WebsiteTraverser traverser;
      public WebsiteCoCoChecker();
      public de.monticore.gettingstarted.website._visitor.WebsiteTraverser getTraverser();
      public void setTraverser(de.monticore.gettingstarted.website._visitor.WebsiteTraverser traverser);
      public void addChecker(de.monticore.gettingstarted.website._cocos.WebsiteCoCoChecker checker);
      public void checkAll(de.monticore.gettingstarted.website._ast.ASTWebsiteNode node);
      public void addCoCo(de.monticore.gettingstarted.website._cocos.WebsiteASTWebsiteCoCo coco);
      public void addCoCo(de.monticore.gettingstarted.website._cocos.WebsiteASTNavigationCoCo coco);
      public void addCoCo(de.monticore.gettingstarted.website._cocos.WebsiteASTNavigationItemCoCo coco);
      public void addCoCo(de.monticore.gettingstarted.website._cocos.WebsiteASTPageCoCo coco);
      public void addCoCo(de.monticore.gettingstarted.website._cocos.WebsiteASTPageContentCoCo coco);
      public void addCoCo(de.monticore.gettingstarted.website._cocos.WebsiteASTLinkCoCo coco);
      public void addCoCo(de.monticore.gettingstarted.website._cocos.WebsiteASTPictureCoCo coco);
      public void addCoCo(de.monticore.gettingstarted.website._cocos.WebsiteASTParagraphCoCo coco);
      public void addCoCo(de.monticore.gettingstarted.website._cocos.WebsiteASTTextBlockCoCo coco);
      public void addCoCo(de.monticore.gettingstarted.website._cocos.WebsiteASTCodeBlockCoCo coco);
      public void addCoCo(de.monticore.gettingstarted.website._cocos.WebsiteASTAsideCoCo coco);
      public void addCoCo(de.monticore.gettingstarted.website._cocos.WebsiteASTRowCoCo coco);
      public void addCoCo(de.monticore.gettingstarted.website._cocos.WebsiteASTLandImageCoCo coco);
      public void addCoCo(de.monticore.gettingstarted.website._cocos.WebsiteASTCardCoCo coco);
      public void addCoCo(de.monticore.gettingstarted.website._cocos.WebsiteASTTableCoCo coco);
      public void addCoCo(de.monticore.gettingstarted.website._cocos.WebsiteASTWebsiteElementCoCo coco);
      public void addCoCo(de.monticore.gettingstarted.website._cocos.WebsiteASTPageContentElementCoCo coco);
      public void addCoCo(de.monticore.gettingstarted.website._cocos.WebsiteASTWebsiteNodeCoCo coco);
      public void addChecker(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsCoCoChecker checker);
      public void checkAll(de.monticore.literals.mccommonliterals._ast.ASTMCCommonLiteralsNode node);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTNullLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTBooleanLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTCharLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTStringLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTNatLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedNatLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTBasicLongLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedBasicLongLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTBasicFloatLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedBasicFloatLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTBasicDoubleLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedBasicDoubleLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTNumericLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedNumericLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTMCCommonLiteralsNodeCoCo coco);
      public void addChecker(de.monticore.mcbasics._cocos.MCBasicsCoCoChecker checker);
      public void checkAll(de.monticore.mcbasics._ast.ASTMCBasicsNode node);
      public void addCoCo(de.monticore.mcbasics._cocos.MCBasicsASTMCBasicsNodeCoCo coco);
      public void addChecker(de.monticore.literals.mcliteralsbasis._cocos.MCLiteralsBasisCoCoChecker checker);
      public void checkAll(de.monticore.literals.mcliteralsbasis._ast.ASTMCLiteralsBasisNode node);
      public void addCoCo(de.monticore.literals.mcliteralsbasis._cocos.MCLiteralsBasisASTLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mcliteralsbasis._cocos.MCLiteralsBasisASTMCLiteralsBasisNodeCoCo coco);
    }
    public interface WebsiteASTWebsiteCoCo extends de.monticore.gettingstarted.website._visitor.WebsiteVisitor2 {
      public abstract void check(de.monticore.gettingstarted.website._ast.ASTWebsite node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTWebsite node);
    }
    public interface WebsiteASTNavigationCoCo extends de.monticore.gettingstarted.website._visitor.WebsiteVisitor2 {
      public abstract void check(de.monticore.gettingstarted.website._ast.ASTNavigation node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTNavigation node);
    }
    public interface WebsiteASTNavigationItemCoCo extends de.monticore.gettingstarted.website._visitor.WebsiteVisitor2 {
      public abstract void check(de.monticore.gettingstarted.website._ast.ASTNavigationItem node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTNavigationItem node);
    }
    public interface WebsiteASTPageCoCo extends de.monticore.gettingstarted.website._visitor.WebsiteVisitor2 {
      public abstract void check(de.monticore.gettingstarted.website._ast.ASTPage node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTPage node);
    }
    public interface WebsiteASTPageContentCoCo extends de.monticore.gettingstarted.website._visitor.WebsiteVisitor2 {
      public abstract void check(de.monticore.gettingstarted.website._ast.ASTPageContent node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTPageContent node);
    }
    public interface WebsiteASTLinkCoCo extends de.monticore.gettingstarted.website._visitor.WebsiteVisitor2 {
      public abstract void check(de.monticore.gettingstarted.website._ast.ASTLink node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTLink node);
    }
    public interface WebsiteASTPictureCoCo extends de.monticore.gettingstarted.website._visitor.WebsiteVisitor2 {
      public abstract void check(de.monticore.gettingstarted.website._ast.ASTPicture node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTPicture node);
    }
    public interface WebsiteASTParagraphCoCo extends de.monticore.gettingstarted.website._visitor.WebsiteVisitor2 {
      public abstract void check(de.monticore.gettingstarted.website._ast.ASTParagraph node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTParagraph node);
    }
    public interface WebsiteASTTextBlockCoCo extends de.monticore.gettingstarted.website._visitor.WebsiteVisitor2 {
      public abstract void check(de.monticore.gettingstarted.website._ast.ASTTextBlock node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTTextBlock node);
    }
    public interface WebsiteASTCodeBlockCoCo extends de.monticore.gettingstarted.website._visitor.WebsiteVisitor2 {
      public abstract void check(de.monticore.gettingstarted.website._ast.ASTCodeBlock node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTCodeBlock node);
    }
    public interface WebsiteASTAsideCoCo extends de.monticore.gettingstarted.website._visitor.WebsiteVisitor2 {
      public abstract void check(de.monticore.gettingstarted.website._ast.ASTAside node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTAside node);
    }
    public interface WebsiteASTRowCoCo extends de.monticore.gettingstarted.website._visitor.WebsiteVisitor2 {
      public abstract void check(de.monticore.gettingstarted.website._ast.ASTRow node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTRow node);
    }
    public interface WebsiteASTLandImageCoCo extends de.monticore.gettingstarted.website._visitor.WebsiteVisitor2 {
      public abstract void check(de.monticore.gettingstarted.website._ast.ASTLandImage node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTLandImage node);
    }
    public interface WebsiteASTCardCoCo extends de.monticore.gettingstarted.website._visitor.WebsiteVisitor2 {
      public abstract void check(de.monticore.gettingstarted.website._ast.ASTCard node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTCard node);
    }
    public interface WebsiteASTTableCoCo extends de.monticore.gettingstarted.website._visitor.WebsiteVisitor2 {
      public abstract void check(de.monticore.gettingstarted.website._ast.ASTTable node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTTable node);
    }
    public interface WebsiteASTWebsiteElementCoCo extends de.monticore.gettingstarted.website._visitor.WebsiteVisitor2 {
      public abstract void check(de.monticore.gettingstarted.website._ast.ASTWebsiteElement node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTWebsiteElement node);
    }
    public interface WebsiteASTPageContentElementCoCo extends de.monticore.gettingstarted.website._visitor.WebsiteVisitor2 {
      public abstract void check(de.monticore.gettingstarted.website._ast.ASTPageContentElement node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTPageContentElement node);
    }
    public interface WebsiteASTWebsiteNodeCoCo extends de.monticore.gettingstarted.website._visitor.WebsiteVisitor2 {
      public abstract void check(de.monticore.gettingstarted.website._ast.ASTWebsiteNode node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTWebsiteNode node);
    }
  }

  package de.monticore.gettingstarted.website._visitor {
    public interface WebsiteTraverser extends de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser {
      public void add4Website(de.monticore.gettingstarted.website._visitor.WebsiteVisitor2 websiteVisitor);
      public List<de.monticore.gettingstarted.website._visitor.WebsiteVisitor2> getWebsiteVisitorList();
      public void add4MCCommonLiterals(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor2 mCCommonLiteralsVisitor);
      public List<de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor2> getMCCommonLiteralsVisitorList();
      public void add4MCBasics(de.monticore.mcbasics._visitor.MCBasicsVisitor2 mCBasicsVisitor);
      public List<de.monticore.mcbasics._visitor.MCBasicsVisitor2> getMCBasicsVisitorList();
      public void add4MCLiteralsBasis(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor2 mCLiteralsBasisVisitor);
      public List<de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor2> getMCLiteralsBasisVisitorList();
      public void setWebsiteHandler(de.monticore.gettingstarted.website._visitor.WebsiteHandler websiteHandler);
      public Optional<de.monticore.gettingstarted.website._visitor.WebsiteHandler> getWebsiteHandler();
      public void setMCCommonLiteralsHandler(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsHandler mCCommonLiteralsHandler);
      public Optional<de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsHandler> getMCCommonLiteralsHandler();
      public void setMCBasicsHandler(de.monticore.mcbasics._visitor.MCBasicsHandler mCBasicsHandler);
      public Optional<de.monticore.mcbasics._visitor.MCBasicsHandler> getMCBasicsHandler();
      public void setMCLiteralsBasisHandler(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisHandler mCLiteralsBasisHandler);
      public Optional<de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisHandler> getMCLiteralsBasisHandler();
      public void visit(de.monticore.gettingstarted.website._ast.ASTWebsite node);
      public void endVisit(de.monticore.gettingstarted.website._ast.ASTWebsite node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTWebsite node);
      public void traverse(de.monticore.gettingstarted.website._ast.ASTWebsite node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTNavigation node);
      public void endVisit(de.monticore.gettingstarted.website._ast.ASTNavigation node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTNavigation node);
      public void traverse(de.monticore.gettingstarted.website._ast.ASTNavigation node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTNavigationItem node);
      public void endVisit(de.monticore.gettingstarted.website._ast.ASTNavigationItem node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTNavigationItem node);
      public void traverse(de.monticore.gettingstarted.website._ast.ASTNavigationItem node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTPage node);
      public void endVisit(de.monticore.gettingstarted.website._ast.ASTPage node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTPage node);
      public void traverse(de.monticore.gettingstarted.website._ast.ASTPage node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTPageContent node);
      public void endVisit(de.monticore.gettingstarted.website._ast.ASTPageContent node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTPageContent node);
      public void traverse(de.monticore.gettingstarted.website._ast.ASTPageContent node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTLink node);
      public void endVisit(de.monticore.gettingstarted.website._ast.ASTLink node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTLink node);
      public void traverse(de.monticore.gettingstarted.website._ast.ASTLink node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTPicture node);
      public void endVisit(de.monticore.gettingstarted.website._ast.ASTPicture node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTPicture node);
      public void traverse(de.monticore.gettingstarted.website._ast.ASTPicture node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTParagraph node);
      public void endVisit(de.monticore.gettingstarted.website._ast.ASTParagraph node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTParagraph node);
      public void traverse(de.monticore.gettingstarted.website._ast.ASTParagraph node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTTextBlock node);
      public void endVisit(de.monticore.gettingstarted.website._ast.ASTTextBlock node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTTextBlock node);
      public void traverse(de.monticore.gettingstarted.website._ast.ASTTextBlock node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTCodeBlock node);
      public void endVisit(de.monticore.gettingstarted.website._ast.ASTCodeBlock node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTCodeBlock node);
      public void traverse(de.monticore.gettingstarted.website._ast.ASTCodeBlock node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTAside node);
      public void endVisit(de.monticore.gettingstarted.website._ast.ASTAside node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTAside node);
      public void traverse(de.monticore.gettingstarted.website._ast.ASTAside node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTRow node);
      public void endVisit(de.monticore.gettingstarted.website._ast.ASTRow node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTRow node);
      public void traverse(de.monticore.gettingstarted.website._ast.ASTRow node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTLandImage node);
      public void endVisit(de.monticore.gettingstarted.website._ast.ASTLandImage node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTLandImage node);
      public void traverse(de.monticore.gettingstarted.website._ast.ASTLandImage node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTCard node);
      public void endVisit(de.monticore.gettingstarted.website._ast.ASTCard node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTCard node);
      public void traverse(de.monticore.gettingstarted.website._ast.ASTCard node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTTable node);
      public void endVisit(de.monticore.gettingstarted.website._ast.ASTTable node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTTable node);
      public void traverse(de.monticore.gettingstarted.website._ast.ASTTable node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTWebsiteElement node);
      public void endVisit(de.monticore.gettingstarted.website._ast.ASTWebsiteElement node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTWebsiteElement node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTPageContentElement node);
      public void endVisit(de.monticore.gettingstarted.website._ast.ASTPageContentElement node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTPageContentElement node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTWebsiteNode node);
      public void endVisit(de.monticore.gettingstarted.website._ast.ASTWebsiteNode node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTWebsiteNode node);
      public void visit(de.monticore.gettingstarted.website._symboltable.PageSymbol node);
      public void endVisit(de.monticore.gettingstarted.website._symboltable.PageSymbol node);
      public void handle(de.monticore.gettingstarted.website._symboltable.PageSymbol node);
      public void traverse(de.monticore.gettingstarted.website._symboltable.PageSymbol node);
      public void visit(de.monticore.gettingstarted.website._symboltable.ICommonWebsiteSymbol node);
      public void endVisit(de.monticore.gettingstarted.website._symboltable.ICommonWebsiteSymbol node);
      public void handle(de.monticore.gettingstarted.website._symboltable.ICommonWebsiteSymbol node);
      public void traverse(de.monticore.gettingstarted.website._symboltable.ICommonWebsiteSymbol node);
      public void visit(de.monticore.gettingstarted.website._symboltable.IWebsiteScope node);
      public void endVisit(de.monticore.gettingstarted.website._symboltable.IWebsiteScope node);
      public void handle(de.monticore.gettingstarted.website._symboltable.IWebsiteScope node);
      public void traverse(de.monticore.gettingstarted.website._symboltable.IWebsiteScope node);
      public void visit(de.monticore.gettingstarted.website._symboltable.IWebsiteArtifactScope node);
      public void endVisit(de.monticore.gettingstarted.website._symboltable.IWebsiteArtifactScope node);
      public void handle(de.monticore.gettingstarted.website._symboltable.IWebsiteArtifactScope node);
      public void traverse(de.monticore.gettingstarted.website._symboltable.IWebsiteArtifactScope node);
    }
    public class WebsiteTraverserImplementation implements de.monticore.gettingstarted.website._visitor.WebsiteTraverser {
      protected WebsiteTraverserImplementation realThis;
      protected List<de.monticore.visitor.IVisitor> iVisitorList;
      protected List<de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor2> mCCommonLiteralsVisitorList;
      protected List<de.monticore.mcbasics._visitor.MCBasicsVisitor2> mCBasicsVisitorList;
      protected List<de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor2> mCLiteralsBasisVisitorList;
      protected List<de.monticore.gettingstarted.website._visitor.WebsiteVisitor2> websiteVisitorList;
      protected Optional<de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsHandler> mCCommonLiteralsHandler;
      protected Optional<de.monticore.mcbasics._visitor.MCBasicsHandler> mCBasicsHandler;
      protected Optional<de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisHandler> mCLiteralsBasisHandler;
      protected Optional<de.monticore.gettingstarted.website._visitor.WebsiteHandler> websiteHandler;
      public void add4MCCommonLiterals(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor2 mCCommonLiteralsVisitor);
      public List<de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor2> getMCCommonLiteralsVisitorList();
      public void add4MCBasics(de.monticore.mcbasics._visitor.MCBasicsVisitor2 mCBasicsVisitor);
      public List<de.monticore.mcbasics._visitor.MCBasicsVisitor2> getMCBasicsVisitorList();
      public void add4MCLiteralsBasis(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor2 mCLiteralsBasisVisitor);
      public List<de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor2> getMCLiteralsBasisVisitorList();
      public void add4Website(de.monticore.gettingstarted.website._visitor.WebsiteVisitor2 websiteVisitor);
      public List<de.monticore.gettingstarted.website._visitor.WebsiteVisitor2> getWebsiteVisitorList();
      public void setMCCommonLiteralsHandler(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsHandler mCCommonLiteralsHandler);
      public Optional<de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsHandler> getMCCommonLiteralsHandler();
      public void setMCBasicsHandler(de.monticore.mcbasics._visitor.MCBasicsHandler mCBasicsHandler);
      public Optional<de.monticore.mcbasics._visitor.MCBasicsHandler> getMCBasicsHandler();
      public void setMCLiteralsBasisHandler(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisHandler mCLiteralsBasisHandler);
      public Optional<de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisHandler> getMCLiteralsBasisHandler();
      public void setWebsiteHandler(de.monticore.gettingstarted.website._visitor.WebsiteHandler websiteHandler);
      public Optional<de.monticore.gettingstarted.website._visitor.WebsiteHandler> getWebsiteHandler();
      public void add4IVisitor(de.monticore.visitor.IVisitor iVisitor);
      public List<de.monticore.visitor.IVisitor> getIVisitorList();
      protected Set<Object> traversedElements;
      public Set<Object> getTraversedElements();
      public void setTraversedElements(Set<Object> traversedElements);
    }
    public interface WebsiteVisitor2 extends de.monticore.visitor.IVisitor {
      public void visit(de.monticore.gettingstarted.website._ast.ASTWebsite node);
      public void endVisit(de.monticore.gettingstarted.website._ast.ASTWebsite node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTNavigation node);
      public void endVisit(de.monticore.gettingstarted.website._ast.ASTNavigation node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTNavigationItem node);
      public void endVisit(de.monticore.gettingstarted.website._ast.ASTNavigationItem node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTPage node);
      public void endVisit(de.monticore.gettingstarted.website._ast.ASTPage node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTPageContent node);
      public void endVisit(de.monticore.gettingstarted.website._ast.ASTPageContent node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTLink node);
      public void endVisit(de.monticore.gettingstarted.website._ast.ASTLink node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTPicture node);
      public void endVisit(de.monticore.gettingstarted.website._ast.ASTPicture node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTParagraph node);
      public void endVisit(de.monticore.gettingstarted.website._ast.ASTParagraph node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTTextBlock node);
      public void endVisit(de.monticore.gettingstarted.website._ast.ASTTextBlock node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTCodeBlock node);
      public void endVisit(de.monticore.gettingstarted.website._ast.ASTCodeBlock node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTAside node);
      public void endVisit(de.monticore.gettingstarted.website._ast.ASTAside node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTRow node);
      public void endVisit(de.monticore.gettingstarted.website._ast.ASTRow node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTLandImage node);
      public void endVisit(de.monticore.gettingstarted.website._ast.ASTLandImage node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTCard node);
      public void endVisit(de.monticore.gettingstarted.website._ast.ASTCard node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTTable node);
      public void endVisit(de.monticore.gettingstarted.website._ast.ASTTable node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTWebsiteElement node);
      public void endVisit(de.monticore.gettingstarted.website._ast.ASTWebsiteElement node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTPageContentElement node);
      public void endVisit(de.monticore.gettingstarted.website._ast.ASTPageContentElement node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTWebsiteNode node);
      public void endVisit(de.monticore.gettingstarted.website._ast.ASTWebsiteNode node);
      public void visit(de.monticore.gettingstarted.website._symboltable.PageSymbol node);
      public void endVisit(de.monticore.gettingstarted.website._symboltable.PageSymbol node);
      public void visit(de.monticore.gettingstarted.website._symboltable.IWebsiteScope node);
      public void endVisit(de.monticore.gettingstarted.website._symboltable.IWebsiteScope node);
      public void visit(de.monticore.gettingstarted.website._symboltable.IWebsiteArtifactScope node);
      public void endVisit(de.monticore.gettingstarted.website._symboltable.IWebsiteArtifactScope node);
    }
    public interface WebsiteHandler extends de.monticore.visitor.IHandler {
      public de.monticore.gettingstarted.website._visitor.WebsiteTraverser getTraverser();
      public void setTraverser(de.monticore.gettingstarted.website._visitor.WebsiteTraverser traverser);
      public void handle(de.monticore.gettingstarted.website._ast.ASTWebsite node);
      public void traverse(de.monticore.gettingstarted.website._ast.ASTWebsite node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTNavigation node);
      public void traverse(de.monticore.gettingstarted.website._ast.ASTNavigation node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTNavigationItem node);
      public void traverse(de.monticore.gettingstarted.website._ast.ASTNavigationItem node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTPage node);
      public void traverse(de.monticore.gettingstarted.website._ast.ASTPage node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTPageContent node);
      public void traverse(de.monticore.gettingstarted.website._ast.ASTPageContent node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTLink node);
      public void traverse(de.monticore.gettingstarted.website._ast.ASTLink node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTPicture node);
      public void traverse(de.monticore.gettingstarted.website._ast.ASTPicture node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTParagraph node);
      public void traverse(de.monticore.gettingstarted.website._ast.ASTParagraph node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTTextBlock node);
      public void traverse(de.monticore.gettingstarted.website._ast.ASTTextBlock node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTCodeBlock node);
      public void traverse(de.monticore.gettingstarted.website._ast.ASTCodeBlock node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTAside node);
      public void traverse(de.monticore.gettingstarted.website._ast.ASTAside node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTRow node);
      public void traverse(de.monticore.gettingstarted.website._ast.ASTRow node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTLandImage node);
      public void traverse(de.monticore.gettingstarted.website._ast.ASTLandImage node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTCard node);
      public void traverse(de.monticore.gettingstarted.website._ast.ASTCard node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTTable node);
      public void traverse(de.monticore.gettingstarted.website._ast.ASTTable node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTWebsiteElement node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTPageContentElement node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTWebsiteNode node);
      public void handle(de.monticore.gettingstarted.website._symboltable.PageSymbol node);
      public void traverse(de.monticore.gettingstarted.website._symboltable.PageSymbol node);
      public void handle(de.monticore.gettingstarted.website._symboltable.ICommonWebsiteSymbol node);
      public void traverse(de.monticore.gettingstarted.website._symboltable.ICommonWebsiteSymbol node);
      public void handle(de.monticore.gettingstarted.website._symboltable.IWebsiteScope node);
      public void traverse(de.monticore.gettingstarted.website._symboltable.IWebsiteScope node);
      public void handle(de.monticore.gettingstarted.website._symboltable.IWebsiteArtifactScope node);
      public void traverse(de.monticore.gettingstarted.website._symboltable.IWebsiteArtifactScope node);
    }
    public class WebsiteInheritanceHandler implements de.monticore.gettingstarted.website._visitor.WebsiteHandler {
      protected de.monticore.gettingstarted.website._visitor.WebsiteTraverser traverser;
      public de.monticore.gettingstarted.website._visitor.WebsiteTraverser getTraverser();
      public void setTraverser(de.monticore.gettingstarted.website._visitor.WebsiteTraverser traverser);
      public void handle(de.monticore.gettingstarted.website._ast.ASTWebsite node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTNavigation node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTNavigationItem node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTPage node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTPageContent node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTLink node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTPicture node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTParagraph node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTTextBlock node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTCodeBlock node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTAside node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTRow node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTLandImage node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTCard node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTTable node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTWebsiteElement node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTPageContentElement node);
      public void handle(de.monticore.gettingstarted.website._ast.ASTWebsiteNode node);
      public void handle(de.monticore.gettingstarted.website._symboltable.IWebsiteScope node);
      public void handle(de.monticore.gettingstarted.website._symboltable.IWebsiteArtifactScope node);
      public void handle(de.monticore.gettingstarted.website._symboltable.PageSymbol node);
    }
  }

  package de.monticore.gettingstarted.website._symboltable {
    public class PageSymbol implements de.monticore.gettingstarted.website._symboltable.ICommonWebsiteSymbol {
      public PageSymbol(String name);
      protected String name;
      protected de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope;
      protected Optional<de.monticore.gettingstarted.website._ast.ASTPage> astNode;
      protected de.monticore.symboltable.modifiers.AccessModifier accessModifier;
      protected String fullName;
      protected String packageName;
      public String getName();
      public void setName(String name);
      public de.monticore.gettingstarted.website._symboltable.IWebsiteScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope);
      public de.monticore.gettingstarted.website._ast.ASTPage getAstNode();
      public boolean isPresentAstNode();
      public void setAstNode(de.monticore.gettingstarted.website._ast.ASTPage astNode);
      public void setAstNodeAbsent();
      public de.monticore.symboltable.modifiers.AccessModifier getAccessModifier();
      public void setAccessModifier(de.monticore.symboltable.modifiers.AccessModifier accessModifier);
      public void setFullName(String fullName);
      public String getFullName();
      public void setPackageName(String packageName);
      public String getPackageName();
      public void accept(de.monticore.gettingstarted.website._visitor.WebsiteTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
      protected String determinePackageName();
      protected String determineFullName();
    }
    public class PageSymbolBuilder {
      protected PageSymbolBuilder realBuilder;
      protected String name;
      protected String fullName;
      protected String packageName;
      protected Optional<de.monticore.gettingstarted.website._ast.ASTPage> astNode;
      protected de.monticore.symboltable.modifiers.AccessModifier accessModifier;
      protected de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope;
      public PageSymbolBuilder();
      public PageSymbol build();
      public boolean isValid();
      public String getName();
      public String getFullName();
      public String getPackageName();
      public de.monticore.gettingstarted.website._ast.ASTPage getAstNode();
      public boolean isPresentAstNode();
      public de.monticore.symboltable.modifiers.AccessModifier getAccessModifier();
      public de.monticore.gettingstarted.website._symboltable.IWebsiteScope getEnclosingScope();
      public PageSymbolBuilder setName(String name);
      public PageSymbolBuilder setFullName(String fullName);
      public PageSymbolBuilder setPackageName(String packageName);
      public PageSymbolBuilder setAstNode(de.monticore.gettingstarted.website._ast.ASTPage astNode);
      public PageSymbolBuilder setAstNodeAbsent();
      public PageSymbolBuilder setAccessModifier(de.monticore.symboltable.modifiers.AccessModifier accessModifier);
      public PageSymbolBuilder setEnclosingScope(de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope);
    }
    public class WebsiteScope implements de.monticore.gettingstarted.website._symboltable.IWebsiteScope {
      public WebsiteScope();
      public WebsiteScope(boolean shadowing);
      public WebsiteScope(de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope);
      public WebsiteScope(de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope, boolean shadowing);
      protected com.google.common.collect.LinkedListMultimap<String,de.monticore.gettingstarted.website._symboltable.PageSymbol> pageSymbols;
      protected com.google.common.collect.LinkedListMultimap<String,de.monticore.symboltable.SymbolWithScopeOfUnknownKind> unknownSymbols;
      public void add(de.monticore.gettingstarted.website._symboltable.PageSymbol symbol);
      public void remove(de.monticore.gettingstarted.website._symboltable.PageSymbol symbol);
      public com.google.common.collect.LinkedListMultimap<String,de.monticore.gettingstarted.website._symboltable.PageSymbol> getPageSymbols();
      public void add(de.monticore.symboltable.SymbolWithScopeOfUnknownKind symbol);
      public void remove(de.monticore.symboltable.SymbolWithScopeOfUnknownKind symbol);
      public com.google.common.collect.LinkedListMultimap<String,de.monticore.symboltable.SymbolWithScopeOfUnknownKind> getUnknownSymbols();
      protected boolean pageSymbolsAlreadyResolved;
      protected boolean unknownSymbolsAlreadyResolved;
      public boolean isPageSymbolsAlreadyResolved();
      public void setPageSymbolsAlreadyResolved(boolean pageSymbolsAlreadyResolved);
      public boolean isUnknownSymbolsAlreadyResolved();
      public void setUnknownSymbolsAlreadyResolved(boolean unknownSymbolsAlreadyResolved);
      protected de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope;
      public de.monticore.gettingstarted.website._symboltable.IWebsiteScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope);
      protected Optional<de.monticore.symboltable.IScopeSpanningSymbol> spanningSymbol;
      public de.monticore.symboltable.IScopeSpanningSymbol getSpanningSymbol();
      public boolean isPresentSpanningSymbol();
      public void setSpanningSymbol(de.monticore.symboltable.IScopeSpanningSymbol spanningSymbol);
      public void setSpanningSymbolAbsent();
      protected boolean shadowing;
      public boolean isShadowing();
      public void setShadowing(boolean shadowing);
      protected boolean exportingSymbols;
      public boolean isExportingSymbols();
      public void setExportingSymbols(boolean exportingSymbols);
      protected boolean ordered;
      public boolean isOrdered();
      public void setOrdered(boolean ordered);
      protected Optional<String> name;
      public String getName();
      public boolean isPresentName();
      public void setName(String name);
      public void setNameAbsent();
      protected Optional<de.monticore.ast.ASTNode> astNode;
      public de.monticore.ast.ASTNode getAstNode();
      public boolean isPresentAstNode();
      public void setAstNode(de.monticore.ast.ASTNode astNode);
      public void setAstNodeAbsent();
      protected List<de.monticore.gettingstarted.website._symboltable.IWebsiteScope> subScopes;
      public void addSubScope(de.monticore.gettingstarted.website._symboltable.IWebsiteScope subScope);
      public void removeSubScope(de.monticore.gettingstarted.website._symboltable.IWebsiteScope subScope);
      public List<de.monticore.gettingstarted.website._symboltable.IWebsiteScope> getSubScopes();
      public void setSubScopes(List<de.monticore.gettingstarted.website._symboltable.IWebsiteScope> subScopes);
      public void accept(de.monticore.gettingstarted.website._visitor.WebsiteTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void addSubScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope subScope);
      public void removeSubScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope subScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope newEnclosingScope);
      public void addSubScope(de.monticore.mcbasics._symboltable.IMCBasicsScope subScope);
      public void removeSubScope(de.monticore.mcbasics._symboltable.IMCBasicsScope subScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope newEnclosingScope);
      public void addSubScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope subScope);
      public void removeSubScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope subScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope newEnclosingScope);
      public List<de.monticore.gettingstarted.website._symboltable.PageSymbol> resolvePageSubKinds(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.gettingstarted.website._symboltable.PageSymbol> predicate);
    }
    public interface IWebsiteScope extends de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope {
      public abstract boolean isPageSymbolsAlreadyResolved();
      public abstract void setPageSymbolsAlreadyResolved(boolean symbolAlreadyResolved);
      public Optional<de.monticore.gettingstarted.website._symboltable.PageSymbol> resolvePage(String name);
      public Optional<de.monticore.gettingstarted.website._symboltable.PageSymbol> resolvePage(String name, de.monticore.symboltable.modifiers.AccessModifier modifier);
      public Optional<de.monticore.gettingstarted.website._symboltable.PageSymbol> resolvePage(String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.gettingstarted.website._symboltable.PageSymbol> predicate);
      public Optional<de.monticore.gettingstarted.website._symboltable.PageSymbol> resolvePage(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier);
      public Optional<de.monticore.gettingstarted.website._symboltable.PageSymbol> resolvePageDown(String name);
      public Optional<de.monticore.gettingstarted.website._symboltable.PageSymbol> resolvePageDown(String name, de.monticore.symboltable.modifiers.AccessModifier modifier);
      public Optional<de.monticore.gettingstarted.website._symboltable.PageSymbol> resolvePageDown(String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.gettingstarted.website._symboltable.PageSymbol> predicate);
      public List<de.monticore.gettingstarted.website._symboltable.PageSymbol> resolvePageDownMany(String name);
      public List<de.monticore.gettingstarted.website._symboltable.PageSymbol> resolvePageDownMany(String name, de.monticore.symboltable.modifiers.AccessModifier modifier);
      public List<de.monticore.gettingstarted.website._symboltable.PageSymbol> resolvePageDownMany(String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.gettingstarted.website._symboltable.PageSymbol> predicate);
      public List<de.monticore.gettingstarted.website._symboltable.PageSymbol> resolvePageDownMany(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.gettingstarted.website._symboltable.PageSymbol> predicate);
      public Optional<de.monticore.gettingstarted.website._symboltable.PageSymbol> resolvePageLocally(String name);
      public List<de.monticore.gettingstarted.website._symboltable.PageSymbol> resolvePageLocallyMany(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.gettingstarted.website._symboltable.PageSymbol> predicate);
      public abstract List<de.monticore.gettingstarted.website._symboltable.PageSymbol> resolvePageSubKinds(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.gettingstarted.website._symboltable.PageSymbol> predicate);
      public List<de.monticore.gettingstarted.website._symboltable.PageSymbol> resolvePageMany(String name);
      public List<de.monticore.gettingstarted.website._symboltable.PageSymbol> resolvePageMany(String name, de.monticore.symboltable.modifiers.AccessModifier modifier);
      public List<de.monticore.gettingstarted.website._symboltable.PageSymbol> resolvePageMany(String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.gettingstarted.website._symboltable.PageSymbol> predicate);
      public List<de.monticore.gettingstarted.website._symboltable.PageSymbol> resolvePageMany(String name, java.util.function.Predicate<de.monticore.gettingstarted.website._symboltable.PageSymbol> predicate);
      public List<de.monticore.gettingstarted.website._symboltable.PageSymbol> resolvePageMany(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier);
      public List<de.monticore.gettingstarted.website._symboltable.PageSymbol> resolvePageMany(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.gettingstarted.website._symboltable.PageSymbol> predicate);
      public List<de.monticore.gettingstarted.website._symboltable.PageSymbol> resolveAdaptedPageLocallyMany(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.gettingstarted.website._symboltable.PageSymbol> predicate);
      public Optional<de.monticore.gettingstarted.website._symboltable.PageSymbol> filterPage(String name, com.google.common.collect.LinkedListMultimap<String,de.monticore.gettingstarted.website._symboltable.PageSymbol> symbols);
      public List<de.monticore.gettingstarted.website._symboltable.PageSymbol> continuePageWithEnclosingScope(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.gettingstarted.website._symboltable.PageSymbol> predicate);
      public List<de.monticore.gettingstarted.website._symboltable.PageSymbol> continueAsPageSubScope(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.gettingstarted.website._symboltable.PageSymbol> predicate);
      public abstract com.google.common.collect.LinkedListMultimap<String,de.monticore.gettingstarted.website._symboltable.PageSymbol> getPageSymbols();
      public List<de.monticore.gettingstarted.website._symboltable.PageSymbol> getLocalPageSymbols();
      public abstract void add(de.monticore.gettingstarted.website._symboltable.PageSymbol symbol);
      public abstract void remove(de.monticore.gettingstarted.website._symboltable.PageSymbol symbol);
      public abstract List<? extends IWebsiteScope> getSubScopes();
      public void addSubScope(IWebsiteScope subScope);
      public void removeSubScope(IWebsiteScope subScope);
      public abstract IWebsiteScope getEnclosingScope();
      public abstract void setEnclosingScope(IWebsiteScope enclosingScope);
      public abstract void accept(de.monticore.gettingstarted.website._visitor.WebsiteTraverser visitor);
      public int getSymbolsSize();
    }
    public class PageSymbolSurrogate extends de.monticore.gettingstarted.website._symboltable.PageSymbol {
      public PageSymbolSurrogate(String name);
      public String getName();
      public void setName(String name);
      public String getFullName();
      protected Optional<de.monticore.gettingstarted.website._symboltable.PageSymbol> delegate;
      public void setEnclosingScope(de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope);
      public de.monticore.gettingstarted.website._symboltable.IWebsiteScope getEnclosingScope();
      public boolean checkLazyLoadDelegate();
      public de.monticore.gettingstarted.website._symboltable.PageSymbol lazyLoadDelegate();
    }
    public class PageSymbolSurrogateBuilder {
      public PageSymbolSurrogateBuilder();
      protected PageSymbolSurrogateBuilder realBuilder;
      protected String name;
      protected de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope;
      public PageSymbolSurrogateBuilder setName(String name);
      public String getName();
      public de.monticore.gettingstarted.website._symboltable.IWebsiteScope getEnclosingScope();
      public PageSymbolSurrogateBuilder setEnclosingScope(de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope);
      public PageSymbolSurrogate build();
    }
    public class PageSymbolDeSer implements de.monticore.symboltable.serialization.ISymbolDeSer<de.monticore.gettingstarted.website._symboltable.PageSymbol, de.monticore.gettingstarted.website._symboltable.WebsiteSymbols2Json> {
      public String getSerializedKind();
      public String serialize(de.monticore.gettingstarted.website._symboltable.PageSymbol toSerialize, de.monticore.gettingstarted.website._symboltable.WebsiteSymbols2Json s2j);
      protected void serializeAddons(de.monticore.gettingstarted.website._symboltable.PageSymbol toSerialize, de.monticore.gettingstarted.website._symboltable.WebsiteSymbols2Json s2j);
      public de.monticore.gettingstarted.website._symboltable.PageSymbol deserialize(de.monticore.symboltable.serialization.json.JsonObject symbolJson);
      protected void deserializeAddons(de.monticore.gettingstarted.website._symboltable.PageSymbol symbol, de.monticore.symboltable.serialization.json.JsonObject symbolJson);
    }
    public class WebsiteSymbols2Json implements de.monticore.gettingstarted.website._visitor.WebsiteVisitor2 {
      protected de.monticore.symboltable.serialization.IDeSer<de.monticore.gettingstarted.website._symboltable.IWebsiteScope, de.monticore.gettingstarted.website._symboltable.IWebsiteArtifactScope, WebsiteSymbols2Json> scopeDeSer;
      protected de.monticore.gettingstarted.website._symboltable.PageSymbolDeSer pageSymbolDeSer;
      protected WebsiteSymbols2Json realThis;
      public WebsiteSymbols2Json getRealThis();
      public void setRealThis(WebsiteSymbols2Json realThis);
      protected de.monticore.symboltable.serialization.JsonPrinter printer;
      public de.monticore.symboltable.serialization.JsonPrinter getJsonPrinter();
      public void setJsonPrinter(de.monticore.symboltable.serialization.JsonPrinter printer);
      protected de.monticore.gettingstarted.website._visitor.WebsiteTraverser traverser;
      public String serialize(de.monticore.gettingstarted.website._symboltable.IWebsiteScope toSerialize);
      public String serialize(de.monticore.gettingstarted.website._symboltable.IWebsiteArtifactScope toSerialize);
      public de.monticore.gettingstarted.website._symboltable.IWebsiteArtifactScope deserialize(String serialized);
      public de.monticore.gettingstarted.website._visitor.WebsiteTraverser getTraverser();
      public void setTraverser(de.monticore.gettingstarted.website._visitor.WebsiteTraverser traverser);
      public WebsiteSymbols2Json();
      public WebsiteSymbols2Json(de.monticore.gettingstarted.website._visitor.WebsiteTraverser traverser, de.monticore.symboltable.serialization.JsonPrinter printer);
      public void init();
      public String getSerializedString();
      public de.monticore.gettingstarted.website._symboltable.IWebsiteArtifactScope load(java.net.URL url);
      public de.monticore.gettingstarted.website._symboltable.IWebsiteArtifactScope load(java.io.Reader reader);
      public de.monticore.gettingstarted.website._symboltable.IWebsiteArtifactScope load(String model);
      public String store(de.monticore.gettingstarted.website._symboltable.IWebsiteArtifactScope scope, String fileName);
      public void visit(de.monticore.gettingstarted.website._symboltable.IWebsiteScope node);
      public void endVisit(de.monticore.gettingstarted.website._symboltable.IWebsiteScope node);
      public void visit(de.monticore.gettingstarted.website._symboltable.PageSymbol node);
      public void visit(de.monticore.gettingstarted.website._symboltable.IWebsiteArtifactScope node);
      public void endVisit(de.monticore.gettingstarted.website._symboltable.IWebsiteArtifactScope node);
    }
    public interface ICommonWebsiteSymbol extends de.monticore.symboltable.ISymbol {
      public abstract void accept(de.monticore.gettingstarted.website._visitor.WebsiteTraverser visitor);
      public abstract de.monticore.gettingstarted.website._symboltable.IWebsiteScope getEnclosingScope();
      public abstract void setEnclosingScope(de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope);
    }
    public interface IPageSymbolResolver {
      public abstract List<de.monticore.gettingstarted.website._symboltable.PageSymbol> resolveAdaptedPageSymbol(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.gettingstarted.website._symboltable.PageSymbol> predicate);
    }
    public interface IWebsiteGlobalScope extends de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsGlobalScope, de.monticore.gettingstarted.website._symboltable.IWebsiteScope {
      public Set<String> calculateModelNamesForPage(String name);
      public boolean containsAdaptedPageSymbolResolver(Object element);
      public boolean containsAllAdaptedPageSymbolResolver(Collection<?> collection);
      public boolean isEmptyAdaptedPageSymbolResolver();
      public Iterator<de.monticore.gettingstarted.website._symboltable.IPageSymbolResolver> iteratorAdaptedPageSymbolResolver();
      public int sizeAdaptedPageSymbolResolver();
      public de.monticore.gettingstarted.website._symboltable.IPageSymbolResolver[] toArrayAdaptedPageSymbolResolver(de.monticore.gettingstarted.website._symboltable.IPageSymbolResolver[] array);
      public Object[] toArrayAdaptedPageSymbolResolver();
      public Spliterator<de.monticore.gettingstarted.website._symboltable.IPageSymbolResolver> spliteratorAdaptedPageSymbolResolver();
      public Stream<de.monticore.gettingstarted.website._symboltable.IPageSymbolResolver> streamAdaptedPageSymbolResolver();
      public Stream<de.monticore.gettingstarted.website._symboltable.IPageSymbolResolver> parallelStreamAdaptedPageSymbolResolver();
      public de.monticore.gettingstarted.website._symboltable.IPageSymbolResolver getAdaptedPageSymbolResolver(int index);
      public int indexOfAdaptedPageSymbolResolver(Object element);
      public int lastIndexOfAdaptedPageSymbolResolver(Object element);
      public boolean equalsAdaptedPageSymbolResolver(Object o);
      public int hashCodeAdaptedPageSymbolResolver();
      public ListIterator<de.monticore.gettingstarted.website._symboltable.IPageSymbolResolver> listIteratorAdaptedPageSymbolResolver();
      public ListIterator<de.monticore.gettingstarted.website._symboltable.IPageSymbolResolver> listIteratorAdaptedPageSymbolResolver(int index);
      public List<de.monticore.gettingstarted.website._symboltable.IPageSymbolResolver> subListAdaptedPageSymbolResolver(int start, int end);
      public abstract List<de.monticore.gettingstarted.website._symboltable.IPageSymbolResolver> getAdaptedPageSymbolResolverList();
      public void clearAdaptedPageSymbolResolver();
      public boolean addAdaptedPageSymbolResolver(de.monticore.gettingstarted.website._symboltable.IPageSymbolResolver element);
      public boolean addAllAdaptedPageSymbolResolver(Collection<? extends de.monticore.gettingstarted.website._symboltable.IPageSymbolResolver> collection);
      public boolean removeAdaptedPageSymbolResolver(Object element);
      public boolean removeAllAdaptedPageSymbolResolver(Collection<?> collection);
      public boolean retainAllAdaptedPageSymbolResolver(Collection<?> collection);
      public boolean removeIfAdaptedPageSymbolResolver(Predicate<? super de.monticore.gettingstarted.website._symboltable.IPageSymbolResolver> filter);
      public void forEachAdaptedPageSymbolResolver(Consumer<? super de.monticore.gettingstarted.website._symboltable.IPageSymbolResolver> action);
      public void addAdaptedPageSymbolResolver(int index, de.monticore.gettingstarted.website._symboltable.IPageSymbolResolver element);
      public boolean addAllAdaptedPageSymbolResolver(int index, Collection<? extends de.monticore.gettingstarted.website._symboltable.IPageSymbolResolver> collection);
      public de.monticore.gettingstarted.website._symboltable.IPageSymbolResolver removeAdaptedPageSymbolResolver(int index);
      public de.monticore.gettingstarted.website._symboltable.IPageSymbolResolver setAdaptedPageSymbolResolver(int index, de.monticore.gettingstarted.website._symboltable.IPageSymbolResolver element);
      public void replaceAllAdaptedPageSymbolResolver(UnaryOperator<de.monticore.gettingstarted.website._symboltable.IPageSymbolResolver> operator);
      public void sortAdaptedPageSymbolResolver(Comparator<? super de.monticore.gettingstarted.website._symboltable.IPageSymbolResolver> comparator);
      public abstract void setAdaptedPageSymbolResolverList(List<de.monticore.gettingstarted.website._symboltable.IPageSymbolResolver> adaptedPageSymbolResolver);
      public List<de.monticore.gettingstarted.website._symboltable.PageSymbol> resolveAdaptedPage(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.gettingstarted.website._symboltable.PageSymbol> predicate);
      public List<de.monticore.gettingstarted.website._symboltable.PageSymbol> resolvePageMany(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.gettingstarted.website._symboltable.PageSymbol> predicate);
      public abstract void loadPage(String name);
      public abstract void loadFileForModelName(String modelName);
      public de.monticore.gettingstarted.website._symboltable.IWebsiteScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope);
      public String getName();
      public boolean isPresentName();
      public boolean checkIfContinueAsSubScope(String symbolName);
      public abstract Map<String,de.monticore.symboltable.serialization.ISymbolDeSer> getSymbolDeSers();
      public void putSymbolDeSer(String key, de.monticore.symboltable.serialization.ISymbolDeSer value);
      public de.monticore.symboltable.serialization.ISymbolDeSer getSymbolDeSer(String key);
      public void putPageSymbolDeSer(String kind);
      public de.monticore.symboltable.serialization.ISymbolDeSer getPageSymbolDeSer();
      public abstract IWebsiteGlobalScope getRealThis();
    }
    public interface IWebsiteArtifactScope extends de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsArtifactScope, de.monticore.gettingstarted.website._symboltable.IWebsiteScope {
      public boolean containsImports(Object element);
      public boolean containsAllImports(Collection<?> collection);
      public boolean isEmptyImports();
      public Iterator<de.monticore.symboltable.ImportStatement> iteratorImports();
      public int sizeImports();
      public de.monticore.symboltable.ImportStatement[] toArrayImports(de.monticore.symboltable.ImportStatement[] array);
      public Object[] toArrayImports();
      public Spliterator<de.monticore.symboltable.ImportStatement> spliteratorImports();
      public Stream<de.monticore.symboltable.ImportStatement> streamImports();
      public Stream<de.monticore.symboltable.ImportStatement> parallelStreamImports();
      public de.monticore.symboltable.ImportStatement getImports(int index);
      public int indexOfImports(Object element);
      public int lastIndexOfImports(Object element);
      public boolean equalsImports(Object o);
      public int hashCodeImports();
      public ListIterator<de.monticore.symboltable.ImportStatement> listIteratorImports();
      public ListIterator<de.monticore.symboltable.ImportStatement> listIteratorImports(int index);
      public List<de.monticore.symboltable.ImportStatement> subListImports(int start, int end);
      public void clearImports();
      public boolean addImports(de.monticore.symboltable.ImportStatement element);
      public boolean addAllImports(Collection<? extends de.monticore.symboltable.ImportStatement> collection);
      public boolean removeImports(Object element);
      public boolean removeAllImports(Collection<?> collection);
      public boolean retainAllImports(Collection<?> collection);
      public boolean removeIfImports(Predicate<? super de.monticore.symboltable.ImportStatement> filter);
      public void forEachImports(Consumer<? super de.monticore.symboltable.ImportStatement> action);
      public void addImports(int index, de.monticore.symboltable.ImportStatement element);
      public boolean addAllImports(int index, Collection<? extends de.monticore.symboltable.ImportStatement> collection);
      public de.monticore.symboltable.ImportStatement removeImports(int index);
      public de.monticore.symboltable.ImportStatement setImports(int index, de.monticore.symboltable.ImportStatement element);
      public void replaceAllImports(UnaryOperator<de.monticore.symboltable.ImportStatement> operator);
      public void sortImports(Comparator<? super de.monticore.symboltable.ImportStatement> comparator);
      public abstract List<de.monticore.symboltable.ImportStatement> getImportsList();
      public abstract void setImportsList(List<de.monticore.symboltable.ImportStatement> imports);
      public Optional<de.monticore.symboltable.ISymbol> getTopLevelSymbol();
      public boolean checkIfContinueAsSubScope(String symbolName);
      public List<String> getRemainingNameForResolveDown(String symbolName);
      public String getFullName();
      public List<de.monticore.gettingstarted.website._symboltable.PageSymbol> continuePageWithEnclosingScope(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.gettingstarted.website._symboltable.PageSymbol> predicate);
    }
    public class WebsiteScopesGenitorDelegator {
      public WebsiteScopesGenitorDelegator();
      protected Deque<de.monticore.gettingstarted.website._symboltable.IWebsiteScope> scopeStack;
      protected final WebsiteScopesGenitor symbolTable;
      protected de.monticore.gettingstarted.website._symboltable.IWebsiteGlobalScope globalScope;
      protected de.monticore.gettingstarted.website._visitor.WebsiteTraverser traverser;
      public de.monticore.gettingstarted.website._symboltable.IWebsiteArtifactScope createFromAST(de.monticore.gettingstarted.website._ast.ASTWebsite rootNode);
    }
    public class WebsiteArtifactScope extends de.monticore.gettingstarted.website._symboltable.WebsiteScope implements de.monticore.gettingstarted.website._symboltable.IWebsiteArtifactScope {
      public WebsiteArtifactScope(String packageName, List<de.monticore.symboltable.ImportStatement> imports);
      public WebsiteArtifactScope(Optional<de.monticore.gettingstarted.website._symboltable.IWebsiteScope> enclosingScope, String packageName, List<de.monticore.symboltable.ImportStatement> imports);
      public WebsiteArtifactScope();
      protected String packageName;
      public String getPackageName();
      public void setPackageName(String packageName);
      protected List<de.monticore.symboltable.ImportStatement> imports;
      public List<de.monticore.symboltable.ImportStatement> getImportsList();
      public void setImportsList(List<de.monticore.symboltable.ImportStatement> imports);
      public boolean isPresentName();
      public String getName();
      public void setEnclosingScope(de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope);
      public void accept(de.monticore.gettingstarted.website._visitor.WebsiteTraverser visitor);
    }
    public class WebsiteDeSer implements de.monticore.symboltable.serialization.IDeSer<de.monticore.gettingstarted.website._symboltable.IWebsiteScope, de.monticore.gettingstarted.website._symboltable.IWebsiteArtifactScope, de.monticore.gettingstarted.website._symboltable.WebsiteSymbols2Json> {
      public String serialize(de.monticore.gettingstarted.website._symboltable.IWebsiteScope toSerialize, de.monticore.gettingstarted.website._symboltable.WebsiteSymbols2Json s2j);
      public String serialize(de.monticore.gettingstarted.website._symboltable.IWebsiteArtifactScope toSerialize, de.monticore.gettingstarted.website._symboltable.WebsiteSymbols2Json s2j);
      public void serializeAddons(de.monticore.gettingstarted.website._symboltable.IWebsiteScope toSerialize, de.monticore.gettingstarted.website._symboltable.WebsiteSymbols2Json s2j);
      public void serializeAddons(de.monticore.gettingstarted.website._symboltable.IWebsiteArtifactScope toSerialize, de.monticore.gettingstarted.website._symboltable.WebsiteSymbols2Json s2j);
      public de.monticore.gettingstarted.website._symboltable.IWebsiteScope deserializeScope(de.monticore.symboltable.serialization.json.JsonObject scopeJson);
      public de.monticore.gettingstarted.website._symboltable.IWebsiteArtifactScope deserializeArtifactScope(de.monticore.symboltable.serialization.json.JsonObject scopeJson);
      protected void deserializeSymbols(de.monticore.gettingstarted.website._symboltable.IWebsiteScope scope, de.monticore.symboltable.serialization.json.JsonObject scopeJson);
      public void deserializeAddons(de.monticore.gettingstarted.website._symboltable.IWebsiteScope scope, de.monticore.symboltable.serialization.json.JsonObject scopeJson);
      public void deserializeAddons(de.monticore.gettingstarted.website._symboltable.IWebsiteArtifactScope scope, de.monticore.symboltable.serialization.json.JsonObject scopeJson);
    }
    public class WebsiteGlobalScope extends de.monticore.gettingstarted.website._symboltable.WebsiteScope implements de.monticore.gettingstarted.website._symboltable.IWebsiteGlobalScope {
      public WebsiteGlobalScope(de.monticore.io.paths.MCPath symbolPath, String fileExt);
      public WebsiteGlobalScope();
      protected de.monticore.io.paths.MCPath symbolPath;
      public de.monticore.io.paths.MCPath getSymbolPath();
      public void setSymbolPath(de.monticore.io.paths.MCPath symbolPath);
      protected String fileExt;
      public String getFileExt();
      public void setFileExt(String fileExt);
      public de.monticore.symboltable.serialization.IDeSer deSer;
      public de.monticore.symboltable.serialization.IDeSer getDeSer();
      public void setDeSer(de.monticore.symboltable.serialization.IDeSer deSer);
      protected Map<String,de.monticore.symboltable.serialization.ISymbolDeSer> symbolDeSers;
      public Map<String,de.monticore.symboltable.serialization.ISymbolDeSer> getSymbolDeSers();
      public void setSymbolDeSers(Map<String,de.monticore.symboltable.serialization.ISymbolDeSer> symbolDeSers);
      protected WebsiteSymbols2Json symbols2Json;
      public void setSymbols2Json(WebsiteSymbols2Json symbols2Json);
      public WebsiteSymbols2Json getSymbols2Json();
      protected Set<String> cache;
      public void addLoadedFile(String name);
      public void clearLoadedFiles();
      public boolean isFileLoaded(String name);
      public void init();
      protected List<de.monticore.gettingstarted.website._symboltable.IPageSymbolResolver> adaptedPageSymbolResolver;
      public List<de.monticore.gettingstarted.website._symboltable.IPageSymbolResolver> getAdaptedPageSymbolResolverList();
      public void setAdaptedPageSymbolResolverList(List<de.monticore.gettingstarted.website._symboltable.IPageSymbolResolver> adaptedPageSymbolResolver);
      public void loadPage(String name);
      public void loadFileForModelName(String modelName);
      public WebsiteGlobalScope getRealThis();
      public void clear();
      public void putPageSymbolDeSer(String kind);
    }
    public class WebsiteScopesGenitor implements de.monticore.gettingstarted.website._visitor.WebsiteVisitor2, de.monticore.gettingstarted.website._visitor.WebsiteHandler {
      public WebsiteScopesGenitor();
      protected Deque<de.monticore.gettingstarted.website._symboltable.IWebsiteScope> scopeStack;
      protected de.monticore.gettingstarted.website._visitor.WebsiteTraverser traverser;
      public de.monticore.gettingstarted.website._visitor.WebsiteTraverser getTraverser();
      public void setTraverser(de.monticore.gettingstarted.website._visitor.WebsiteTraverser traverser);
      protected de.monticore.gettingstarted.website._symboltable.IWebsiteScope firstCreatedScope;
      public de.monticore.gettingstarted.website._symboltable.IWebsiteScope getFirstCreatedScope();
      public de.monticore.gettingstarted.website._symboltable.IWebsiteArtifactScope createFromAST(de.monticore.gettingstarted.website._ast.ASTWebsite rootNode);
      public void putOnStack(de.monticore.gettingstarted.website._symboltable.IWebsiteScope scope);
      public final Optional<de.monticore.gettingstarted.website._symboltable.IWebsiteScope> getCurrentScope();
      public final Optional<de.monticore.gettingstarted.website._symboltable.IWebsiteScope> removeCurrentScope();
      public void setScopeStack(Deque<? extends de.monticore.gettingstarted.website._symboltable.IWebsiteScope> scopeStack);
      public de.monticore.gettingstarted.website._symboltable.IWebsiteScope createScope(boolean shadowing);
      public void visit(de.monticore.gettingstarted.website._ast.ASTPage node);
      public void endVisit(de.monticore.gettingstarted.website._ast.ASTPage node);
      protected void initPageHP1(de.monticore.gettingstarted.website._symboltable.PageSymbol symbol);
      protected void initPageHP2(de.monticore.gettingstarted.website._symboltable.PageSymbol symbol);
      public void visit(de.monticore.gettingstarted.website._ast.ASTWebsite node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTNavigation node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTNavigationItem node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTPageContent node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTLink node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTPicture node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTParagraph node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTTextBlock node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTCodeBlock node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTAside node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTRow node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTLandImage node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTCard node);
      public void visit(de.monticore.gettingstarted.website._ast.ASTTable node);
      protected void initScopeHP1(de.monticore.gettingstarted.website._symboltable.IWebsiteScope scope);
      protected void initScopeHP2(de.monticore.gettingstarted.website._symboltable.IWebsiteScope scope);
      protected void initArtifactScopeHP1(de.monticore.gettingstarted.website._symboltable.IWebsiteArtifactScope scope);
      protected void initArtifactScopeHP2(de.monticore.gettingstarted.website._symboltable.IWebsiteArtifactScope scope);
      public void addToScopeStack(de.monticore.gettingstarted.website._symboltable.IWebsiteScope scope);
    }
  }

  package de.monticore.gettingstarted.website._ast {
    <<startProd>> public class ASTWebsite extends ASTCNode implements de.monticore.gettingstarted.website._ast.ASTWebsiteNode {
      protected ASTWebsite();
      public boolean deepEquals(Object o);
      public boolean deepEquals(Object o, boolean forceSameOrder);
      public boolean deepEqualsWithComments(Object o);
      public boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public boolean equalAttributes(Object o);
      public boolean equalsWithComments(Object o);
      public ASTWebsite deepClone();
      public ASTWebsite deepClone(ASTWebsite result);
      <<derived_attribute_name="">> protected String name;
      <<derived_attribute_name="", astType="">> protected Optional<de.monticore.gettingstarted.website._ast.ASTNavigation> navigation;
      <<derived_attribute_name="", astType="">> protected java.util.List<de.monticore.gettingstarted.website._ast.ASTPage> pages;
      public String getName();
      public de.monticore.gettingstarted.website._ast.ASTNavigation getNavigation();
      public boolean isPresentNavigation();
      public boolean containsPage(Object element);
      public boolean containsAllPages(Collection<?> collection);
      public boolean isEmptyPages();
      public Iterator<de.monticore.gettingstarted.website._ast.ASTPage> iteratorPages();
      public int sizePages();
      public de.monticore.gettingstarted.website._ast.ASTPage[] toArrayPages(de.monticore.gettingstarted.website._ast.ASTPage[] array);
      public Object[] toArrayPages();
      public Spliterator<de.monticore.gettingstarted.website._ast.ASTPage> spliteratorPages();
      public Stream<de.monticore.gettingstarted.website._ast.ASTPage> streamPages();
      public Stream<de.monticore.gettingstarted.website._ast.ASTPage> parallelStreamPages();
      public de.monticore.gettingstarted.website._ast.ASTPage getPage(int index);
      public int indexOfPage(Object element);
      public int lastIndexOfPage(Object element);
      public boolean equalsPages(Object o);
      public int hashCodePages();
      public ListIterator<de.monticore.gettingstarted.website._ast.ASTPage> listIteratorPages();
      public ListIterator<de.monticore.gettingstarted.website._ast.ASTPage> listIteratorPages(int index);
      public List<de.monticore.gettingstarted.website._ast.ASTPage> subListPages(int start, int end);
      public List<de.monticore.gettingstarted.website._ast.ASTPage> getPageList();
      public void setName(String name);
      public void setNavigation(de.monticore.gettingstarted.website._ast.ASTNavigation navigation);
      public void setNavigationAbsent();
      public void clearPages();
      public boolean addPage(de.monticore.gettingstarted.website._ast.ASTPage element);
      public boolean addAllPages(Collection<? extends de.monticore.gettingstarted.website._ast.ASTPage> collection);
      public boolean removePage(Object element);
      public boolean removeAllPages(Collection<?> collection);
      public boolean retainAllPages(Collection<?> collection);
      public boolean removeIfPage(Predicate<? super de.monticore.gettingstarted.website._ast.ASTPage> filter);
      public void forEachPages(Consumer<? super de.monticore.gettingstarted.website._ast.ASTPage> action);
      public void addPage(int index, de.monticore.gettingstarted.website._ast.ASTPage element);
      public boolean addAllPages(int index, Collection<? extends de.monticore.gettingstarted.website._ast.ASTPage> collection);
      public de.monticore.gettingstarted.website._ast.ASTPage removePage(int index);
      public de.monticore.gettingstarted.website._ast.ASTPage setPage(int index, de.monticore.gettingstarted.website._ast.ASTPage element);
      public void replaceAllPages(UnaryOperator<de.monticore.gettingstarted.website._ast.ASTPage> operator);
      public void sortPages(Comparator<? super de.monticore.gettingstarted.website._ast.ASTPage> comparator);
      public void setPageList(List<de.monticore.gettingstarted.website._ast.ASTPage> pages);
      public void accept(de.monticore.gettingstarted.website._visitor.WebsiteTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
      protected ASTWebsite _construct();
      protected de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope;
      public de.monticore.gettingstarted.website._symboltable.IWebsiteScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
    }
    public class ASTNavigation extends ASTCNode implements de.monticore.gettingstarted.website._ast.ASTWebsiteElement, de.monticore.gettingstarted.website._ast.ASTWebsiteNode {
      protected ASTNavigation();
      public boolean deepEquals(Object o);
      public boolean deepEquals(Object o, boolean forceSameOrder);
      public boolean deepEqualsWithComments(Object o);
      public boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public boolean equalAttributes(Object o);
      public boolean equalsWithComments(Object o);
      public ASTNavigation deepClone();
      public ASTNavigation deepClone(ASTNavigation result);
      <<derived_attribute_name="", astType="">> protected java.util.List<de.monticore.gettingstarted.website._ast.ASTNavigationItem> navigationItems;
      public boolean containsNavigationItem(Object element);
      public boolean containsAllNavigationItems(Collection<?> collection);
      public boolean isEmptyNavigationItems();
      public Iterator<de.monticore.gettingstarted.website._ast.ASTNavigationItem> iteratorNavigationItems();
      public int sizeNavigationItems();
      public de.monticore.gettingstarted.website._ast.ASTNavigationItem[] toArrayNavigationItems(de.monticore.gettingstarted.website._ast.ASTNavigationItem[] array);
      public Object[] toArrayNavigationItems();
      public Spliterator<de.monticore.gettingstarted.website._ast.ASTNavigationItem> spliteratorNavigationItems();
      public Stream<de.monticore.gettingstarted.website._ast.ASTNavigationItem> streamNavigationItems();
      public Stream<de.monticore.gettingstarted.website._ast.ASTNavigationItem> parallelStreamNavigationItems();
      public de.monticore.gettingstarted.website._ast.ASTNavigationItem getNavigationItem(int index);
      public int indexOfNavigationItem(Object element);
      public int lastIndexOfNavigationItem(Object element);
      public boolean equalsNavigationItems(Object o);
      public int hashCodeNavigationItems();
      public ListIterator<de.monticore.gettingstarted.website._ast.ASTNavigationItem> listIteratorNavigationItems();
      public ListIterator<de.monticore.gettingstarted.website._ast.ASTNavigationItem> listIteratorNavigationItems(int index);
      public List<de.monticore.gettingstarted.website._ast.ASTNavigationItem> subListNavigationItems(int start, int end);
      public List<de.monticore.gettingstarted.website._ast.ASTNavigationItem> getNavigationItemList();
      public void clearNavigationItems();
      public boolean addNavigationItem(de.monticore.gettingstarted.website._ast.ASTNavigationItem element);
      public boolean addAllNavigationItems(Collection<? extends de.monticore.gettingstarted.website._ast.ASTNavigationItem> collection);
      public boolean removeNavigationItem(Object element);
      public boolean removeAllNavigationItems(Collection<?> collection);
      public boolean retainAllNavigationItems(Collection<?> collection);
      public boolean removeIfNavigationItem(Predicate<? super de.monticore.gettingstarted.website._ast.ASTNavigationItem> filter);
      public void forEachNavigationItems(Consumer<? super de.monticore.gettingstarted.website._ast.ASTNavigationItem> action);
      public void addNavigationItem(int index, de.monticore.gettingstarted.website._ast.ASTNavigationItem element);
      public boolean addAllNavigationItems(int index, Collection<? extends de.monticore.gettingstarted.website._ast.ASTNavigationItem> collection);
      public de.monticore.gettingstarted.website._ast.ASTNavigationItem removeNavigationItem(int index);
      public de.monticore.gettingstarted.website._ast.ASTNavigationItem setNavigationItem(int index, de.monticore.gettingstarted.website._ast.ASTNavigationItem element);
      public void replaceAllNavigationItems(UnaryOperator<de.monticore.gettingstarted.website._ast.ASTNavigationItem> operator);
      public void sortNavigationItems(Comparator<? super de.monticore.gettingstarted.website._ast.ASTNavigationItem> comparator);
      public void setNavigationItemList(List<de.monticore.gettingstarted.website._ast.ASTNavigationItem> navigationItems);
      public void accept(de.monticore.gettingstarted.website._visitor.WebsiteTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
      protected ASTNavigation _construct();
      protected de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope;
      public de.monticore.gettingstarted.website._symboltable.IWebsiteScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
    }
    public class ASTNavigationItem extends ASTCNode implements de.monticore.gettingstarted.website._ast.ASTWebsiteElement, de.monticore.gettingstarted.website._ast.ASTWebsiteNode {
      protected ASTNavigationItem();
      public boolean deepEquals(Object o);
      public boolean deepEquals(Object o, boolean forceSameOrder);
      public boolean deepEqualsWithComments(Object o);
      public boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public boolean equalAttributes(Object o);
      public boolean equalsWithComments(Object o);
      public ASTNavigationItem deepClone();
      public ASTNavigationItem deepClone(ASTNavigationItem result);
      <<derived_attribute_name="">> protected String name;
      <<astType="">> protected java.util.List<de.monticore.gettingstarted.website._ast.ASTNavigationItem> subItem;
      public String getName();
      public boolean containsSubItem(Object element);
      public boolean containsAllSubItem(Collection<?> collection);
      public boolean isEmptySubItem();
      public Iterator<de.monticore.gettingstarted.website._ast.ASTNavigationItem> iteratorSubItem();
      public int sizeSubItem();
      public de.monticore.gettingstarted.website._ast.ASTNavigationItem[] toArraySubItem(de.monticore.gettingstarted.website._ast.ASTNavigationItem[] array);
      public Object[] toArraySubItem();
      public Spliterator<de.monticore.gettingstarted.website._ast.ASTNavigationItem> spliteratorSubItem();
      public Stream<de.monticore.gettingstarted.website._ast.ASTNavigationItem> streamSubItem();
      public Stream<de.monticore.gettingstarted.website._ast.ASTNavigationItem> parallelStreamSubItem();
      public de.monticore.gettingstarted.website._ast.ASTNavigationItem getSubItem(int index);
      public int indexOfSubItem(Object element);
      public int lastIndexOfSubItem(Object element);
      public boolean equalsSubItem(Object o);
      public int hashCodeSubItem();
      public ListIterator<de.monticore.gettingstarted.website._ast.ASTNavigationItem> listIteratorSubItem();
      public ListIterator<de.monticore.gettingstarted.website._ast.ASTNavigationItem> listIteratorSubItem(int index);
      public List<de.monticore.gettingstarted.website._ast.ASTNavigationItem> subListSubItem(int start, int end);
      public List<de.monticore.gettingstarted.website._ast.ASTNavigationItem> getSubItemList();
      public void setName(String name);
      public void clearSubItem();
      public boolean addSubItem(de.monticore.gettingstarted.website._ast.ASTNavigationItem element);
      public boolean addAllSubItem(Collection<? extends de.monticore.gettingstarted.website._ast.ASTNavigationItem> collection);
      public boolean removeSubItem(Object element);
      public boolean removeAllSubItem(Collection<?> collection);
      public boolean retainAllSubItem(Collection<?> collection);
      public boolean removeIfSubItem(Predicate<? super de.monticore.gettingstarted.website._ast.ASTNavigationItem> filter);
      public void forEachSubItem(Consumer<? super de.monticore.gettingstarted.website._ast.ASTNavigationItem> action);
      public void addSubItem(int index, de.monticore.gettingstarted.website._ast.ASTNavigationItem element);
      public boolean addAllSubItem(int index, Collection<? extends de.monticore.gettingstarted.website._ast.ASTNavigationItem> collection);
      public de.monticore.gettingstarted.website._ast.ASTNavigationItem removeSubItem(int index);
      public de.monticore.gettingstarted.website._ast.ASTNavigationItem setSubItem(int index, de.monticore.gettingstarted.website._ast.ASTNavigationItem element);
      public void replaceAllSubItem(UnaryOperator<de.monticore.gettingstarted.website._ast.ASTNavigationItem> operator);
      public void sortSubItem(Comparator<? super de.monticore.gettingstarted.website._ast.ASTNavigationItem> comparator);
      public void setSubItemList(List<de.monticore.gettingstarted.website._ast.ASTNavigationItem> subItem);
      public void accept(de.monticore.gettingstarted.website._visitor.WebsiteTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
      protected ASTNavigationItem _construct();
      protected de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope;
      public de.monticore.gettingstarted.website._symboltable.IWebsiteScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
    }
    <<symbol>> public class ASTPage extends ASTCNode implements de.monticore.gettingstarted.website._ast.ASTWebsiteElement, de.monticore.gettingstarted.website._ast.ASTWebsiteNode {
      protected ASTPage();
      public boolean deepEquals(Object o);
      public boolean deepEquals(Object o, boolean forceSameOrder);
      public boolean deepEqualsWithComments(Object o);
      public boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public boolean equalAttributes(Object o);
      public boolean equalsWithComments(Object o);
      public ASTPage deepClone();
      public ASTPage deepClone(ASTPage result);
      <<derived_attribute_name="">> protected String name;
      protected Optional<String> title;
      <<derived_attribute_name="", astType="">> protected de.monticore.gettingstarted.website._ast.ASTPageContent pageContent;
      protected boolean start;
      public String getName();
      public String getTitle();
      public boolean isPresentTitle();
      public de.monticore.gettingstarted.website._ast.ASTPageContent getPageContent();
      public boolean isStart();
      public void setName(String name);
      public void setTitle(String title);
      public void setTitleAbsent();
      public void setPageContent(de.monticore.gettingstarted.website._ast.ASTPageContent pageContent);
      public void setStart(boolean start);
      public void accept(de.monticore.gettingstarted.website._visitor.WebsiteTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
      protected ASTPage _construct();
      protected Optional<de.monticore.gettingstarted.website._symboltable.PageSymbol> symbol;
      public de.monticore.gettingstarted.website._symboltable.PageSymbol getSymbol();
      public boolean isPresentSymbol();
      public void setSymbol(de.monticore.gettingstarted.website._symboltable.PageSymbol symbol);
      public void setSymbolAbsent();
      protected de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope;
      public de.monticore.gettingstarted.website._symboltable.IWebsiteScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
    }
    public class ASTPageContent extends ASTCNode implements de.monticore.gettingstarted.website._ast.ASTWebsiteNode {
      protected ASTPageContent();
      public boolean deepEquals(Object o);
      public boolean deepEquals(Object o, boolean forceSameOrder);
      public boolean deepEqualsWithComments(Object o);
      public boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public boolean equalAttributes(Object o);
      public boolean equalsWithComments(Object o);
      public ASTPageContent deepClone();
      public ASTPageContent deepClone(ASTPageContent result);
      <<derived_attribute_name="", astType="">> protected java.util.List<de.monticore.gettingstarted.website._ast.ASTPageContentElement> pageContentElements;
      public boolean containsPageContentElement(Object element);
      public boolean containsAllPageContentElements(Collection<?> collection);
      public boolean isEmptyPageContentElements();
      public Iterator<de.monticore.gettingstarted.website._ast.ASTPageContentElement> iteratorPageContentElements();
      public int sizePageContentElements();
      public de.monticore.gettingstarted.website._ast.ASTPageContentElement[] toArrayPageContentElements(de.monticore.gettingstarted.website._ast.ASTPageContentElement[] array);
      public Object[] toArrayPageContentElements();
      public Spliterator<de.monticore.gettingstarted.website._ast.ASTPageContentElement> spliteratorPageContentElements();
      public Stream<de.monticore.gettingstarted.website._ast.ASTPageContentElement> streamPageContentElements();
      public Stream<de.monticore.gettingstarted.website._ast.ASTPageContentElement> parallelStreamPageContentElements();
      public de.monticore.gettingstarted.website._ast.ASTPageContentElement getPageContentElement(int index);
      public int indexOfPageContentElement(Object element);
      public int lastIndexOfPageContentElement(Object element);
      public boolean equalsPageContentElements(Object o);
      public int hashCodePageContentElements();
      public ListIterator<de.monticore.gettingstarted.website._ast.ASTPageContentElement> listIteratorPageContentElements();
      public ListIterator<de.monticore.gettingstarted.website._ast.ASTPageContentElement> listIteratorPageContentElements(int index);
      public List<de.monticore.gettingstarted.website._ast.ASTPageContentElement> subListPageContentElements(int start, int end);
      public List<de.monticore.gettingstarted.website._ast.ASTPageContentElement> getPageContentElementList();
      public void clearPageContentElements();
      public boolean addPageContentElement(de.monticore.gettingstarted.website._ast.ASTPageContentElement element);
      public boolean addAllPageContentElements(Collection<? extends de.monticore.gettingstarted.website._ast.ASTPageContentElement> collection);
      public boolean removePageContentElement(Object element);
      public boolean removeAllPageContentElements(Collection<?> collection);
      public boolean retainAllPageContentElements(Collection<?> collection);
      public boolean removeIfPageContentElement(Predicate<? super de.monticore.gettingstarted.website._ast.ASTPageContentElement> filter);
      public void forEachPageContentElements(Consumer<? super de.monticore.gettingstarted.website._ast.ASTPageContentElement> action);
      public void addPageContentElement(int index, de.monticore.gettingstarted.website._ast.ASTPageContentElement element);
      public boolean addAllPageContentElements(int index, Collection<? extends de.monticore.gettingstarted.website._ast.ASTPageContentElement> collection);
      public de.monticore.gettingstarted.website._ast.ASTPageContentElement removePageContentElement(int index);
      public de.monticore.gettingstarted.website._ast.ASTPageContentElement setPageContentElement(int index, de.monticore.gettingstarted.website._ast.ASTPageContentElement element);
      public void replaceAllPageContentElements(UnaryOperator<de.monticore.gettingstarted.website._ast.ASTPageContentElement> operator);
      public void sortPageContentElements(Comparator<? super de.monticore.gettingstarted.website._ast.ASTPageContentElement> comparator);
      public void setPageContentElementList(List<de.monticore.gettingstarted.website._ast.ASTPageContentElement> pageContentElements);
      public void accept(de.monticore.gettingstarted.website._visitor.WebsiteTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
      protected ASTPageContent _construct();
      protected de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope;
      public de.monticore.gettingstarted.website._symboltable.IWebsiteScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
    }
    public class ASTLink extends ASTCNode implements de.monticore.gettingstarted.website._ast.ASTPageContentElement, de.monticore.gettingstarted.website._ast.ASTWebsiteNode {
      protected ASTLink();
      public boolean deepEquals(Object o);
      public boolean deepEquals(Object o, boolean forceSameOrder);
      public boolean deepEqualsWithComments(Object o);
      public boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public boolean equalAttributes(Object o);
      public boolean equalsWithComments(Object o);
      public ASTLink deepClone();
      public ASTLink deepClone(ASTLink result);
      <<derived_attribute_name="">> protected String name;
      protected Optional<String> title;
      public String getName();
      public String getTitle();
      public boolean isPresentTitle();
      public void setName(String name);
      public void setTitle(String title);
      public void setTitleAbsent();
      public void accept(de.monticore.gettingstarted.website._visitor.WebsiteTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
      protected ASTLink _construct();
      protected de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope;
      public de.monticore.gettingstarted.website._symboltable.IWebsiteScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
    }
    public class ASTPicture extends ASTCNode implements de.monticore.gettingstarted.website._ast.ASTPageContentElement, de.monticore.gettingstarted.website._ast.ASTWebsiteNode {
      protected ASTPicture();
      public boolean deepEquals(Object o);
      public boolean deepEquals(Object o, boolean forceSameOrder);
      public boolean deepEqualsWithComments(Object o);
      public boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public boolean equalAttributes(Object o);
      public boolean equalsWithComments(Object o);
      public ASTPicture deepClone();
      public ASTPicture deepClone(ASTPicture result);
      <<derived_attribute_name="">> protected String name;
      <<astType="">> protected de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteral width;
      <<astType="">> protected de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteral height;
      public String getName();
      public de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteral getWidth();
      public de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteral getHeight();
      public void setName(String name);
      public void setWidth(de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteral width);
      public void setHeight(de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteral height);
      public void accept(de.monticore.gettingstarted.website._visitor.WebsiteTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
      protected ASTPicture _construct();
      protected de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope;
      public de.monticore.gettingstarted.website._symboltable.IWebsiteScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
    }
    public class ASTParagraph extends ASTCNode implements de.monticore.gettingstarted.website._ast.ASTPageContentElement, de.monticore.gettingstarted.website._ast.ASTWebsiteNode {
      protected ASTParagraph();
      public boolean deepEquals(Object o);
      public boolean deepEquals(Object o, boolean forceSameOrder);
      public boolean deepEqualsWithComments(Object o);
      public boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public boolean equalAttributes(Object o);
      public boolean equalsWithComments(Object o);
      public ASTParagraph deepClone();
      public ASTParagraph deepClone(ASTParagraph result);
      protected String text;
      public String getText();
      public void setText(String text);
      public void accept(de.monticore.gettingstarted.website._visitor.WebsiteTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
      protected ASTParagraph _construct();
      protected de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope;
      public de.monticore.gettingstarted.website._symboltable.IWebsiteScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
    }
    public class ASTTextBlock extends ASTCNode implements de.monticore.gettingstarted.website._ast.ASTPageContentElement, de.monticore.gettingstarted.website._ast.ASTWebsiteNode {
      protected ASTTextBlock();
      public boolean deepEquals(Object o);
      public boolean deepEquals(Object o, boolean forceSameOrder);
      public boolean deepEqualsWithComments(Object o);
      public boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public boolean equalAttributes(Object o);
      public boolean equalsWithComments(Object o);
      public ASTTextBlock deepClone();
      public ASTTextBlock deepClone(ASTTextBlock result);
      protected String title;
      <<derived_attribute_name="", astType="">> protected java.util.List<de.monticore.gettingstarted.website._ast.ASTParagraph> paragraphs;
      public String getTitle();
      public boolean containsParagraph(Object element);
      public boolean containsAllParagraphs(Collection<?> collection);
      public boolean isEmptyParagraphs();
      public Iterator<de.monticore.gettingstarted.website._ast.ASTParagraph> iteratorParagraphs();
      public int sizeParagraphs();
      public de.monticore.gettingstarted.website._ast.ASTParagraph[] toArrayParagraphs(de.monticore.gettingstarted.website._ast.ASTParagraph[] array);
      public Object[] toArrayParagraphs();
      public Spliterator<de.monticore.gettingstarted.website._ast.ASTParagraph> spliteratorParagraphs();
      public Stream<de.monticore.gettingstarted.website._ast.ASTParagraph> streamParagraphs();
      public Stream<de.monticore.gettingstarted.website._ast.ASTParagraph> parallelStreamParagraphs();
      public de.monticore.gettingstarted.website._ast.ASTParagraph getParagraph(int index);
      public int indexOfParagraph(Object element);
      public int lastIndexOfParagraph(Object element);
      public boolean equalsParagraphs(Object o);
      public int hashCodeParagraphs();
      public ListIterator<de.monticore.gettingstarted.website._ast.ASTParagraph> listIteratorParagraphs();
      public ListIterator<de.monticore.gettingstarted.website._ast.ASTParagraph> listIteratorParagraphs(int index);
      public List<de.monticore.gettingstarted.website._ast.ASTParagraph> subListParagraphs(int start, int end);
      public List<de.monticore.gettingstarted.website._ast.ASTParagraph> getParagraphList();
      public void setTitle(String title);
      public void clearParagraphs();
      public boolean addParagraph(de.monticore.gettingstarted.website._ast.ASTParagraph element);
      public boolean addAllParagraphs(Collection<? extends de.monticore.gettingstarted.website._ast.ASTParagraph> collection);
      public boolean removeParagraph(Object element);
      public boolean removeAllParagraphs(Collection<?> collection);
      public boolean retainAllParagraphs(Collection<?> collection);
      public boolean removeIfParagraph(Predicate<? super de.monticore.gettingstarted.website._ast.ASTParagraph> filter);
      public void forEachParagraphs(Consumer<? super de.monticore.gettingstarted.website._ast.ASTParagraph> action);
      public void addParagraph(int index, de.monticore.gettingstarted.website._ast.ASTParagraph element);
      public boolean addAllParagraphs(int index, Collection<? extends de.monticore.gettingstarted.website._ast.ASTParagraph> collection);
      public de.monticore.gettingstarted.website._ast.ASTParagraph removeParagraph(int index);
      public de.monticore.gettingstarted.website._ast.ASTParagraph setParagraph(int index, de.monticore.gettingstarted.website._ast.ASTParagraph element);
      public void replaceAllParagraphs(UnaryOperator<de.monticore.gettingstarted.website._ast.ASTParagraph> operator);
      public void sortParagraphs(Comparator<? super de.monticore.gettingstarted.website._ast.ASTParagraph> comparator);
      public void setParagraphList(List<de.monticore.gettingstarted.website._ast.ASTParagraph> paragraphs);
      public void accept(de.monticore.gettingstarted.website._visitor.WebsiteTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
      protected ASTTextBlock _construct();
      protected de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope;
      public de.monticore.gettingstarted.website._symboltable.IWebsiteScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
    }
    public class ASTCodeBlock extends ASTCNode implements de.monticore.gettingstarted.website._ast.ASTPageContentElement, de.monticore.gettingstarted.website._ast.ASTWebsiteNode {
      protected ASTCodeBlock();
      public boolean deepEquals(Object o);
      public boolean deepEquals(Object o, boolean forceSameOrder);
      public boolean deepEqualsWithComments(Object o);
      public boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public boolean equalAttributes(Object o);
      public boolean equalsWithComments(Object o);
      public ASTCodeBlock deepClone();
      public ASTCodeBlock deepClone(ASTCodeBlock result);
      <<derived_attribute_name="", astType="">> protected java.util.List<de.monticore.gettingstarted.website._ast.ASTParagraph> paragraphs;
      public boolean containsParagraph(Object element);
      public boolean containsAllParagraphs(Collection<?> collection);
      public boolean isEmptyParagraphs();
      public Iterator<de.monticore.gettingstarted.website._ast.ASTParagraph> iteratorParagraphs();
      public int sizeParagraphs();
      public de.monticore.gettingstarted.website._ast.ASTParagraph[] toArrayParagraphs(de.monticore.gettingstarted.website._ast.ASTParagraph[] array);
      public Object[] toArrayParagraphs();
      public Spliterator<de.monticore.gettingstarted.website._ast.ASTParagraph> spliteratorParagraphs();
      public Stream<de.monticore.gettingstarted.website._ast.ASTParagraph> streamParagraphs();
      public Stream<de.monticore.gettingstarted.website._ast.ASTParagraph> parallelStreamParagraphs();
      public de.monticore.gettingstarted.website._ast.ASTParagraph getParagraph(int index);
      public int indexOfParagraph(Object element);
      public int lastIndexOfParagraph(Object element);
      public boolean equalsParagraphs(Object o);
      public int hashCodeParagraphs();
      public ListIterator<de.monticore.gettingstarted.website._ast.ASTParagraph> listIteratorParagraphs();
      public ListIterator<de.monticore.gettingstarted.website._ast.ASTParagraph> listIteratorParagraphs(int index);
      public List<de.monticore.gettingstarted.website._ast.ASTParagraph> subListParagraphs(int start, int end);
      public List<de.monticore.gettingstarted.website._ast.ASTParagraph> getParagraphList();
      public void clearParagraphs();
      public boolean addParagraph(de.monticore.gettingstarted.website._ast.ASTParagraph element);
      public boolean addAllParagraphs(Collection<? extends de.monticore.gettingstarted.website._ast.ASTParagraph> collection);
      public boolean removeParagraph(Object element);
      public boolean removeAllParagraphs(Collection<?> collection);
      public boolean retainAllParagraphs(Collection<?> collection);
      public boolean removeIfParagraph(Predicate<? super de.monticore.gettingstarted.website._ast.ASTParagraph> filter);
      public void forEachParagraphs(Consumer<? super de.monticore.gettingstarted.website._ast.ASTParagraph> action);
      public void addParagraph(int index, de.monticore.gettingstarted.website._ast.ASTParagraph element);
      public boolean addAllParagraphs(int index, Collection<? extends de.monticore.gettingstarted.website._ast.ASTParagraph> collection);
      public de.monticore.gettingstarted.website._ast.ASTParagraph removeParagraph(int index);
      public de.monticore.gettingstarted.website._ast.ASTParagraph setParagraph(int index, de.monticore.gettingstarted.website._ast.ASTParagraph element);
      public void replaceAllParagraphs(UnaryOperator<de.monticore.gettingstarted.website._ast.ASTParagraph> operator);
      public void sortParagraphs(Comparator<? super de.monticore.gettingstarted.website._ast.ASTParagraph> comparator);
      public void setParagraphList(List<de.monticore.gettingstarted.website._ast.ASTParagraph> paragraphs);
      public void accept(de.monticore.gettingstarted.website._visitor.WebsiteTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
      protected ASTCodeBlock _construct();
      protected de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope;
      public de.monticore.gettingstarted.website._symboltable.IWebsiteScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
    }
    public class ASTAside extends ASTCNode implements de.monticore.gettingstarted.website._ast.ASTPageContentElement, de.monticore.gettingstarted.website._ast.ASTWebsiteNode {
      protected ASTAside();
      public boolean deepEquals(Object o);
      public boolean deepEquals(Object o, boolean forceSameOrder);
      public boolean deepEqualsWithComments(Object o);
      public boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public boolean equalAttributes(Object o);
      public boolean equalsWithComments(Object o);
      public ASTAside deepClone();
      public ASTAside deepClone(ASTAside result);
      <<astType="">> protected java.util.List<de.monticore.gettingstarted.website._ast.ASTPageContentElement> subItem;
      public boolean containsSubItem(Object element);
      public boolean containsAllSubItem(Collection<?> collection);
      public boolean isEmptySubItem();
      public Iterator<de.monticore.gettingstarted.website._ast.ASTPageContentElement> iteratorSubItem();
      public int sizeSubItem();
      public de.monticore.gettingstarted.website._ast.ASTPageContentElement[] toArraySubItem(de.monticore.gettingstarted.website._ast.ASTPageContentElement[] array);
      public Object[] toArraySubItem();
      public Spliterator<de.monticore.gettingstarted.website._ast.ASTPageContentElement> spliteratorSubItem();
      public Stream<de.monticore.gettingstarted.website._ast.ASTPageContentElement> streamSubItem();
      public Stream<de.monticore.gettingstarted.website._ast.ASTPageContentElement> parallelStreamSubItem();
      public de.monticore.gettingstarted.website._ast.ASTPageContentElement getSubItem(int index);
      public int indexOfSubItem(Object element);
      public int lastIndexOfSubItem(Object element);
      public boolean equalsSubItem(Object o);
      public int hashCodeSubItem();
      public ListIterator<de.monticore.gettingstarted.website._ast.ASTPageContentElement> listIteratorSubItem();
      public ListIterator<de.monticore.gettingstarted.website._ast.ASTPageContentElement> listIteratorSubItem(int index);
      public List<de.monticore.gettingstarted.website._ast.ASTPageContentElement> subListSubItem(int start, int end);
      public List<de.monticore.gettingstarted.website._ast.ASTPageContentElement> getSubItemList();
      public void clearSubItem();
      public boolean addSubItem(de.monticore.gettingstarted.website._ast.ASTPageContentElement element);
      public boolean addAllSubItem(Collection<? extends de.monticore.gettingstarted.website._ast.ASTPageContentElement> collection);
      public boolean removeSubItem(Object element);
      public boolean removeAllSubItem(Collection<?> collection);
      public boolean retainAllSubItem(Collection<?> collection);
      public boolean removeIfSubItem(Predicate<? super de.monticore.gettingstarted.website._ast.ASTPageContentElement> filter);
      public void forEachSubItem(Consumer<? super de.monticore.gettingstarted.website._ast.ASTPageContentElement> action);
      public void addSubItem(int index, de.monticore.gettingstarted.website._ast.ASTPageContentElement element);
      public boolean addAllSubItem(int index, Collection<? extends de.monticore.gettingstarted.website._ast.ASTPageContentElement> collection);
      public de.monticore.gettingstarted.website._ast.ASTPageContentElement removeSubItem(int index);
      public de.monticore.gettingstarted.website._ast.ASTPageContentElement setSubItem(int index, de.monticore.gettingstarted.website._ast.ASTPageContentElement element);
      public void replaceAllSubItem(UnaryOperator<de.monticore.gettingstarted.website._ast.ASTPageContentElement> operator);
      public void sortSubItem(Comparator<? super de.monticore.gettingstarted.website._ast.ASTPageContentElement> comparator);
      public void setSubItemList(List<de.monticore.gettingstarted.website._ast.ASTPageContentElement> subItem);
      public void accept(de.monticore.gettingstarted.website._visitor.WebsiteTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
      protected ASTAside _construct();
      protected de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope;
      public de.monticore.gettingstarted.website._symboltable.IWebsiteScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
    }
    public class ASTRow extends ASTCNode implements de.monticore.gettingstarted.website._ast.ASTPageContentElement, de.monticore.gettingstarted.website._ast.ASTWebsiteNode {
      protected ASTRow();
      public boolean deepEquals(Object o);
      public boolean deepEquals(Object o, boolean forceSameOrder);
      public boolean deepEqualsWithComments(Object o);
      public boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public boolean equalAttributes(Object o);
      public boolean equalsWithComments(Object o);
      public ASTRow deepClone();
      public ASTRow deepClone(ASTRow result);
      <<derived_attribute_name="", astType="">> protected java.util.List<de.monticore.gettingstarted.website._ast.ASTPageContentElement> pageContentElements;
      public boolean containsPageContentElement(Object element);
      public boolean containsAllPageContentElements(Collection<?> collection);
      public boolean isEmptyPageContentElements();
      public Iterator<de.monticore.gettingstarted.website._ast.ASTPageContentElement> iteratorPageContentElements();
      public int sizePageContentElements();
      public de.monticore.gettingstarted.website._ast.ASTPageContentElement[] toArrayPageContentElements(de.monticore.gettingstarted.website._ast.ASTPageContentElement[] array);
      public Object[] toArrayPageContentElements();
      public Spliterator<de.monticore.gettingstarted.website._ast.ASTPageContentElement> spliteratorPageContentElements();
      public Stream<de.monticore.gettingstarted.website._ast.ASTPageContentElement> streamPageContentElements();
      public Stream<de.monticore.gettingstarted.website._ast.ASTPageContentElement> parallelStreamPageContentElements();
      public de.monticore.gettingstarted.website._ast.ASTPageContentElement getPageContentElement(int index);
      public int indexOfPageContentElement(Object element);
      public int lastIndexOfPageContentElement(Object element);
      public boolean equalsPageContentElements(Object o);
      public int hashCodePageContentElements();
      public ListIterator<de.monticore.gettingstarted.website._ast.ASTPageContentElement> listIteratorPageContentElements();
      public ListIterator<de.monticore.gettingstarted.website._ast.ASTPageContentElement> listIteratorPageContentElements(int index);
      public List<de.monticore.gettingstarted.website._ast.ASTPageContentElement> subListPageContentElements(int start, int end);
      public List<de.monticore.gettingstarted.website._ast.ASTPageContentElement> getPageContentElementList();
      public void clearPageContentElements();
      public boolean addPageContentElement(de.monticore.gettingstarted.website._ast.ASTPageContentElement element);
      public boolean addAllPageContentElements(Collection<? extends de.monticore.gettingstarted.website._ast.ASTPageContentElement> collection);
      public boolean removePageContentElement(Object element);
      public boolean removeAllPageContentElements(Collection<?> collection);
      public boolean retainAllPageContentElements(Collection<?> collection);
      public boolean removeIfPageContentElement(Predicate<? super de.monticore.gettingstarted.website._ast.ASTPageContentElement> filter);
      public void forEachPageContentElements(Consumer<? super de.monticore.gettingstarted.website._ast.ASTPageContentElement> action);
      public void addPageContentElement(int index, de.monticore.gettingstarted.website._ast.ASTPageContentElement element);
      public boolean addAllPageContentElements(int index, Collection<? extends de.monticore.gettingstarted.website._ast.ASTPageContentElement> collection);
      public de.monticore.gettingstarted.website._ast.ASTPageContentElement removePageContentElement(int index);
      public de.monticore.gettingstarted.website._ast.ASTPageContentElement setPageContentElement(int index, de.monticore.gettingstarted.website._ast.ASTPageContentElement element);
      public void replaceAllPageContentElements(UnaryOperator<de.monticore.gettingstarted.website._ast.ASTPageContentElement> operator);
      public void sortPageContentElements(Comparator<? super de.monticore.gettingstarted.website._ast.ASTPageContentElement> comparator);
      public void setPageContentElementList(List<de.monticore.gettingstarted.website._ast.ASTPageContentElement> pageContentElements);
      public void accept(de.monticore.gettingstarted.website._visitor.WebsiteTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
      protected ASTRow _construct();
      protected de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope;
      public de.monticore.gettingstarted.website._symboltable.IWebsiteScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
    }
    public class ASTLandImage extends ASTCNode implements de.monticore.gettingstarted.website._ast.ASTPageContentElement, de.monticore.gettingstarted.website._ast.ASTWebsiteNode {
      protected ASTLandImage();
      public boolean deepEquals(Object o);
      public boolean deepEquals(Object o, boolean forceSameOrder);
      public boolean deepEqualsWithComments(Object o);
      public boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public boolean equalAttributes(Object o);
      public boolean equalsWithComments(Object o);
      public ASTLandImage deepClone();
      public ASTLandImage deepClone(ASTLandImage result);
      protected String title;
      protected String subtitle;
      protected String picture;
      public String getTitle();
      public String getSubtitle();
      public String getPicture();
      public void setTitle(String title);
      public void setSubtitle(String subtitle);
      public void setPicture(String picture);
      public void accept(de.monticore.gettingstarted.website._visitor.WebsiteTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
      protected ASTLandImage _construct();
      protected de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope;
      public de.monticore.gettingstarted.website._symboltable.IWebsiteScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
    }
    public class ASTCard extends ASTCNode implements de.monticore.gettingstarted.website._ast.ASTPageContentElement, de.monticore.gettingstarted.website._ast.ASTWebsiteNode {
      protected ASTCard();
      public boolean deepEquals(Object o);
      public boolean deepEquals(Object o, boolean forceSameOrder);
      public boolean deepEqualsWithComments(Object o);
      public boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public boolean equalAttributes(Object o);
      public boolean equalsWithComments(Object o);
      public ASTCard deepClone();
      public ASTCard deepClone(ASTCard result);
      protected String title;
      protected String picture;
      <<derived_attribute_name="", astType="">> protected de.monticore.gettingstarted.website._ast.ASTParagraph paragraph;
      protected String link;
      public String getTitle();
      public String getPicture();
      public de.monticore.gettingstarted.website._ast.ASTParagraph getParagraph();
      public String getLink();
      public void setTitle(String title);
      public void setPicture(String picture);
      public void setParagraph(de.monticore.gettingstarted.website._ast.ASTParagraph paragraph);
      public void setLink(String link);
      public void accept(de.monticore.gettingstarted.website._visitor.WebsiteTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
      protected ASTCard _construct();
      protected de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope;
      public de.monticore.gettingstarted.website._symboltable.IWebsiteScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
    }
    public class ASTTable extends ASTCNode implements de.monticore.gettingstarted.website._ast.ASTPageContentElement, de.monticore.gettingstarted.website._ast.ASTWebsiteNode {
      protected ASTTable();
      public boolean deepEquals(Object o);
      public boolean deepEquals(Object o, boolean forceSameOrder);
      public boolean deepEqualsWithComments(Object o);
      public boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public boolean equalAttributes(Object o);
      public boolean equalsWithComments(Object o);
      public ASTTable deepClone();
      public ASTTable deepClone(ASTTable result);
      protected String title;
      protected String fileName;
      public String getTitle();
      public String getFileName();
      public void setTitle(String title);
      public void setFileName(String fileName);
      public void accept(de.monticore.gettingstarted.website._visitor.WebsiteTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
      protected ASTTable _construct();
      protected de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope;
      public de.monticore.gettingstarted.website._symboltable.IWebsiteScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
    }
    public class ASTWebsiteBuilder extends de.monticore.ast.ASTNodeBuilder<ASTWebsiteBuilder> {
      protected ASTWebsiteBuilder realBuilder;
      <<derived_attribute_name="">> protected String name;
      <<derived_attribute_name="", astType="">> protected Optional<de.monticore.gettingstarted.website._ast.ASTNavigation> navigation;
      <<derived_attribute_name="", astType="">> protected java.util.List<de.monticore.gettingstarted.website._ast.ASTPage> pages;
      public ASTWebsiteBuilder();
      public ASTWebsite build();
      public boolean isValid();
      public String getName();
      public de.monticore.gettingstarted.website._ast.ASTNavigation getNavigation();
      public boolean isPresentNavigation();
      public boolean containsPage(Object element);
      public boolean containsAllPages(Collection<?> collection);
      public boolean isEmptyPages();
      public Iterator<de.monticore.gettingstarted.website._ast.ASTPage> iteratorPages();
      public int sizePages();
      public de.monticore.gettingstarted.website._ast.ASTPage[] toArrayPages(de.monticore.gettingstarted.website._ast.ASTPage[] array);
      public Object[] toArrayPages();
      public Spliterator<de.monticore.gettingstarted.website._ast.ASTPage> spliteratorPages();
      public Stream<de.monticore.gettingstarted.website._ast.ASTPage> streamPages();
      public Stream<de.monticore.gettingstarted.website._ast.ASTPage> parallelStreamPages();
      public de.monticore.gettingstarted.website._ast.ASTPage getPage(int index);
      public int indexOfPage(Object element);
      public int lastIndexOfPage(Object element);
      public boolean equalsPages(Object o);
      public int hashCodePages();
      public ListIterator<de.monticore.gettingstarted.website._ast.ASTPage> listIteratorPages();
      public ListIterator<de.monticore.gettingstarted.website._ast.ASTPage> listIteratorPages(int index);
      public List<de.monticore.gettingstarted.website._ast.ASTPage> subListPages(int start, int end);
      public List<de.monticore.gettingstarted.website._ast.ASTPage> getPageList();
      public ASTWebsiteBuilder setName(String name);
      public ASTWebsiteBuilder setNavigation(de.monticore.gettingstarted.website._ast.ASTNavigation navigation);
      public ASTWebsiteBuilder setNavigationAbsent();
      public ASTWebsiteBuilder clearPages();
      public ASTWebsiteBuilder addPage(de.monticore.gettingstarted.website._ast.ASTPage element);
      public ASTWebsiteBuilder addAllPages(Collection<? extends de.monticore.gettingstarted.website._ast.ASTPage> collection);
      public ASTWebsiteBuilder removePage(Object element);
      public ASTWebsiteBuilder removeAllPages(Collection<?> collection);
      public ASTWebsiteBuilder retainAllPages(Collection<?> collection);
      public ASTWebsiteBuilder removeIfPage(Predicate<? super de.monticore.gettingstarted.website._ast.ASTPage> filter);
      public ASTWebsiteBuilder forEachPages(Consumer<? super de.monticore.gettingstarted.website._ast.ASTPage> action);
      public ASTWebsiteBuilder addPage(int index, de.monticore.gettingstarted.website._ast.ASTPage element);
      public ASTWebsiteBuilder addAllPages(int index, Collection<? extends de.monticore.gettingstarted.website._ast.ASTPage> collection);
      public ASTWebsiteBuilder removePage(int index);
      public ASTWebsiteBuilder setPage(int index, de.monticore.gettingstarted.website._ast.ASTPage element);
      public ASTWebsiteBuilder replaceAllPages(UnaryOperator<de.monticore.gettingstarted.website._ast.ASTPage> operator);
      public ASTWebsiteBuilder sortPages(Comparator<? super de.monticore.gettingstarted.website._ast.ASTPage> comparator);
      public ASTWebsiteBuilder setPagesList(List<de.monticore.gettingstarted.website._ast.ASTPage> pages);
      public ASTWebsiteBuilder set_SourcePositionEnd(SourcePosition end);
      public ASTWebsiteBuilder set_SourcePositionEndAbsent();
      public ASTWebsiteBuilder set_SourcePositionStart(SourcePosition start);
      public ASTWebsiteBuilder set_SourcePositionStartAbsent();
      public ASTWebsiteBuilder clear_PreComments();
      public ASTWebsiteBuilder add_PreComment(Comment precomment);
      public ASTWebsiteBuilder add_PreComment(int index, Comment precomment);
      public ASTWebsiteBuilder addAll_PreComments(Collection<Comment> precomments);
      public ASTWebsiteBuilder addAll_PreComments(int index, Collection<Comment> precomments);
      public ASTWebsiteBuilder remove_PreComment(Object element);
      public ASTWebsiteBuilder remove_PreComment(int index);
      public ASTWebsiteBuilder removeAll_PreComments(Collection<?> element);
      public ASTWebsiteBuilder retainAll_PreComments(Collection<?> element);
      public ASTWebsiteBuilder removeIf_PreComment(Predicate<? super Comment> filter);
      public ASTWebsiteBuilder forEach_PreComments(Consumer<? super Comment> action);
      public ASTWebsiteBuilder replaceAll_PreComments(UnaryOperator<Comment> operator);
      public ASTWebsiteBuilder sort_PreComments(Comparator<? super Comment> comparator);
      public ASTWebsiteBuilder set_PreCommentList(List<Comment> preComments);
      public ASTWebsiteBuilder set_PreComment(int index, Comment precomment);
      public ASTWebsiteBuilder clear_PostComments();
      public ASTWebsiteBuilder add_PostComment(Comment postcomment);
      public ASTWebsiteBuilder add_PostComment(int index, Comment postcomment);
      public ASTWebsiteBuilder addAll_PostComments(Collection<Comment> postcomments);
      public ASTWebsiteBuilder addAll_PostComments(int index, Collection<Comment> postcomments);
      public ASTWebsiteBuilder remove_PostComment(Object element);
      public ASTWebsiteBuilder remove_PostComment(int index);
      public ASTWebsiteBuilder removeAll_PostComments(Collection<?> element);
      public ASTWebsiteBuilder retainAll_PostComments(Collection<?> element);
      public ASTWebsiteBuilder removeIf_PostComment(Predicate<? super Comment> filter);
      public ASTWebsiteBuilder forEach_PostComments(Consumer<? super Comment> action);
      public ASTWebsiteBuilder replaceAll_PostComments(UnaryOperator<Comment> operator);
      public ASTWebsiteBuilder sort_PostComments(Comparator<? super Comment> comparator);
      public ASTWebsiteBuilder set_PostCommentList(List<Comment> postComments);
      public ASTWebsiteBuilder set_PostComment(int index, Comment postcomment);
      public ASTWebsite uncheckedBuild();
    }
    public class ASTNavigationBuilder extends de.monticore.ast.ASTNodeBuilder<ASTNavigationBuilder> {
      protected ASTNavigationBuilder realBuilder;
      <<derived_attribute_name="", astType="">> protected java.util.List<de.monticore.gettingstarted.website._ast.ASTNavigationItem> navigationItems;
      public ASTNavigationBuilder();
      public ASTNavigation build();
      public boolean isValid();
      public boolean containsNavigationItem(Object element);
      public boolean containsAllNavigationItems(Collection<?> collection);
      public boolean isEmptyNavigationItems();
      public Iterator<de.monticore.gettingstarted.website._ast.ASTNavigationItem> iteratorNavigationItems();
      public int sizeNavigationItems();
      public de.monticore.gettingstarted.website._ast.ASTNavigationItem[] toArrayNavigationItems(de.monticore.gettingstarted.website._ast.ASTNavigationItem[] array);
      public Object[] toArrayNavigationItems();
      public Spliterator<de.monticore.gettingstarted.website._ast.ASTNavigationItem> spliteratorNavigationItems();
      public Stream<de.monticore.gettingstarted.website._ast.ASTNavigationItem> streamNavigationItems();
      public Stream<de.monticore.gettingstarted.website._ast.ASTNavigationItem> parallelStreamNavigationItems();
      public de.monticore.gettingstarted.website._ast.ASTNavigationItem getNavigationItem(int index);
      public int indexOfNavigationItem(Object element);
      public int lastIndexOfNavigationItem(Object element);
      public boolean equalsNavigationItems(Object o);
      public int hashCodeNavigationItems();
      public ListIterator<de.monticore.gettingstarted.website._ast.ASTNavigationItem> listIteratorNavigationItems();
      public ListIterator<de.monticore.gettingstarted.website._ast.ASTNavigationItem> listIteratorNavigationItems(int index);
      public List<de.monticore.gettingstarted.website._ast.ASTNavigationItem> subListNavigationItems(int start, int end);
      public List<de.monticore.gettingstarted.website._ast.ASTNavigationItem> getNavigationItemList();
      public ASTNavigationBuilder clearNavigationItems();
      public ASTNavigationBuilder addNavigationItem(de.monticore.gettingstarted.website._ast.ASTNavigationItem element);
      public ASTNavigationBuilder addAllNavigationItems(Collection<? extends de.monticore.gettingstarted.website._ast.ASTNavigationItem> collection);
      public ASTNavigationBuilder removeNavigationItem(Object element);
      public ASTNavigationBuilder removeAllNavigationItems(Collection<?> collection);
      public ASTNavigationBuilder retainAllNavigationItems(Collection<?> collection);
      public ASTNavigationBuilder removeIfNavigationItem(Predicate<? super de.monticore.gettingstarted.website._ast.ASTNavigationItem> filter);
      public ASTNavigationBuilder forEachNavigationItems(Consumer<? super de.monticore.gettingstarted.website._ast.ASTNavigationItem> action);
      public ASTNavigationBuilder addNavigationItem(int index, de.monticore.gettingstarted.website._ast.ASTNavigationItem element);
      public ASTNavigationBuilder addAllNavigationItems(int index, Collection<? extends de.monticore.gettingstarted.website._ast.ASTNavigationItem> collection);
      public ASTNavigationBuilder removeNavigationItem(int index);
      public ASTNavigationBuilder setNavigationItem(int index, de.monticore.gettingstarted.website._ast.ASTNavigationItem element);
      public ASTNavigationBuilder replaceAllNavigationItems(UnaryOperator<de.monticore.gettingstarted.website._ast.ASTNavigationItem> operator);
      public ASTNavigationBuilder sortNavigationItems(Comparator<? super de.monticore.gettingstarted.website._ast.ASTNavigationItem> comparator);
      public ASTNavigationBuilder setNavigationItemsList(List<de.monticore.gettingstarted.website._ast.ASTNavigationItem> navigationItems);
      public ASTNavigationBuilder set_SourcePositionEnd(SourcePosition end);
      public ASTNavigationBuilder set_SourcePositionEndAbsent();
      public ASTNavigationBuilder set_SourcePositionStart(SourcePosition start);
      public ASTNavigationBuilder set_SourcePositionStartAbsent();
      public ASTNavigationBuilder clear_PreComments();
      public ASTNavigationBuilder add_PreComment(Comment precomment);
      public ASTNavigationBuilder add_PreComment(int index, Comment precomment);
      public ASTNavigationBuilder addAll_PreComments(Collection<Comment> precomments);
      public ASTNavigationBuilder addAll_PreComments(int index, Collection<Comment> precomments);
      public ASTNavigationBuilder remove_PreComment(Object element);
      public ASTNavigationBuilder remove_PreComment(int index);
      public ASTNavigationBuilder removeAll_PreComments(Collection<?> element);
      public ASTNavigationBuilder retainAll_PreComments(Collection<?> element);
      public ASTNavigationBuilder removeIf_PreComment(Predicate<? super Comment> filter);
      public ASTNavigationBuilder forEach_PreComments(Consumer<? super Comment> action);
      public ASTNavigationBuilder replaceAll_PreComments(UnaryOperator<Comment> operator);
      public ASTNavigationBuilder sort_PreComments(Comparator<? super Comment> comparator);
      public ASTNavigationBuilder set_PreCommentList(List<Comment> preComments);
      public ASTNavigationBuilder set_PreComment(int index, Comment precomment);
      public ASTNavigationBuilder clear_PostComments();
      public ASTNavigationBuilder add_PostComment(Comment postcomment);
      public ASTNavigationBuilder add_PostComment(int index, Comment postcomment);
      public ASTNavigationBuilder addAll_PostComments(Collection<Comment> postcomments);
      public ASTNavigationBuilder addAll_PostComments(int index, Collection<Comment> postcomments);
      public ASTNavigationBuilder remove_PostComment(Object element);
      public ASTNavigationBuilder remove_PostComment(int index);
      public ASTNavigationBuilder removeAll_PostComments(Collection<?> element);
      public ASTNavigationBuilder retainAll_PostComments(Collection<?> element);
      public ASTNavigationBuilder removeIf_PostComment(Predicate<? super Comment> filter);
      public ASTNavigationBuilder forEach_PostComments(Consumer<? super Comment> action);
      public ASTNavigationBuilder replaceAll_PostComments(UnaryOperator<Comment> operator);
      public ASTNavigationBuilder sort_PostComments(Comparator<? super Comment> comparator);
      public ASTNavigationBuilder set_PostCommentList(List<Comment> postComments);
      public ASTNavigationBuilder set_PostComment(int index, Comment postcomment);
      public ASTNavigation uncheckedBuild();
    }
    public class ASTNavigationItemBuilder extends de.monticore.ast.ASTNodeBuilder<ASTNavigationItemBuilder> {
      protected ASTNavigationItemBuilder realBuilder;
      <<derived_attribute_name="">> protected String name;
      <<astType="">> protected java.util.List<de.monticore.gettingstarted.website._ast.ASTNavigationItem> subItem;
      public ASTNavigationItemBuilder();
      public ASTNavigationItem build();
      public boolean isValid();
      public String getName();
      public boolean containsSubItem(Object element);
      public boolean containsAllSubItem(Collection<?> collection);
      public boolean isEmptySubItem();
      public Iterator<de.monticore.gettingstarted.website._ast.ASTNavigationItem> iteratorSubItem();
      public int sizeSubItem();
      public de.monticore.gettingstarted.website._ast.ASTNavigationItem[] toArraySubItem(de.monticore.gettingstarted.website._ast.ASTNavigationItem[] array);
      public Object[] toArraySubItem();
      public Spliterator<de.monticore.gettingstarted.website._ast.ASTNavigationItem> spliteratorSubItem();
      public Stream<de.monticore.gettingstarted.website._ast.ASTNavigationItem> streamSubItem();
      public Stream<de.monticore.gettingstarted.website._ast.ASTNavigationItem> parallelStreamSubItem();
      public de.monticore.gettingstarted.website._ast.ASTNavigationItem getSubItem(int index);
      public int indexOfSubItem(Object element);
      public int lastIndexOfSubItem(Object element);
      public boolean equalsSubItem(Object o);
      public int hashCodeSubItem();
      public ListIterator<de.monticore.gettingstarted.website._ast.ASTNavigationItem> listIteratorSubItem();
      public ListIterator<de.monticore.gettingstarted.website._ast.ASTNavigationItem> listIteratorSubItem(int index);
      public List<de.monticore.gettingstarted.website._ast.ASTNavigationItem> subListSubItem(int start, int end);
      public List<de.monticore.gettingstarted.website._ast.ASTNavigationItem> getSubItemList();
      public ASTNavigationItemBuilder setName(String name);
      public ASTNavigationItemBuilder clearSubItem();
      public ASTNavigationItemBuilder addSubItem(de.monticore.gettingstarted.website._ast.ASTNavigationItem element);
      public ASTNavigationItemBuilder addAllSubItem(Collection<? extends de.monticore.gettingstarted.website._ast.ASTNavigationItem> collection);
      public ASTNavigationItemBuilder removeSubItem(Object element);
      public ASTNavigationItemBuilder removeAllSubItem(Collection<?> collection);
      public ASTNavigationItemBuilder retainAllSubItem(Collection<?> collection);
      public ASTNavigationItemBuilder removeIfSubItem(Predicate<? super de.monticore.gettingstarted.website._ast.ASTNavigationItem> filter);
      public ASTNavigationItemBuilder forEachSubItem(Consumer<? super de.monticore.gettingstarted.website._ast.ASTNavigationItem> action);
      public ASTNavigationItemBuilder addSubItem(int index, de.monticore.gettingstarted.website._ast.ASTNavigationItem element);
      public ASTNavigationItemBuilder addAllSubItem(int index, Collection<? extends de.monticore.gettingstarted.website._ast.ASTNavigationItem> collection);
      public ASTNavigationItemBuilder removeSubItem(int index);
      public ASTNavigationItemBuilder setSubItem(int index, de.monticore.gettingstarted.website._ast.ASTNavigationItem element);
      public ASTNavigationItemBuilder replaceAllSubItem(UnaryOperator<de.monticore.gettingstarted.website._ast.ASTNavigationItem> operator);
      public ASTNavigationItemBuilder sortSubItem(Comparator<? super de.monticore.gettingstarted.website._ast.ASTNavigationItem> comparator);
      public ASTNavigationItemBuilder setSubItemList(List<de.monticore.gettingstarted.website._ast.ASTNavigationItem> subItem);
      public ASTNavigationItemBuilder set_SourcePositionEnd(SourcePosition end);
      public ASTNavigationItemBuilder set_SourcePositionEndAbsent();
      public ASTNavigationItemBuilder set_SourcePositionStart(SourcePosition start);
      public ASTNavigationItemBuilder set_SourcePositionStartAbsent();
      public ASTNavigationItemBuilder clear_PreComments();
      public ASTNavigationItemBuilder add_PreComment(Comment precomment);
      public ASTNavigationItemBuilder add_PreComment(int index, Comment precomment);
      public ASTNavigationItemBuilder addAll_PreComments(Collection<Comment> precomments);
      public ASTNavigationItemBuilder addAll_PreComments(int index, Collection<Comment> precomments);
      public ASTNavigationItemBuilder remove_PreComment(Object element);
      public ASTNavigationItemBuilder remove_PreComment(int index);
      public ASTNavigationItemBuilder removeAll_PreComments(Collection<?> element);
      public ASTNavigationItemBuilder retainAll_PreComments(Collection<?> element);
      public ASTNavigationItemBuilder removeIf_PreComment(Predicate<? super Comment> filter);
      public ASTNavigationItemBuilder forEach_PreComments(Consumer<? super Comment> action);
      public ASTNavigationItemBuilder replaceAll_PreComments(UnaryOperator<Comment> operator);
      public ASTNavigationItemBuilder sort_PreComments(Comparator<? super Comment> comparator);
      public ASTNavigationItemBuilder set_PreCommentList(List<Comment> preComments);
      public ASTNavigationItemBuilder set_PreComment(int index, Comment precomment);
      public ASTNavigationItemBuilder clear_PostComments();
      public ASTNavigationItemBuilder add_PostComment(Comment postcomment);
      public ASTNavigationItemBuilder add_PostComment(int index, Comment postcomment);
      public ASTNavigationItemBuilder addAll_PostComments(Collection<Comment> postcomments);
      public ASTNavigationItemBuilder addAll_PostComments(int index, Collection<Comment> postcomments);
      public ASTNavigationItemBuilder remove_PostComment(Object element);
      public ASTNavigationItemBuilder remove_PostComment(int index);
      public ASTNavigationItemBuilder removeAll_PostComments(Collection<?> element);
      public ASTNavigationItemBuilder retainAll_PostComments(Collection<?> element);
      public ASTNavigationItemBuilder removeIf_PostComment(Predicate<? super Comment> filter);
      public ASTNavigationItemBuilder forEach_PostComments(Consumer<? super Comment> action);
      public ASTNavigationItemBuilder replaceAll_PostComments(UnaryOperator<Comment> operator);
      public ASTNavigationItemBuilder sort_PostComments(Comparator<? super Comment> comparator);
      public ASTNavigationItemBuilder set_PostCommentList(List<Comment> postComments);
      public ASTNavigationItemBuilder set_PostComment(int index, Comment postcomment);
      public ASTNavigationItem uncheckedBuild();
    }
    public class ASTPageBuilder extends de.monticore.ast.ASTNodeBuilder<ASTPageBuilder> {
      protected ASTPageBuilder realBuilder;
      <<derived_attribute_name="">> protected String name;
      protected Optional<String> title;
      <<derived_attribute_name="", astType="">> protected de.monticore.gettingstarted.website._ast.ASTPageContent pageContent;
      protected boolean start;
      public ASTPageBuilder();
      public ASTPage build();
      public boolean isValid();
      public String getName();
      public String getTitle();
      public boolean isPresentTitle();
      public de.monticore.gettingstarted.website._ast.ASTPageContent getPageContent();
      public boolean isStart();
      public ASTPageBuilder setName(String name);
      public ASTPageBuilder setTitle(String title);
      public ASTPageBuilder setTitleAbsent();
      public ASTPageBuilder setPageContent(de.monticore.gettingstarted.website._ast.ASTPageContent pageContent);
      public ASTPageBuilder setStart(boolean start);
      public ASTPageBuilder set_SourcePositionEnd(SourcePosition end);
      public ASTPageBuilder set_SourcePositionEndAbsent();
      public ASTPageBuilder set_SourcePositionStart(SourcePosition start);
      public ASTPageBuilder set_SourcePositionStartAbsent();
      public ASTPageBuilder clear_PreComments();
      public ASTPageBuilder add_PreComment(Comment precomment);
      public ASTPageBuilder add_PreComment(int index, Comment precomment);
      public ASTPageBuilder addAll_PreComments(Collection<Comment> precomments);
      public ASTPageBuilder addAll_PreComments(int index, Collection<Comment> precomments);
      public ASTPageBuilder remove_PreComment(Object element);
      public ASTPageBuilder remove_PreComment(int index);
      public ASTPageBuilder removeAll_PreComments(Collection<?> element);
      public ASTPageBuilder retainAll_PreComments(Collection<?> element);
      public ASTPageBuilder removeIf_PreComment(Predicate<? super Comment> filter);
      public ASTPageBuilder forEach_PreComments(Consumer<? super Comment> action);
      public ASTPageBuilder replaceAll_PreComments(UnaryOperator<Comment> operator);
      public ASTPageBuilder sort_PreComments(Comparator<? super Comment> comparator);
      public ASTPageBuilder set_PreCommentList(List<Comment> preComments);
      public ASTPageBuilder set_PreComment(int index, Comment precomment);
      public ASTPageBuilder clear_PostComments();
      public ASTPageBuilder add_PostComment(Comment postcomment);
      public ASTPageBuilder add_PostComment(int index, Comment postcomment);
      public ASTPageBuilder addAll_PostComments(Collection<Comment> postcomments);
      public ASTPageBuilder addAll_PostComments(int index, Collection<Comment> postcomments);
      public ASTPageBuilder remove_PostComment(Object element);
      public ASTPageBuilder remove_PostComment(int index);
      public ASTPageBuilder removeAll_PostComments(Collection<?> element);
      public ASTPageBuilder retainAll_PostComments(Collection<?> element);
      public ASTPageBuilder removeIf_PostComment(Predicate<? super Comment> filter);
      public ASTPageBuilder forEach_PostComments(Consumer<? super Comment> action);
      public ASTPageBuilder replaceAll_PostComments(UnaryOperator<Comment> operator);
      public ASTPageBuilder sort_PostComments(Comparator<? super Comment> comparator);
      public ASTPageBuilder set_PostCommentList(List<Comment> postComments);
      public ASTPageBuilder set_PostComment(int index, Comment postcomment);
      public ASTPage uncheckedBuild();
    }
    public class ASTPageContentBuilder extends de.monticore.ast.ASTNodeBuilder<ASTPageContentBuilder> {
      protected ASTPageContentBuilder realBuilder;
      <<derived_attribute_name="", astType="">> protected java.util.List<de.monticore.gettingstarted.website._ast.ASTPageContentElement> pageContentElements;
      public ASTPageContentBuilder();
      public ASTPageContent build();
      public boolean isValid();
      public boolean containsPageContentElement(Object element);
      public boolean containsAllPageContentElements(Collection<?> collection);
      public boolean isEmptyPageContentElements();
      public Iterator<de.monticore.gettingstarted.website._ast.ASTPageContentElement> iteratorPageContentElements();
      public int sizePageContentElements();
      public de.monticore.gettingstarted.website._ast.ASTPageContentElement[] toArrayPageContentElements(de.monticore.gettingstarted.website._ast.ASTPageContentElement[] array);
      public Object[] toArrayPageContentElements();
      public Spliterator<de.monticore.gettingstarted.website._ast.ASTPageContentElement> spliteratorPageContentElements();
      public Stream<de.monticore.gettingstarted.website._ast.ASTPageContentElement> streamPageContentElements();
      public Stream<de.monticore.gettingstarted.website._ast.ASTPageContentElement> parallelStreamPageContentElements();
      public de.monticore.gettingstarted.website._ast.ASTPageContentElement getPageContentElement(int index);
      public int indexOfPageContentElement(Object element);
      public int lastIndexOfPageContentElement(Object element);
      public boolean equalsPageContentElements(Object o);
      public int hashCodePageContentElements();
      public ListIterator<de.monticore.gettingstarted.website._ast.ASTPageContentElement> listIteratorPageContentElements();
      public ListIterator<de.monticore.gettingstarted.website._ast.ASTPageContentElement> listIteratorPageContentElements(int index);
      public List<de.monticore.gettingstarted.website._ast.ASTPageContentElement> subListPageContentElements(int start, int end);
      public List<de.monticore.gettingstarted.website._ast.ASTPageContentElement> getPageContentElementList();
      public ASTPageContentBuilder clearPageContentElements();
      public ASTPageContentBuilder addPageContentElement(de.monticore.gettingstarted.website._ast.ASTPageContentElement element);
      public ASTPageContentBuilder addAllPageContentElements(Collection<? extends de.monticore.gettingstarted.website._ast.ASTPageContentElement> collection);
      public ASTPageContentBuilder removePageContentElement(Object element);
      public ASTPageContentBuilder removeAllPageContentElements(Collection<?> collection);
      public ASTPageContentBuilder retainAllPageContentElements(Collection<?> collection);
      public ASTPageContentBuilder removeIfPageContentElement(Predicate<? super de.monticore.gettingstarted.website._ast.ASTPageContentElement> filter);
      public ASTPageContentBuilder forEachPageContentElements(Consumer<? super de.monticore.gettingstarted.website._ast.ASTPageContentElement> action);
      public ASTPageContentBuilder addPageContentElement(int index, de.monticore.gettingstarted.website._ast.ASTPageContentElement element);
      public ASTPageContentBuilder addAllPageContentElements(int index, Collection<? extends de.monticore.gettingstarted.website._ast.ASTPageContentElement> collection);
      public ASTPageContentBuilder removePageContentElement(int index);
      public ASTPageContentBuilder setPageContentElement(int index, de.monticore.gettingstarted.website._ast.ASTPageContentElement element);
      public ASTPageContentBuilder replaceAllPageContentElements(UnaryOperator<de.monticore.gettingstarted.website._ast.ASTPageContentElement> operator);
      public ASTPageContentBuilder sortPageContentElements(Comparator<? super de.monticore.gettingstarted.website._ast.ASTPageContentElement> comparator);
      public ASTPageContentBuilder setPageContentElementsList(List<de.monticore.gettingstarted.website._ast.ASTPageContentElement> pageContentElements);
      public ASTPageContentBuilder set_SourcePositionEnd(SourcePosition end);
      public ASTPageContentBuilder set_SourcePositionEndAbsent();
      public ASTPageContentBuilder set_SourcePositionStart(SourcePosition start);
      public ASTPageContentBuilder set_SourcePositionStartAbsent();
      public ASTPageContentBuilder clear_PreComments();
      public ASTPageContentBuilder add_PreComment(Comment precomment);
      public ASTPageContentBuilder add_PreComment(int index, Comment precomment);
      public ASTPageContentBuilder addAll_PreComments(Collection<Comment> precomments);
      public ASTPageContentBuilder addAll_PreComments(int index, Collection<Comment> precomments);
      public ASTPageContentBuilder remove_PreComment(Object element);
      public ASTPageContentBuilder remove_PreComment(int index);
      public ASTPageContentBuilder removeAll_PreComments(Collection<?> element);
      public ASTPageContentBuilder retainAll_PreComments(Collection<?> element);
      public ASTPageContentBuilder removeIf_PreComment(Predicate<? super Comment> filter);
      public ASTPageContentBuilder forEach_PreComments(Consumer<? super Comment> action);
      public ASTPageContentBuilder replaceAll_PreComments(UnaryOperator<Comment> operator);
      public ASTPageContentBuilder sort_PreComments(Comparator<? super Comment> comparator);
      public ASTPageContentBuilder set_PreCommentList(List<Comment> preComments);
      public ASTPageContentBuilder set_PreComment(int index, Comment precomment);
      public ASTPageContentBuilder clear_PostComments();
      public ASTPageContentBuilder add_PostComment(Comment postcomment);
      public ASTPageContentBuilder add_PostComment(int index, Comment postcomment);
      public ASTPageContentBuilder addAll_PostComments(Collection<Comment> postcomments);
      public ASTPageContentBuilder addAll_PostComments(int index, Collection<Comment> postcomments);
      public ASTPageContentBuilder remove_PostComment(Object element);
      public ASTPageContentBuilder remove_PostComment(int index);
      public ASTPageContentBuilder removeAll_PostComments(Collection<?> element);
      public ASTPageContentBuilder retainAll_PostComments(Collection<?> element);
      public ASTPageContentBuilder removeIf_PostComment(Predicate<? super Comment> filter);
      public ASTPageContentBuilder forEach_PostComments(Consumer<? super Comment> action);
      public ASTPageContentBuilder replaceAll_PostComments(UnaryOperator<Comment> operator);
      public ASTPageContentBuilder sort_PostComments(Comparator<? super Comment> comparator);
      public ASTPageContentBuilder set_PostCommentList(List<Comment> postComments);
      public ASTPageContentBuilder set_PostComment(int index, Comment postcomment);
      public ASTPageContent uncheckedBuild();
    }
    public class ASTLinkBuilder extends de.monticore.ast.ASTNodeBuilder<ASTLinkBuilder> {
      protected ASTLinkBuilder realBuilder;
      <<derived_attribute_name="">> protected String name;
      protected Optional<String> title;
      public ASTLinkBuilder();
      public ASTLink build();
      public boolean isValid();
      public String getName();
      public String getTitle();
      public boolean isPresentTitle();
      public ASTLinkBuilder setName(String name);
      public ASTLinkBuilder setTitle(String title);
      public ASTLinkBuilder setTitleAbsent();
      public ASTLinkBuilder set_SourcePositionEnd(SourcePosition end);
      public ASTLinkBuilder set_SourcePositionEndAbsent();
      public ASTLinkBuilder set_SourcePositionStart(SourcePosition start);
      public ASTLinkBuilder set_SourcePositionStartAbsent();
      public ASTLinkBuilder clear_PreComments();
      public ASTLinkBuilder add_PreComment(Comment precomment);
      public ASTLinkBuilder add_PreComment(int index, Comment precomment);
      public ASTLinkBuilder addAll_PreComments(Collection<Comment> precomments);
      public ASTLinkBuilder addAll_PreComments(int index, Collection<Comment> precomments);
      public ASTLinkBuilder remove_PreComment(Object element);
      public ASTLinkBuilder remove_PreComment(int index);
      public ASTLinkBuilder removeAll_PreComments(Collection<?> element);
      public ASTLinkBuilder retainAll_PreComments(Collection<?> element);
      public ASTLinkBuilder removeIf_PreComment(Predicate<? super Comment> filter);
      public ASTLinkBuilder forEach_PreComments(Consumer<? super Comment> action);
      public ASTLinkBuilder replaceAll_PreComments(UnaryOperator<Comment> operator);
      public ASTLinkBuilder sort_PreComments(Comparator<? super Comment> comparator);
      public ASTLinkBuilder set_PreCommentList(List<Comment> preComments);
      public ASTLinkBuilder set_PreComment(int index, Comment precomment);
      public ASTLinkBuilder clear_PostComments();
      public ASTLinkBuilder add_PostComment(Comment postcomment);
      public ASTLinkBuilder add_PostComment(int index, Comment postcomment);
      public ASTLinkBuilder addAll_PostComments(Collection<Comment> postcomments);
      public ASTLinkBuilder addAll_PostComments(int index, Collection<Comment> postcomments);
      public ASTLinkBuilder remove_PostComment(Object element);
      public ASTLinkBuilder remove_PostComment(int index);
      public ASTLinkBuilder removeAll_PostComments(Collection<?> element);
      public ASTLinkBuilder retainAll_PostComments(Collection<?> element);
      public ASTLinkBuilder removeIf_PostComment(Predicate<? super Comment> filter);
      public ASTLinkBuilder forEach_PostComments(Consumer<? super Comment> action);
      public ASTLinkBuilder replaceAll_PostComments(UnaryOperator<Comment> operator);
      public ASTLinkBuilder sort_PostComments(Comparator<? super Comment> comparator);
      public ASTLinkBuilder set_PostCommentList(List<Comment> postComments);
      public ASTLinkBuilder set_PostComment(int index, Comment postcomment);
      public ASTLink uncheckedBuild();
    }
    public class ASTPictureBuilder extends de.monticore.ast.ASTNodeBuilder<ASTPictureBuilder> {
      protected ASTPictureBuilder realBuilder;
      <<derived_attribute_name="">> protected String name;
      <<astType="">> protected de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteral width;
      <<astType="">> protected de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteral height;
      public ASTPictureBuilder();
      public ASTPicture build();
      public boolean isValid();
      public String getName();
      public de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteral getWidth();
      public de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteral getHeight();
      public ASTPictureBuilder setName(String name);
      public ASTPictureBuilder setWidth(de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteral width);
      public ASTPictureBuilder setHeight(de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteral height);
      public ASTPictureBuilder set_SourcePositionEnd(SourcePosition end);
      public ASTPictureBuilder set_SourcePositionEndAbsent();
      public ASTPictureBuilder set_SourcePositionStart(SourcePosition start);
      public ASTPictureBuilder set_SourcePositionStartAbsent();
      public ASTPictureBuilder clear_PreComments();
      public ASTPictureBuilder add_PreComment(Comment precomment);
      public ASTPictureBuilder add_PreComment(int index, Comment precomment);
      public ASTPictureBuilder addAll_PreComments(Collection<Comment> precomments);
      public ASTPictureBuilder addAll_PreComments(int index, Collection<Comment> precomments);
      public ASTPictureBuilder remove_PreComment(Object element);
      public ASTPictureBuilder remove_PreComment(int index);
      public ASTPictureBuilder removeAll_PreComments(Collection<?> element);
      public ASTPictureBuilder retainAll_PreComments(Collection<?> element);
      public ASTPictureBuilder removeIf_PreComment(Predicate<? super Comment> filter);
      public ASTPictureBuilder forEach_PreComments(Consumer<? super Comment> action);
      public ASTPictureBuilder replaceAll_PreComments(UnaryOperator<Comment> operator);
      public ASTPictureBuilder sort_PreComments(Comparator<? super Comment> comparator);
      public ASTPictureBuilder set_PreCommentList(List<Comment> preComments);
      public ASTPictureBuilder set_PreComment(int index, Comment precomment);
      public ASTPictureBuilder clear_PostComments();
      public ASTPictureBuilder add_PostComment(Comment postcomment);
      public ASTPictureBuilder add_PostComment(int index, Comment postcomment);
      public ASTPictureBuilder addAll_PostComments(Collection<Comment> postcomments);
      public ASTPictureBuilder addAll_PostComments(int index, Collection<Comment> postcomments);
      public ASTPictureBuilder remove_PostComment(Object element);
      public ASTPictureBuilder remove_PostComment(int index);
      public ASTPictureBuilder removeAll_PostComments(Collection<?> element);
      public ASTPictureBuilder retainAll_PostComments(Collection<?> element);
      public ASTPictureBuilder removeIf_PostComment(Predicate<? super Comment> filter);
      public ASTPictureBuilder forEach_PostComments(Consumer<? super Comment> action);
      public ASTPictureBuilder replaceAll_PostComments(UnaryOperator<Comment> operator);
      public ASTPictureBuilder sort_PostComments(Comparator<? super Comment> comparator);
      public ASTPictureBuilder set_PostCommentList(List<Comment> postComments);
      public ASTPictureBuilder set_PostComment(int index, Comment postcomment);
      public ASTPicture uncheckedBuild();
    }
    public class ASTParagraphBuilder extends de.monticore.ast.ASTNodeBuilder<ASTParagraphBuilder> {
      protected ASTParagraphBuilder realBuilder;
      protected String text;
      public ASTParagraphBuilder();
      public ASTParagraph build();
      public boolean isValid();
      public String getText();
      public ASTParagraphBuilder setText(String text);
      public ASTParagraphBuilder set_SourcePositionEnd(SourcePosition end);
      public ASTParagraphBuilder set_SourcePositionEndAbsent();
      public ASTParagraphBuilder set_SourcePositionStart(SourcePosition start);
      public ASTParagraphBuilder set_SourcePositionStartAbsent();
      public ASTParagraphBuilder clear_PreComments();
      public ASTParagraphBuilder add_PreComment(Comment precomment);
      public ASTParagraphBuilder add_PreComment(int index, Comment precomment);
      public ASTParagraphBuilder addAll_PreComments(Collection<Comment> precomments);
      public ASTParagraphBuilder addAll_PreComments(int index, Collection<Comment> precomments);
      public ASTParagraphBuilder remove_PreComment(Object element);
      public ASTParagraphBuilder remove_PreComment(int index);
      public ASTParagraphBuilder removeAll_PreComments(Collection<?> element);
      public ASTParagraphBuilder retainAll_PreComments(Collection<?> element);
      public ASTParagraphBuilder removeIf_PreComment(Predicate<? super Comment> filter);
      public ASTParagraphBuilder forEach_PreComments(Consumer<? super Comment> action);
      public ASTParagraphBuilder replaceAll_PreComments(UnaryOperator<Comment> operator);
      public ASTParagraphBuilder sort_PreComments(Comparator<? super Comment> comparator);
      public ASTParagraphBuilder set_PreCommentList(List<Comment> preComments);
      public ASTParagraphBuilder set_PreComment(int index, Comment precomment);
      public ASTParagraphBuilder clear_PostComments();
      public ASTParagraphBuilder add_PostComment(Comment postcomment);
      public ASTParagraphBuilder add_PostComment(int index, Comment postcomment);
      public ASTParagraphBuilder addAll_PostComments(Collection<Comment> postcomments);
      public ASTParagraphBuilder addAll_PostComments(int index, Collection<Comment> postcomments);
      public ASTParagraphBuilder remove_PostComment(Object element);
      public ASTParagraphBuilder remove_PostComment(int index);
      public ASTParagraphBuilder removeAll_PostComments(Collection<?> element);
      public ASTParagraphBuilder retainAll_PostComments(Collection<?> element);
      public ASTParagraphBuilder removeIf_PostComment(Predicate<? super Comment> filter);
      public ASTParagraphBuilder forEach_PostComments(Consumer<? super Comment> action);
      public ASTParagraphBuilder replaceAll_PostComments(UnaryOperator<Comment> operator);
      public ASTParagraphBuilder sort_PostComments(Comparator<? super Comment> comparator);
      public ASTParagraphBuilder set_PostCommentList(List<Comment> postComments);
      public ASTParagraphBuilder set_PostComment(int index, Comment postcomment);
      public ASTParagraph uncheckedBuild();
    }
    public class ASTTextBlockBuilder extends de.monticore.ast.ASTNodeBuilder<ASTTextBlockBuilder> {
      protected ASTTextBlockBuilder realBuilder;
      protected String title;
      <<derived_attribute_name="", astType="">> protected java.util.List<de.monticore.gettingstarted.website._ast.ASTParagraph> paragraphs;
      public ASTTextBlockBuilder();
      public ASTTextBlock build();
      public boolean isValid();
      public String getTitle();
      public boolean containsParagraph(Object element);
      public boolean containsAllParagraphs(Collection<?> collection);
      public boolean isEmptyParagraphs();
      public Iterator<de.monticore.gettingstarted.website._ast.ASTParagraph> iteratorParagraphs();
      public int sizeParagraphs();
      public de.monticore.gettingstarted.website._ast.ASTParagraph[] toArrayParagraphs(de.monticore.gettingstarted.website._ast.ASTParagraph[] array);
      public Object[] toArrayParagraphs();
      public Spliterator<de.monticore.gettingstarted.website._ast.ASTParagraph> spliteratorParagraphs();
      public Stream<de.monticore.gettingstarted.website._ast.ASTParagraph> streamParagraphs();
      public Stream<de.monticore.gettingstarted.website._ast.ASTParagraph> parallelStreamParagraphs();
      public de.monticore.gettingstarted.website._ast.ASTParagraph getParagraph(int index);
      public int indexOfParagraph(Object element);
      public int lastIndexOfParagraph(Object element);
      public boolean equalsParagraphs(Object o);
      public int hashCodeParagraphs();
      public ListIterator<de.monticore.gettingstarted.website._ast.ASTParagraph> listIteratorParagraphs();
      public ListIterator<de.monticore.gettingstarted.website._ast.ASTParagraph> listIteratorParagraphs(int index);
      public List<de.monticore.gettingstarted.website._ast.ASTParagraph> subListParagraphs(int start, int end);
      public List<de.monticore.gettingstarted.website._ast.ASTParagraph> getParagraphList();
      public ASTTextBlockBuilder setTitle(String title);
      public ASTTextBlockBuilder clearParagraphs();
      public ASTTextBlockBuilder addParagraph(de.monticore.gettingstarted.website._ast.ASTParagraph element);
      public ASTTextBlockBuilder addAllParagraphs(Collection<? extends de.monticore.gettingstarted.website._ast.ASTParagraph> collection);
      public ASTTextBlockBuilder removeParagraph(Object element);
      public ASTTextBlockBuilder removeAllParagraphs(Collection<?> collection);
      public ASTTextBlockBuilder retainAllParagraphs(Collection<?> collection);
      public ASTTextBlockBuilder removeIfParagraph(Predicate<? super de.monticore.gettingstarted.website._ast.ASTParagraph> filter);
      public ASTTextBlockBuilder forEachParagraphs(Consumer<? super de.monticore.gettingstarted.website._ast.ASTParagraph> action);
      public ASTTextBlockBuilder addParagraph(int index, de.monticore.gettingstarted.website._ast.ASTParagraph element);
      public ASTTextBlockBuilder addAllParagraphs(int index, Collection<? extends de.monticore.gettingstarted.website._ast.ASTParagraph> collection);
      public ASTTextBlockBuilder removeParagraph(int index);
      public ASTTextBlockBuilder setParagraph(int index, de.monticore.gettingstarted.website._ast.ASTParagraph element);
      public ASTTextBlockBuilder replaceAllParagraphs(UnaryOperator<de.monticore.gettingstarted.website._ast.ASTParagraph> operator);
      public ASTTextBlockBuilder sortParagraphs(Comparator<? super de.monticore.gettingstarted.website._ast.ASTParagraph> comparator);
      public ASTTextBlockBuilder setParagraphsList(List<de.monticore.gettingstarted.website._ast.ASTParagraph> paragraphs);
      public ASTTextBlockBuilder set_SourcePositionEnd(SourcePosition end);
      public ASTTextBlockBuilder set_SourcePositionEndAbsent();
      public ASTTextBlockBuilder set_SourcePositionStart(SourcePosition start);
      public ASTTextBlockBuilder set_SourcePositionStartAbsent();
      public ASTTextBlockBuilder clear_PreComments();
      public ASTTextBlockBuilder add_PreComment(Comment precomment);
      public ASTTextBlockBuilder add_PreComment(int index, Comment precomment);
      public ASTTextBlockBuilder addAll_PreComments(Collection<Comment> precomments);
      public ASTTextBlockBuilder addAll_PreComments(int index, Collection<Comment> precomments);
      public ASTTextBlockBuilder remove_PreComment(Object element);
      public ASTTextBlockBuilder remove_PreComment(int index);
      public ASTTextBlockBuilder removeAll_PreComments(Collection<?> element);
      public ASTTextBlockBuilder retainAll_PreComments(Collection<?> element);
      public ASTTextBlockBuilder removeIf_PreComment(Predicate<? super Comment> filter);
      public ASTTextBlockBuilder forEach_PreComments(Consumer<? super Comment> action);
      public ASTTextBlockBuilder replaceAll_PreComments(UnaryOperator<Comment> operator);
      public ASTTextBlockBuilder sort_PreComments(Comparator<? super Comment> comparator);
      public ASTTextBlockBuilder set_PreCommentList(List<Comment> preComments);
      public ASTTextBlockBuilder set_PreComment(int index, Comment precomment);
      public ASTTextBlockBuilder clear_PostComments();
      public ASTTextBlockBuilder add_PostComment(Comment postcomment);
      public ASTTextBlockBuilder add_PostComment(int index, Comment postcomment);
      public ASTTextBlockBuilder addAll_PostComments(Collection<Comment> postcomments);
      public ASTTextBlockBuilder addAll_PostComments(int index, Collection<Comment> postcomments);
      public ASTTextBlockBuilder remove_PostComment(Object element);
      public ASTTextBlockBuilder remove_PostComment(int index);
      public ASTTextBlockBuilder removeAll_PostComments(Collection<?> element);
      public ASTTextBlockBuilder retainAll_PostComments(Collection<?> element);
      public ASTTextBlockBuilder removeIf_PostComment(Predicate<? super Comment> filter);
      public ASTTextBlockBuilder forEach_PostComments(Consumer<? super Comment> action);
      public ASTTextBlockBuilder replaceAll_PostComments(UnaryOperator<Comment> operator);
      public ASTTextBlockBuilder sort_PostComments(Comparator<? super Comment> comparator);
      public ASTTextBlockBuilder set_PostCommentList(List<Comment> postComments);
      public ASTTextBlockBuilder set_PostComment(int index, Comment postcomment);
      public ASTTextBlock uncheckedBuild();
    }
    public class ASTCodeBlockBuilder extends de.monticore.ast.ASTNodeBuilder<ASTCodeBlockBuilder> {
      protected ASTCodeBlockBuilder realBuilder;
      <<derived_attribute_name="", astType="">> protected java.util.List<de.monticore.gettingstarted.website._ast.ASTParagraph> paragraphs;
      public ASTCodeBlockBuilder();
      public ASTCodeBlock build();
      public boolean isValid();
      public boolean containsParagraph(Object element);
      public boolean containsAllParagraphs(Collection<?> collection);
      public boolean isEmptyParagraphs();
      public Iterator<de.monticore.gettingstarted.website._ast.ASTParagraph> iteratorParagraphs();
      public int sizeParagraphs();
      public de.monticore.gettingstarted.website._ast.ASTParagraph[] toArrayParagraphs(de.monticore.gettingstarted.website._ast.ASTParagraph[] array);
      public Object[] toArrayParagraphs();
      public Spliterator<de.monticore.gettingstarted.website._ast.ASTParagraph> spliteratorParagraphs();
      public Stream<de.monticore.gettingstarted.website._ast.ASTParagraph> streamParagraphs();
      public Stream<de.monticore.gettingstarted.website._ast.ASTParagraph> parallelStreamParagraphs();
      public de.monticore.gettingstarted.website._ast.ASTParagraph getParagraph(int index);
      public int indexOfParagraph(Object element);
      public int lastIndexOfParagraph(Object element);
      public boolean equalsParagraphs(Object o);
      public int hashCodeParagraphs();
      public ListIterator<de.monticore.gettingstarted.website._ast.ASTParagraph> listIteratorParagraphs();
      public ListIterator<de.monticore.gettingstarted.website._ast.ASTParagraph> listIteratorParagraphs(int index);
      public List<de.monticore.gettingstarted.website._ast.ASTParagraph> subListParagraphs(int start, int end);
      public List<de.monticore.gettingstarted.website._ast.ASTParagraph> getParagraphList();
      public ASTCodeBlockBuilder clearParagraphs();
      public ASTCodeBlockBuilder addParagraph(de.monticore.gettingstarted.website._ast.ASTParagraph element);
      public ASTCodeBlockBuilder addAllParagraphs(Collection<? extends de.monticore.gettingstarted.website._ast.ASTParagraph> collection);
      public ASTCodeBlockBuilder removeParagraph(Object element);
      public ASTCodeBlockBuilder removeAllParagraphs(Collection<?> collection);
      public ASTCodeBlockBuilder retainAllParagraphs(Collection<?> collection);
      public ASTCodeBlockBuilder removeIfParagraph(Predicate<? super de.monticore.gettingstarted.website._ast.ASTParagraph> filter);
      public ASTCodeBlockBuilder forEachParagraphs(Consumer<? super de.monticore.gettingstarted.website._ast.ASTParagraph> action);
      public ASTCodeBlockBuilder addParagraph(int index, de.monticore.gettingstarted.website._ast.ASTParagraph element);
      public ASTCodeBlockBuilder addAllParagraphs(int index, Collection<? extends de.monticore.gettingstarted.website._ast.ASTParagraph> collection);
      public ASTCodeBlockBuilder removeParagraph(int index);
      public ASTCodeBlockBuilder setParagraph(int index, de.monticore.gettingstarted.website._ast.ASTParagraph element);
      public ASTCodeBlockBuilder replaceAllParagraphs(UnaryOperator<de.monticore.gettingstarted.website._ast.ASTParagraph> operator);
      public ASTCodeBlockBuilder sortParagraphs(Comparator<? super de.monticore.gettingstarted.website._ast.ASTParagraph> comparator);
      public ASTCodeBlockBuilder setParagraphsList(List<de.monticore.gettingstarted.website._ast.ASTParagraph> paragraphs);
      public ASTCodeBlockBuilder set_SourcePositionEnd(SourcePosition end);
      public ASTCodeBlockBuilder set_SourcePositionEndAbsent();
      public ASTCodeBlockBuilder set_SourcePositionStart(SourcePosition start);
      public ASTCodeBlockBuilder set_SourcePositionStartAbsent();
      public ASTCodeBlockBuilder clear_PreComments();
      public ASTCodeBlockBuilder add_PreComment(Comment precomment);
      public ASTCodeBlockBuilder add_PreComment(int index, Comment precomment);
      public ASTCodeBlockBuilder addAll_PreComments(Collection<Comment> precomments);
      public ASTCodeBlockBuilder addAll_PreComments(int index, Collection<Comment> precomments);
      public ASTCodeBlockBuilder remove_PreComment(Object element);
      public ASTCodeBlockBuilder remove_PreComment(int index);
      public ASTCodeBlockBuilder removeAll_PreComments(Collection<?> element);
      public ASTCodeBlockBuilder retainAll_PreComments(Collection<?> element);
      public ASTCodeBlockBuilder removeIf_PreComment(Predicate<? super Comment> filter);
      public ASTCodeBlockBuilder forEach_PreComments(Consumer<? super Comment> action);
      public ASTCodeBlockBuilder replaceAll_PreComments(UnaryOperator<Comment> operator);
      public ASTCodeBlockBuilder sort_PreComments(Comparator<? super Comment> comparator);
      public ASTCodeBlockBuilder set_PreCommentList(List<Comment> preComments);
      public ASTCodeBlockBuilder set_PreComment(int index, Comment precomment);
      public ASTCodeBlockBuilder clear_PostComments();
      public ASTCodeBlockBuilder add_PostComment(Comment postcomment);
      public ASTCodeBlockBuilder add_PostComment(int index, Comment postcomment);
      public ASTCodeBlockBuilder addAll_PostComments(Collection<Comment> postcomments);
      public ASTCodeBlockBuilder addAll_PostComments(int index, Collection<Comment> postcomments);
      public ASTCodeBlockBuilder remove_PostComment(Object element);
      public ASTCodeBlockBuilder remove_PostComment(int index);
      public ASTCodeBlockBuilder removeAll_PostComments(Collection<?> element);
      public ASTCodeBlockBuilder retainAll_PostComments(Collection<?> element);
      public ASTCodeBlockBuilder removeIf_PostComment(Predicate<? super Comment> filter);
      public ASTCodeBlockBuilder forEach_PostComments(Consumer<? super Comment> action);
      public ASTCodeBlockBuilder replaceAll_PostComments(UnaryOperator<Comment> operator);
      public ASTCodeBlockBuilder sort_PostComments(Comparator<? super Comment> comparator);
      public ASTCodeBlockBuilder set_PostCommentList(List<Comment> postComments);
      public ASTCodeBlockBuilder set_PostComment(int index, Comment postcomment);
      public ASTCodeBlock uncheckedBuild();
    }
    public class ASTAsideBuilder extends de.monticore.ast.ASTNodeBuilder<ASTAsideBuilder> {
      protected ASTAsideBuilder realBuilder;
      <<astType="">> protected java.util.List<de.monticore.gettingstarted.website._ast.ASTPageContentElement> subItem;
      public ASTAsideBuilder();
      public ASTAside build();
      public boolean isValid();
      public boolean containsSubItem(Object element);
      public boolean containsAllSubItem(Collection<?> collection);
      public boolean isEmptySubItem();
      public Iterator<de.monticore.gettingstarted.website._ast.ASTPageContentElement> iteratorSubItem();
      public int sizeSubItem();
      public de.monticore.gettingstarted.website._ast.ASTPageContentElement[] toArraySubItem(de.monticore.gettingstarted.website._ast.ASTPageContentElement[] array);
      public Object[] toArraySubItem();
      public Spliterator<de.monticore.gettingstarted.website._ast.ASTPageContentElement> spliteratorSubItem();
      public Stream<de.monticore.gettingstarted.website._ast.ASTPageContentElement> streamSubItem();
      public Stream<de.monticore.gettingstarted.website._ast.ASTPageContentElement> parallelStreamSubItem();
      public de.monticore.gettingstarted.website._ast.ASTPageContentElement getSubItem(int index);
      public int indexOfSubItem(Object element);
      public int lastIndexOfSubItem(Object element);
      public boolean equalsSubItem(Object o);
      public int hashCodeSubItem();
      public ListIterator<de.monticore.gettingstarted.website._ast.ASTPageContentElement> listIteratorSubItem();
      public ListIterator<de.monticore.gettingstarted.website._ast.ASTPageContentElement> listIteratorSubItem(int index);
      public List<de.monticore.gettingstarted.website._ast.ASTPageContentElement> subListSubItem(int start, int end);
      public List<de.monticore.gettingstarted.website._ast.ASTPageContentElement> getSubItemList();
      public ASTAsideBuilder clearSubItem();
      public ASTAsideBuilder addSubItem(de.monticore.gettingstarted.website._ast.ASTPageContentElement element);
      public ASTAsideBuilder addAllSubItem(Collection<? extends de.monticore.gettingstarted.website._ast.ASTPageContentElement> collection);
      public ASTAsideBuilder removeSubItem(Object element);
      public ASTAsideBuilder removeAllSubItem(Collection<?> collection);
      public ASTAsideBuilder retainAllSubItem(Collection<?> collection);
      public ASTAsideBuilder removeIfSubItem(Predicate<? super de.monticore.gettingstarted.website._ast.ASTPageContentElement> filter);
      public ASTAsideBuilder forEachSubItem(Consumer<? super de.monticore.gettingstarted.website._ast.ASTPageContentElement> action);
      public ASTAsideBuilder addSubItem(int index, de.monticore.gettingstarted.website._ast.ASTPageContentElement element);
      public ASTAsideBuilder addAllSubItem(int index, Collection<? extends de.monticore.gettingstarted.website._ast.ASTPageContentElement> collection);
      public ASTAsideBuilder removeSubItem(int index);
      public ASTAsideBuilder setSubItem(int index, de.monticore.gettingstarted.website._ast.ASTPageContentElement element);
      public ASTAsideBuilder replaceAllSubItem(UnaryOperator<de.monticore.gettingstarted.website._ast.ASTPageContentElement> operator);
      public ASTAsideBuilder sortSubItem(Comparator<? super de.monticore.gettingstarted.website._ast.ASTPageContentElement> comparator);
      public ASTAsideBuilder setSubItemList(List<de.monticore.gettingstarted.website._ast.ASTPageContentElement> subItem);
      public ASTAsideBuilder set_SourcePositionEnd(SourcePosition end);
      public ASTAsideBuilder set_SourcePositionEndAbsent();
      public ASTAsideBuilder set_SourcePositionStart(SourcePosition start);
      public ASTAsideBuilder set_SourcePositionStartAbsent();
      public ASTAsideBuilder clear_PreComments();
      public ASTAsideBuilder add_PreComment(Comment precomment);
      public ASTAsideBuilder add_PreComment(int index, Comment precomment);
      public ASTAsideBuilder addAll_PreComments(Collection<Comment> precomments);
      public ASTAsideBuilder addAll_PreComments(int index, Collection<Comment> precomments);
      public ASTAsideBuilder remove_PreComment(Object element);
      public ASTAsideBuilder remove_PreComment(int index);
      public ASTAsideBuilder removeAll_PreComments(Collection<?> element);
      public ASTAsideBuilder retainAll_PreComments(Collection<?> element);
      public ASTAsideBuilder removeIf_PreComment(Predicate<? super Comment> filter);
      public ASTAsideBuilder forEach_PreComments(Consumer<? super Comment> action);
      public ASTAsideBuilder replaceAll_PreComments(UnaryOperator<Comment> operator);
      public ASTAsideBuilder sort_PreComments(Comparator<? super Comment> comparator);
      public ASTAsideBuilder set_PreCommentList(List<Comment> preComments);
      public ASTAsideBuilder set_PreComment(int index, Comment precomment);
      public ASTAsideBuilder clear_PostComments();
      public ASTAsideBuilder add_PostComment(Comment postcomment);
      public ASTAsideBuilder add_PostComment(int index, Comment postcomment);
      public ASTAsideBuilder addAll_PostComments(Collection<Comment> postcomments);
      public ASTAsideBuilder addAll_PostComments(int index, Collection<Comment> postcomments);
      public ASTAsideBuilder remove_PostComment(Object element);
      public ASTAsideBuilder remove_PostComment(int index);
      public ASTAsideBuilder removeAll_PostComments(Collection<?> element);
      public ASTAsideBuilder retainAll_PostComments(Collection<?> element);
      public ASTAsideBuilder removeIf_PostComment(Predicate<? super Comment> filter);
      public ASTAsideBuilder forEach_PostComments(Consumer<? super Comment> action);
      public ASTAsideBuilder replaceAll_PostComments(UnaryOperator<Comment> operator);
      public ASTAsideBuilder sort_PostComments(Comparator<? super Comment> comparator);
      public ASTAsideBuilder set_PostCommentList(List<Comment> postComments);
      public ASTAsideBuilder set_PostComment(int index, Comment postcomment);
      public ASTAside uncheckedBuild();
    }
    public class ASTRowBuilder extends de.monticore.ast.ASTNodeBuilder<ASTRowBuilder> {
      protected ASTRowBuilder realBuilder;
      <<derived_attribute_name="", astType="">> protected java.util.List<de.monticore.gettingstarted.website._ast.ASTPageContentElement> pageContentElements;
      public ASTRowBuilder();
      public ASTRow build();
      public boolean isValid();
      public boolean containsPageContentElement(Object element);
      public boolean containsAllPageContentElements(Collection<?> collection);
      public boolean isEmptyPageContentElements();
      public Iterator<de.monticore.gettingstarted.website._ast.ASTPageContentElement> iteratorPageContentElements();
      public int sizePageContentElements();
      public de.monticore.gettingstarted.website._ast.ASTPageContentElement[] toArrayPageContentElements(de.monticore.gettingstarted.website._ast.ASTPageContentElement[] array);
      public Object[] toArrayPageContentElements();
      public Spliterator<de.monticore.gettingstarted.website._ast.ASTPageContentElement> spliteratorPageContentElements();
      public Stream<de.monticore.gettingstarted.website._ast.ASTPageContentElement> streamPageContentElements();
      public Stream<de.monticore.gettingstarted.website._ast.ASTPageContentElement> parallelStreamPageContentElements();
      public de.monticore.gettingstarted.website._ast.ASTPageContentElement getPageContentElement(int index);
      public int indexOfPageContentElement(Object element);
      public int lastIndexOfPageContentElement(Object element);
      public boolean equalsPageContentElements(Object o);
      public int hashCodePageContentElements();
      public ListIterator<de.monticore.gettingstarted.website._ast.ASTPageContentElement> listIteratorPageContentElements();
      public ListIterator<de.monticore.gettingstarted.website._ast.ASTPageContentElement> listIteratorPageContentElements(int index);
      public List<de.monticore.gettingstarted.website._ast.ASTPageContentElement> subListPageContentElements(int start, int end);
      public List<de.monticore.gettingstarted.website._ast.ASTPageContentElement> getPageContentElementList();
      public ASTRowBuilder clearPageContentElements();
      public ASTRowBuilder addPageContentElement(de.monticore.gettingstarted.website._ast.ASTPageContentElement element);
      public ASTRowBuilder addAllPageContentElements(Collection<? extends de.monticore.gettingstarted.website._ast.ASTPageContentElement> collection);
      public ASTRowBuilder removePageContentElement(Object element);
      public ASTRowBuilder removeAllPageContentElements(Collection<?> collection);
      public ASTRowBuilder retainAllPageContentElements(Collection<?> collection);
      public ASTRowBuilder removeIfPageContentElement(Predicate<? super de.monticore.gettingstarted.website._ast.ASTPageContentElement> filter);
      public ASTRowBuilder forEachPageContentElements(Consumer<? super de.monticore.gettingstarted.website._ast.ASTPageContentElement> action);
      public ASTRowBuilder addPageContentElement(int index, de.monticore.gettingstarted.website._ast.ASTPageContentElement element);
      public ASTRowBuilder addAllPageContentElements(int index, Collection<? extends de.monticore.gettingstarted.website._ast.ASTPageContentElement> collection);
      public ASTRowBuilder removePageContentElement(int index);
      public ASTRowBuilder setPageContentElement(int index, de.monticore.gettingstarted.website._ast.ASTPageContentElement element);
      public ASTRowBuilder replaceAllPageContentElements(UnaryOperator<de.monticore.gettingstarted.website._ast.ASTPageContentElement> operator);
      public ASTRowBuilder sortPageContentElements(Comparator<? super de.monticore.gettingstarted.website._ast.ASTPageContentElement> comparator);
      public ASTRowBuilder setPageContentElementsList(List<de.monticore.gettingstarted.website._ast.ASTPageContentElement> pageContentElements);
      public ASTRowBuilder set_SourcePositionEnd(SourcePosition end);
      public ASTRowBuilder set_SourcePositionEndAbsent();
      public ASTRowBuilder set_SourcePositionStart(SourcePosition start);
      public ASTRowBuilder set_SourcePositionStartAbsent();
      public ASTRowBuilder clear_PreComments();
      public ASTRowBuilder add_PreComment(Comment precomment);
      public ASTRowBuilder add_PreComment(int index, Comment precomment);
      public ASTRowBuilder addAll_PreComments(Collection<Comment> precomments);
      public ASTRowBuilder addAll_PreComments(int index, Collection<Comment> precomments);
      public ASTRowBuilder remove_PreComment(Object element);
      public ASTRowBuilder remove_PreComment(int index);
      public ASTRowBuilder removeAll_PreComments(Collection<?> element);
      public ASTRowBuilder retainAll_PreComments(Collection<?> element);
      public ASTRowBuilder removeIf_PreComment(Predicate<? super Comment> filter);
      public ASTRowBuilder forEach_PreComments(Consumer<? super Comment> action);
      public ASTRowBuilder replaceAll_PreComments(UnaryOperator<Comment> operator);
      public ASTRowBuilder sort_PreComments(Comparator<? super Comment> comparator);
      public ASTRowBuilder set_PreCommentList(List<Comment> preComments);
      public ASTRowBuilder set_PreComment(int index, Comment precomment);
      public ASTRowBuilder clear_PostComments();
      public ASTRowBuilder add_PostComment(Comment postcomment);
      public ASTRowBuilder add_PostComment(int index, Comment postcomment);
      public ASTRowBuilder addAll_PostComments(Collection<Comment> postcomments);
      public ASTRowBuilder addAll_PostComments(int index, Collection<Comment> postcomments);
      public ASTRowBuilder remove_PostComment(Object element);
      public ASTRowBuilder remove_PostComment(int index);
      public ASTRowBuilder removeAll_PostComments(Collection<?> element);
      public ASTRowBuilder retainAll_PostComments(Collection<?> element);
      public ASTRowBuilder removeIf_PostComment(Predicate<? super Comment> filter);
      public ASTRowBuilder forEach_PostComments(Consumer<? super Comment> action);
      public ASTRowBuilder replaceAll_PostComments(UnaryOperator<Comment> operator);
      public ASTRowBuilder sort_PostComments(Comparator<? super Comment> comparator);
      public ASTRowBuilder set_PostCommentList(List<Comment> postComments);
      public ASTRowBuilder set_PostComment(int index, Comment postcomment);
      public ASTRow uncheckedBuild();
    }
    public class ASTLandImageBuilder extends de.monticore.ast.ASTNodeBuilder<ASTLandImageBuilder> {
      protected ASTLandImageBuilder realBuilder;
      protected String title;
      protected String subtitle;
      protected String picture;
      public ASTLandImageBuilder();
      public ASTLandImage build();
      public boolean isValid();
      public String getTitle();
      public String getSubtitle();
      public String getPicture();
      public ASTLandImageBuilder setTitle(String title);
      public ASTLandImageBuilder setSubtitle(String subtitle);
      public ASTLandImageBuilder setPicture(String picture);
      public ASTLandImageBuilder set_SourcePositionEnd(SourcePosition end);
      public ASTLandImageBuilder set_SourcePositionEndAbsent();
      public ASTLandImageBuilder set_SourcePositionStart(SourcePosition start);
      public ASTLandImageBuilder set_SourcePositionStartAbsent();
      public ASTLandImageBuilder clear_PreComments();
      public ASTLandImageBuilder add_PreComment(Comment precomment);
      public ASTLandImageBuilder add_PreComment(int index, Comment precomment);
      public ASTLandImageBuilder addAll_PreComments(Collection<Comment> precomments);
      public ASTLandImageBuilder addAll_PreComments(int index, Collection<Comment> precomments);
      public ASTLandImageBuilder remove_PreComment(Object element);
      public ASTLandImageBuilder remove_PreComment(int index);
      public ASTLandImageBuilder removeAll_PreComments(Collection<?> element);
      public ASTLandImageBuilder retainAll_PreComments(Collection<?> element);
      public ASTLandImageBuilder removeIf_PreComment(Predicate<? super Comment> filter);
      public ASTLandImageBuilder forEach_PreComments(Consumer<? super Comment> action);
      public ASTLandImageBuilder replaceAll_PreComments(UnaryOperator<Comment> operator);
      public ASTLandImageBuilder sort_PreComments(Comparator<? super Comment> comparator);
      public ASTLandImageBuilder set_PreCommentList(List<Comment> preComments);
      public ASTLandImageBuilder set_PreComment(int index, Comment precomment);
      public ASTLandImageBuilder clear_PostComments();
      public ASTLandImageBuilder add_PostComment(Comment postcomment);
      public ASTLandImageBuilder add_PostComment(int index, Comment postcomment);
      public ASTLandImageBuilder addAll_PostComments(Collection<Comment> postcomments);
      public ASTLandImageBuilder addAll_PostComments(int index, Collection<Comment> postcomments);
      public ASTLandImageBuilder remove_PostComment(Object element);
      public ASTLandImageBuilder remove_PostComment(int index);
      public ASTLandImageBuilder removeAll_PostComments(Collection<?> element);
      public ASTLandImageBuilder retainAll_PostComments(Collection<?> element);
      public ASTLandImageBuilder removeIf_PostComment(Predicate<? super Comment> filter);
      public ASTLandImageBuilder forEach_PostComments(Consumer<? super Comment> action);
      public ASTLandImageBuilder replaceAll_PostComments(UnaryOperator<Comment> operator);
      public ASTLandImageBuilder sort_PostComments(Comparator<? super Comment> comparator);
      public ASTLandImageBuilder set_PostCommentList(List<Comment> postComments);
      public ASTLandImageBuilder set_PostComment(int index, Comment postcomment);
      public ASTLandImage uncheckedBuild();
    }
    public class ASTCardBuilder extends de.monticore.ast.ASTNodeBuilder<ASTCardBuilder> {
      protected ASTCardBuilder realBuilder;
      protected String title;
      protected String picture;
      <<derived_attribute_name="", astType="">> protected de.monticore.gettingstarted.website._ast.ASTParagraph paragraph;
      protected String link;
      public ASTCardBuilder();
      public ASTCard build();
      public boolean isValid();
      public String getTitle();
      public String getPicture();
      public de.monticore.gettingstarted.website._ast.ASTParagraph getParagraph();
      public String getLink();
      public ASTCardBuilder setTitle(String title);
      public ASTCardBuilder setPicture(String picture);
      public ASTCardBuilder setParagraph(de.monticore.gettingstarted.website._ast.ASTParagraph paragraph);
      public ASTCardBuilder setLink(String link);
      public ASTCardBuilder set_SourcePositionEnd(SourcePosition end);
      public ASTCardBuilder set_SourcePositionEndAbsent();
      public ASTCardBuilder set_SourcePositionStart(SourcePosition start);
      public ASTCardBuilder set_SourcePositionStartAbsent();
      public ASTCardBuilder clear_PreComments();
      public ASTCardBuilder add_PreComment(Comment precomment);
      public ASTCardBuilder add_PreComment(int index, Comment precomment);
      public ASTCardBuilder addAll_PreComments(Collection<Comment> precomments);
      public ASTCardBuilder addAll_PreComments(int index, Collection<Comment> precomments);
      public ASTCardBuilder remove_PreComment(Object element);
      public ASTCardBuilder remove_PreComment(int index);
      public ASTCardBuilder removeAll_PreComments(Collection<?> element);
      public ASTCardBuilder retainAll_PreComments(Collection<?> element);
      public ASTCardBuilder removeIf_PreComment(Predicate<? super Comment> filter);
      public ASTCardBuilder forEach_PreComments(Consumer<? super Comment> action);
      public ASTCardBuilder replaceAll_PreComments(UnaryOperator<Comment> operator);
      public ASTCardBuilder sort_PreComments(Comparator<? super Comment> comparator);
      public ASTCardBuilder set_PreCommentList(List<Comment> preComments);
      public ASTCardBuilder set_PreComment(int index, Comment precomment);
      public ASTCardBuilder clear_PostComments();
      public ASTCardBuilder add_PostComment(Comment postcomment);
      public ASTCardBuilder add_PostComment(int index, Comment postcomment);
      public ASTCardBuilder addAll_PostComments(Collection<Comment> postcomments);
      public ASTCardBuilder addAll_PostComments(int index, Collection<Comment> postcomments);
      public ASTCardBuilder remove_PostComment(Object element);
      public ASTCardBuilder remove_PostComment(int index);
      public ASTCardBuilder removeAll_PostComments(Collection<?> element);
      public ASTCardBuilder retainAll_PostComments(Collection<?> element);
      public ASTCardBuilder removeIf_PostComment(Predicate<? super Comment> filter);
      public ASTCardBuilder forEach_PostComments(Consumer<? super Comment> action);
      public ASTCardBuilder replaceAll_PostComments(UnaryOperator<Comment> operator);
      public ASTCardBuilder sort_PostComments(Comparator<? super Comment> comparator);
      public ASTCardBuilder set_PostCommentList(List<Comment> postComments);
      public ASTCardBuilder set_PostComment(int index, Comment postcomment);
      public ASTCard uncheckedBuild();
    }
    public class ASTTableBuilder extends de.monticore.ast.ASTNodeBuilder<ASTTableBuilder> {
      protected ASTTableBuilder realBuilder;
      protected String title;
      protected String fileName;
      public ASTTableBuilder();
      public ASTTable build();
      public boolean isValid();
      public String getTitle();
      public String getFileName();
      public ASTTableBuilder setTitle(String title);
      public ASTTableBuilder setFileName(String fileName);
      public ASTTableBuilder set_SourcePositionEnd(SourcePosition end);
      public ASTTableBuilder set_SourcePositionEndAbsent();
      public ASTTableBuilder set_SourcePositionStart(SourcePosition start);
      public ASTTableBuilder set_SourcePositionStartAbsent();
      public ASTTableBuilder clear_PreComments();
      public ASTTableBuilder add_PreComment(Comment precomment);
      public ASTTableBuilder add_PreComment(int index, Comment precomment);
      public ASTTableBuilder addAll_PreComments(Collection<Comment> precomments);
      public ASTTableBuilder addAll_PreComments(int index, Collection<Comment> precomments);
      public ASTTableBuilder remove_PreComment(Object element);
      public ASTTableBuilder remove_PreComment(int index);
      public ASTTableBuilder removeAll_PreComments(Collection<?> element);
      public ASTTableBuilder retainAll_PreComments(Collection<?> element);
      public ASTTableBuilder removeIf_PreComment(Predicate<? super Comment> filter);
      public ASTTableBuilder forEach_PreComments(Consumer<? super Comment> action);
      public ASTTableBuilder replaceAll_PreComments(UnaryOperator<Comment> operator);
      public ASTTableBuilder sort_PreComments(Comparator<? super Comment> comparator);
      public ASTTableBuilder set_PreCommentList(List<Comment> preComments);
      public ASTTableBuilder set_PreComment(int index, Comment precomment);
      public ASTTableBuilder clear_PostComments();
      public ASTTableBuilder add_PostComment(Comment postcomment);
      public ASTTableBuilder add_PostComment(int index, Comment postcomment);
      public ASTTableBuilder addAll_PostComments(Collection<Comment> postcomments);
      public ASTTableBuilder addAll_PostComments(int index, Collection<Comment> postcomments);
      public ASTTableBuilder remove_PostComment(Object element);
      public ASTTableBuilder remove_PostComment(int index);
      public ASTTableBuilder removeAll_PostComments(Collection<?> element);
      public ASTTableBuilder retainAll_PostComments(Collection<?> element);
      public ASTTableBuilder removeIf_PostComment(Predicate<? super Comment> filter);
      public ASTTableBuilder forEach_PostComments(Consumer<? super Comment> action);
      public ASTTableBuilder replaceAll_PostComments(UnaryOperator<Comment> operator);
      public ASTTableBuilder sort_PostComments(Comparator<? super Comment> comparator);
      public ASTTableBuilder set_PostCommentList(List<Comment> postComments);
      public ASTTableBuilder set_PostComment(int index, Comment postcomment);
      public ASTTable uncheckedBuild();
    }
    public class ASTConstantsWebsite {
      public final static String LANGUAGE;
      public final static int DEFAULT;
      public final static int START;
      public static String[] superGrammars;
      public ASTConstantsWebsite();
      public static Collection<String> getAllLanguages();
    }
    public interface ASTWebsiteElement extends de.monticore.ast.ASTNode, de.monticore.gettingstarted.website._ast.ASTWebsiteNode {
      public abstract boolean deepEquals(Object o);
      public abstract boolean deepEquals(Object o, boolean forceSameOrder);
      public abstract boolean deepEqualsWithComments(Object o);
      public abstract boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public abstract boolean equalAttributes(Object o);
      public abstract boolean equalsWithComments(Object o);
      public abstract ASTWebsiteElement deepClone();
      public abstract de.monticore.gettingstarted.website._symboltable.IWebsiteScope getEnclosingScope();
      public abstract void setEnclosingScope(de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
    }
    public interface ASTPageContentElement extends de.monticore.ast.ASTNode, de.monticore.gettingstarted.website._ast.ASTWebsiteNode {
      public abstract boolean deepEquals(Object o);
      public abstract boolean deepEquals(Object o, boolean forceSameOrder);
      public abstract boolean deepEqualsWithComments(Object o);
      public abstract boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public abstract boolean equalAttributes(Object o);
      public abstract boolean equalsWithComments(Object o);
      public abstract ASTPageContentElement deepClone();
      public abstract de.monticore.gettingstarted.website._symboltable.IWebsiteScope getEnclosingScope();
      public abstract void setEnclosingScope(de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
    }
    public interface ASTWebsiteNode extends ASTNode {
      public abstract void accept(de.monticore.gettingstarted.website._visitor.WebsiteTraverser visitor);
    }
    <<deprecated>> public enum WebsiteLiterals {
      START(de.monticore.gettingstarted.website._ast.ASTConstantsWebsite.START);
      private WebsiteLiterals(int intValue);
      protected int intValue;
      public int getIntValue();
    }
  }

}
