/* generated from model Website */
/* generated by template cd2java.Interface*/

/* (c) https://github.com/MontiCore/monticore */

/* Hookpoint: InterfaceContent:addComment */

/* generated by template cd2java.Package*/
package de.monticore.gettingstarted.website._visitor;


/* generated by template cd2java.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.se_rwth.commons.SourcePosition;



/* Hookpoint: InterfaceContent:Imports */

/* generated by template cd2java.Annotations*/
// empty template: no Annotation


/* Hookpoint: InterfaceContent:Annotations */

 public  interface WebsiteTraverser extends de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser  { 
/* Hookpoint: InterfaceContent:Elements */


  default /* generated by template cd2java.Method*/
 public  void add4Website (de.monticore.gettingstarted.website._visitor.WebsiteVisitor2 websiteVisitor)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/
 public  List<de.monticore.gettingstarted.website._visitor.WebsiteVisitor2> getWebsiteVisitorList ()

 {
    return new ArrayList<>();
}

  default /* generated by template cd2java.Method*/
 public  void add4MCCommonLiterals (de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor2 mCCommonLiteralsVisitor)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/
 public  List<de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor2> getMCCommonLiteralsVisitorList ()

 {
    return new ArrayList<>();
}

  default /* generated by template cd2java.Method*/
 public  void add4MCBasics (de.monticore.mcbasics._visitor.MCBasicsVisitor2 mCBasicsVisitor)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/
 public  List<de.monticore.mcbasics._visitor.MCBasicsVisitor2> getMCBasicsVisitorList ()

 {
    return new ArrayList<>();
}

  default /* generated by template cd2java.Method*/
 public  void add4MCLiteralsBasis (de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor2 mCLiteralsBasisVisitor)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/
 public  List<de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor2> getMCLiteralsBasisVisitorList ()

 {
    return new ArrayList<>();
}

  default /* generated by template cd2java.Method*/
 public  void setWebsiteHandler (de.monticore.gettingstarted.website._visitor.WebsiteHandler websiteHandler)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._visitor.WebsiteHandler> getWebsiteHandler ()

 {
    return Optional.empty();
}

  default /* generated by template cd2java.Method*/
 public  void setMCCommonLiteralsHandler (de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsHandler mCCommonLiteralsHandler)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsHandler> getMCCommonLiteralsHandler ()

 {
    return Optional.empty();
}

  default /* generated by template cd2java.Method*/
 public  void setMCBasicsHandler (de.monticore.mcbasics._visitor.MCBasicsHandler mCBasicsHandler)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/
 public  Optional<de.monticore.mcbasics._visitor.MCBasicsHandler> getMCBasicsHandler ()

 {
    return Optional.empty();
}

  default /* generated by template cd2java.Method*/
 public  void setMCLiteralsBasisHandler (de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisHandler mCLiteralsBasisHandler)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisHandler> getMCLiteralsBasisHandler ()

 {
    return Optional.empty();
}

  default /* generated by template cd2java.Method*/
 public  void visit (de.monticore.gettingstarted.website._ast.ASTWebsite node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/
 public  void endVisit (de.monticore.gettingstarted.website._ast.ASTWebsite node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/
 public  void handle (de.monticore.gettingstarted.website._ast.ASTWebsite node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getWebsiteHandler().isPresent()) {
      getWebsiteHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/
 public  void traverse (de.monticore.gettingstarted.website._ast.ASTWebsite node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getWebsiteHandler().isPresent()) {
  getWebsiteHandler().get().traverse(node);
} else {
      if (node.isPresentNavigation()) {
        node.getNavigation().accept(this);
      }
    {
      Iterator<de.monticore.gettingstarted.website._ast.ASTPage> iter_pages = node.getPageList().iterator();
      while (iter_pages.hasNext()) {
        iter_pages.next().accept(this);
      }
    }

}
}

  default /* generated by template cd2java.Method*/
 public  void visit (de.monticore.gettingstarted.website._ast.ASTNavigation node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/
 public  void endVisit (de.monticore.gettingstarted.website._ast.ASTNavigation node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/
 public  void handle (de.monticore.gettingstarted.website._ast.ASTNavigation node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getWebsiteHandler().isPresent()) {
      getWebsiteHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/
 public  void traverse (de.monticore.gettingstarted.website._ast.ASTNavigation node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getWebsiteHandler().isPresent()) {
  getWebsiteHandler().get().traverse(node);
} else {
    {
      Iterator<de.monticore.gettingstarted.website._ast.ASTNavigationItem> iter_navigationItems = node.getNavigationItemList().iterator();
      while (iter_navigationItems.hasNext()) {
        iter_navigationItems.next().accept(this);
      }
    }

}
}

  default /* generated by template cd2java.Method*/
 public  void visit (de.monticore.gettingstarted.website._ast.ASTNavigationItem node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/
 public  void endVisit (de.monticore.gettingstarted.website._ast.ASTNavigationItem node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/
 public  void handle (de.monticore.gettingstarted.website._ast.ASTNavigationItem node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getWebsiteHandler().isPresent()) {
      getWebsiteHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/
 public  void traverse (de.monticore.gettingstarted.website._ast.ASTNavigationItem node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getWebsiteHandler().isPresent()) {
  getWebsiteHandler().get().traverse(node);
} else {
    {
      Iterator<de.monticore.gettingstarted.website._ast.ASTNavigationItem> iter_subItem = node.getSubItemList().iterator();
      while (iter_subItem.hasNext()) {
        iter_subItem.next().accept(this);
      }
    }

}
}

  default /* generated by template cd2java.Method*/
 public  void visit (de.monticore.gettingstarted.website._ast.ASTPage node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/
 public  void endVisit (de.monticore.gettingstarted.website._ast.ASTPage node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/
 public  void handle (de.monticore.gettingstarted.website._ast.ASTPage node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getWebsiteHandler().isPresent()) {
      getWebsiteHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/
 public  void traverse (de.monticore.gettingstarted.website._ast.ASTPage node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getWebsiteHandler().isPresent()) {
  getWebsiteHandler().get().traverse(node);
} else {
      if (null != node.getPageContent()) {
        node.getPageContent().accept(this);
      }

}
}

  default /* generated by template cd2java.Method*/
 public  void visit (de.monticore.gettingstarted.website._ast.ASTPageContent node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/
 public  void endVisit (de.monticore.gettingstarted.website._ast.ASTPageContent node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/
 public  void handle (de.monticore.gettingstarted.website._ast.ASTPageContent node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getWebsiteHandler().isPresent()) {
      getWebsiteHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/
 public  void traverse (de.monticore.gettingstarted.website._ast.ASTPageContent node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getWebsiteHandler().isPresent()) {
  getWebsiteHandler().get().traverse(node);
} else {
    {
      Iterator<de.monticore.gettingstarted.website._ast.ASTPageContentElement> iter_pageContentElements = node.getPageContentElementList().iterator();
      while (iter_pageContentElements.hasNext()) {
        iter_pageContentElements.next().accept(this);
      }
    }

}
}

  default /* generated by template cd2java.Method*/
 public  void visit (de.monticore.gettingstarted.website._ast.ASTLink node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/
 public  void endVisit (de.monticore.gettingstarted.website._ast.ASTLink node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/
 public  void handle (de.monticore.gettingstarted.website._ast.ASTLink node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getWebsiteHandler().isPresent()) {
      getWebsiteHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/
 public  void traverse (de.monticore.gettingstarted.website._ast.ASTLink node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getWebsiteHandler().isPresent()) {
  getWebsiteHandler().get().traverse(node);
} else {

}
}

  default /* generated by template cd2java.Method*/
 public  void visit (de.monticore.gettingstarted.website._ast.ASTPicture node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/
 public  void endVisit (de.monticore.gettingstarted.website._ast.ASTPicture node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/
 public  void handle (de.monticore.gettingstarted.website._ast.ASTPicture node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getWebsiteHandler().isPresent()) {
      getWebsiteHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/
 public  void traverse (de.monticore.gettingstarted.website._ast.ASTPicture node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getWebsiteHandler().isPresent()) {
  getWebsiteHandler().get().traverse(node);
} else {
      if (null != node.getWidth()) {
        node.getWidth().accept(this);
      }
      if (null != node.getHeight()) {
        node.getHeight().accept(this);
      }

}
}

  default /* generated by template cd2java.Method*/
 public  void visit (de.monticore.gettingstarted.website._ast.ASTParagraph node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/
 public  void endVisit (de.monticore.gettingstarted.website._ast.ASTParagraph node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/
 public  void handle (de.monticore.gettingstarted.website._ast.ASTParagraph node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getWebsiteHandler().isPresent()) {
      getWebsiteHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/
 public  void traverse (de.monticore.gettingstarted.website._ast.ASTParagraph node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getWebsiteHandler().isPresent()) {
  getWebsiteHandler().get().traverse(node);
} else {

}
}

  default /* generated by template cd2java.Method*/
 public  void visit (de.monticore.gettingstarted.website._ast.ASTTextBlock node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/
 public  void endVisit (de.monticore.gettingstarted.website._ast.ASTTextBlock node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/
 public  void handle (de.monticore.gettingstarted.website._ast.ASTTextBlock node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getWebsiteHandler().isPresent()) {
      getWebsiteHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/
 public  void traverse (de.monticore.gettingstarted.website._ast.ASTTextBlock node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getWebsiteHandler().isPresent()) {
  getWebsiteHandler().get().traverse(node);
} else {
    {
      Iterator<de.monticore.gettingstarted.website._ast.ASTParagraph> iter_paragraphs = node.getParagraphList().iterator();
      while (iter_paragraphs.hasNext()) {
        iter_paragraphs.next().accept(this);
      }
    }

}
}

  default /* generated by template cd2java.Method*/
 public  void visit (de.monticore.gettingstarted.website._ast.ASTCodeBlock node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/
 public  void endVisit (de.monticore.gettingstarted.website._ast.ASTCodeBlock node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/
 public  void handle (de.monticore.gettingstarted.website._ast.ASTCodeBlock node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getWebsiteHandler().isPresent()) {
      getWebsiteHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/
 public  void traverse (de.monticore.gettingstarted.website._ast.ASTCodeBlock node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getWebsiteHandler().isPresent()) {
  getWebsiteHandler().get().traverse(node);
} else {
    {
      Iterator<de.monticore.gettingstarted.website._ast.ASTParagraph> iter_paragraphs = node.getParagraphList().iterator();
      while (iter_paragraphs.hasNext()) {
        iter_paragraphs.next().accept(this);
      }
    }

}
}

  default /* generated by template cd2java.Method*/
 public  void visit (de.monticore.gettingstarted.website._ast.ASTAside node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/
 public  void endVisit (de.monticore.gettingstarted.website._ast.ASTAside node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/
 public  void handle (de.monticore.gettingstarted.website._ast.ASTAside node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getWebsiteHandler().isPresent()) {
      getWebsiteHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/
 public  void traverse (de.monticore.gettingstarted.website._ast.ASTAside node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getWebsiteHandler().isPresent()) {
  getWebsiteHandler().get().traverse(node);
} else {
    {
      Iterator<de.monticore.gettingstarted.website._ast.ASTPageContentElement> iter_subItem = node.getSubItemList().iterator();
      while (iter_subItem.hasNext()) {
        iter_subItem.next().accept(this);
      }
    }

}
}

  default /* generated by template cd2java.Method*/
 public  void visit (de.monticore.gettingstarted.website._ast.ASTRow node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/
 public  void endVisit (de.monticore.gettingstarted.website._ast.ASTRow node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/
 public  void handle (de.monticore.gettingstarted.website._ast.ASTRow node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getWebsiteHandler().isPresent()) {
      getWebsiteHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/
 public  void traverse (de.monticore.gettingstarted.website._ast.ASTRow node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getWebsiteHandler().isPresent()) {
  getWebsiteHandler().get().traverse(node);
} else {
    {
      Iterator<de.monticore.gettingstarted.website._ast.ASTPageContentElement> iter_pageContentElements = node.getPageContentElementList().iterator();
      while (iter_pageContentElements.hasNext()) {
        iter_pageContentElements.next().accept(this);
      }
    }

}
}

  default /* generated by template cd2java.Method*/
 public  void visit (de.monticore.gettingstarted.website._ast.ASTLandImage node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/
 public  void endVisit (de.monticore.gettingstarted.website._ast.ASTLandImage node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/
 public  void handle (de.monticore.gettingstarted.website._ast.ASTLandImage node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getWebsiteHandler().isPresent()) {
      getWebsiteHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/
 public  void traverse (de.monticore.gettingstarted.website._ast.ASTLandImage node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getWebsiteHandler().isPresent()) {
  getWebsiteHandler().get().traverse(node);
} else {

}
}

  default /* generated by template cd2java.Method*/
 public  void visit (de.monticore.gettingstarted.website._ast.ASTCard node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/
 public  void endVisit (de.monticore.gettingstarted.website._ast.ASTCard node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/
 public  void handle (de.monticore.gettingstarted.website._ast.ASTCard node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getWebsiteHandler().isPresent()) {
      getWebsiteHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/
 public  void traverse (de.monticore.gettingstarted.website._ast.ASTCard node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getWebsiteHandler().isPresent()) {
  getWebsiteHandler().get().traverse(node);
} else {
      if (null != node.getParagraph()) {
        node.getParagraph().accept(this);
      }

}
}

  default /* generated by template cd2java.Method*/
 public  void visit (de.monticore.gettingstarted.website._ast.ASTTable node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/
 public  void endVisit (de.monticore.gettingstarted.website._ast.ASTTable node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/
 public  void handle (de.monticore.gettingstarted.website._ast.ASTTable node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getWebsiteHandler().isPresent()) {
      getWebsiteHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/
 public  void traverse (de.monticore.gettingstarted.website._ast.ASTTable node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getWebsiteHandler().isPresent()) {
  getWebsiteHandler().get().traverse(node);
} else {

}
}

  default /* generated by template cd2java.Method*/
 public  void visit (de.monticore.gettingstarted.website._ast.ASTWebsiteElement node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/
 public  void endVisit (de.monticore.gettingstarted.website._ast.ASTWebsiteElement node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/
 public  void handle (de.monticore.gettingstarted.website._ast.ASTWebsiteElement node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getWebsiteHandler().isPresent()) {
      getWebsiteHandler().get().handle(node);
    } else {
      visit(node);
      // no traverse() for abstract classes, interfaces and enums, only concrete classes are traversed
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/
 public  void visit (de.monticore.gettingstarted.website._ast.ASTPageContentElement node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/
 public  void endVisit (de.monticore.gettingstarted.website._ast.ASTPageContentElement node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/
 public  void handle (de.monticore.gettingstarted.website._ast.ASTPageContentElement node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getWebsiteHandler().isPresent()) {
      getWebsiteHandler().get().handle(node);
    } else {
      visit(node);
      // no traverse() for abstract classes, interfaces and enums, only concrete classes are traversed
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/
 public  void visit (de.monticore.gettingstarted.website._ast.ASTWebsiteNode node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/
 public  void endVisit (de.monticore.gettingstarted.website._ast.ASTWebsiteNode node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/
 public  void handle (de.monticore.gettingstarted.website._ast.ASTWebsiteNode node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getWebsiteHandler().isPresent()) {
      getWebsiteHandler().get().handle(node);
    } else {
      visit(node);
      // no traverse() for abstract classes, interfaces and enums, only concrete classes are traversed
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/
 public  void visit (de.monticore.gettingstarted.website._symboltable.PageSymbol node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/
 public  void endVisit (de.monticore.gettingstarted.website._symboltable.PageSymbol node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/
 public  void handle (de.monticore.gettingstarted.website._symboltable.PageSymbol node)

 {
    /* generated by template _visitor.traverser.Handle*/

  if (!getTraversedElements().contains(node)) {
    addTraversedElement(node);
    if (getWebsiteHandler().isPresent()) {
      getWebsiteHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }
  }

}

  default /* generated by template cd2java.Method*/
 public  void traverse (de.monticore.gettingstarted.website._symboltable.PageSymbol node)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/
 public  void visit (de.monticore.gettingstarted.website._symboltable.ICommonWebsiteSymbol node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/
 public  void endVisit (de.monticore.gettingstarted.website._symboltable.ICommonWebsiteSymbol node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/
 public  void handle (de.monticore.gettingstarted.website._symboltable.ICommonWebsiteSymbol node)

 {
    /* generated by template _visitor.traverser.Handle*/

  if (!getTraversedElements().contains(node)) {
    addTraversedElement(node);
    if (getWebsiteHandler().isPresent()) {
      getWebsiteHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }
  }

}

  default /* generated by template cd2java.Method*/
 public  void traverse (de.monticore.gettingstarted.website._symboltable.ICommonWebsiteSymbol node)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/
 public  void visit (de.monticore.gettingstarted.website._symboltable.IWebsiteScope node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/
 public  void endVisit (de.monticore.gettingstarted.website._symboltable.IWebsiteScope node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/
 public  void handle (de.monticore.gettingstarted.website._symboltable.IWebsiteScope node)

 {
    /* generated by template _visitor.traverser.Handle*/

  if (!getTraversedElements().contains(node)) {
    addTraversedElement(node);
    if (getWebsiteHandler().isPresent()) {
      getWebsiteHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }
  }

}

  default /* generated by template cd2java.Method*/
 public  void traverse (de.monticore.gettingstarted.website._symboltable.IWebsiteScope node)

 {
    /* generated by template _visitor.traverser.TraverseScope*/

  if (getWebsiteHandler().isPresent()) {
    getWebsiteHandler().get().traverse(node);
  } else {
  // traverse symbols within the scope
  for (de.monticore.gettingstarted.website._symboltable.PageSymbol s : node.getLocalPageSymbols()) {
    s.accept(this);
  }
  // traverse sub-scopes
  for (de.monticore.gettingstarted.website._symboltable.IWebsiteScope scope : node.getSubScopes()) {
    scope.accept(this);
  }
}
}

  default /* generated by template cd2java.Method*/
 public  void visit (de.monticore.gettingstarted.website._symboltable.IWebsiteArtifactScope node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/
 public  void endVisit (de.monticore.gettingstarted.website._symboltable.IWebsiteArtifactScope node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getWebsiteVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/
 public  void handle (de.monticore.gettingstarted.website._symboltable.IWebsiteArtifactScope node)

 {
    /* generated by template _visitor.traverser.Handle*/

  if (!getTraversedElements().contains(node)) {
    addTraversedElement(node);
    if (getWebsiteHandler().isPresent()) {
      getWebsiteHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }
  }

}

  default /* generated by template cd2java.Method*/
 public  void traverse (de.monticore.gettingstarted.website._symboltable.IWebsiteArtifactScope node)

 {
    traverse((de.monticore.gettingstarted.website._symboltable.IWebsiteScope) node);
}

}
