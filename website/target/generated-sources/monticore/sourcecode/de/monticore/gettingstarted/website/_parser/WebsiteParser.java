/* generated from model Website */
/* generated by template cd2java.Class*/

/* (c) https://github.com/MontiCore/monticore */

/* Hookpoint: ClassContent:addComment */

/* generated by template cd2java.Package*/
package de.monticore.gettingstarted.website._parser;


/* generated by template cd2java.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.se_rwth.commons.SourcePosition;



/* Hookpoint: ClassContent:Imports */



/* Hookpoint: ClassContent:Annotations */

 public  class WebsiteParser extends de.monticore.antlr4.MCConcreteParser  {

/* Hookpoint: ClassContent:Elements */



    /* generated by template cd2java.Method*/
 protected  WebsiteAntlrParser create (String fileName)
 throws java.io.IOException
 {
    /* generated by template _parser.Create*/

  WebsiteAntlrLexer lexer = new WebsiteAntlrLexer(org.antlr.v4.runtime.CharStreams.fromFileName(fileName));
  org.antlr.v4.runtime.CommonTokenStream tokens = new org.antlr.v4.runtime.CommonTokenStream(lexer);
  WebsiteAntlrParser parser = new WebsiteAntlrParser(tokens);
  lexer.setMCParser(parser);
  lexer.removeErrorListeners();
  lexer.addErrorListener(new de.monticore.antlr4.MCErrorListener(parser));
  parser.setFilename(fileName);
  setError(false);
  return parser;
}

    /* generated by template cd2java.Method*/
 protected  WebsiteAntlrParser create (java.io.Reader reader)
 throws java.io.IOException
 {
    /* generated by template _parser.CreateReader*/

  WebsiteAntlrLexer lexer = new WebsiteAntlrLexer(org.antlr.v4.runtime.CharStreams.fromReader(reader));
  org.antlr.v4.runtime.CommonTokenStream tokens = new org.antlr.v4.runtime.CommonTokenStream(lexer);
  WebsiteAntlrParser parser = new WebsiteAntlrParser(tokens);
  lexer.setMCParser(parser);
  lexer.removeErrorListeners();
  lexer.addErrorListener(new de.monticore.antlr4.MCErrorListener(parser));
  parser.setFilename("StringReader");
  setError(false);
  return parser;
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTWebsite> parse (String fileName)
 throws java.io.IOException
 {
    /* generated by template _parser.Parse*/

  return parseWebsite(fileName);
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTWebsite> parse (java.io.Reader reader)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseReader*/

  return parseWebsite(reader);
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTWebsite> parse_String (String str)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseString*/

  return parse_StringWebsite(str);
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTWebsite> parseWebsite (String fileName)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRule*/

  WebsiteAntlrParser parser = create(fileName);
  de.monticore.gettingstarted.website._ast.ASTWebsite ast;
  ast = parser.website().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);

}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTWebsite> parseWebsite (java.io.Reader reader)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleReader*/

  WebsiteAntlrParser parser = create(reader);
  de.monticore.gettingstarted.website._ast.ASTWebsite ast;
  ast = parser.website().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTWebsite> parse_StringWebsite (String str)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleString*/

  return parseWebsite(new java.io.StringReader(str));
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTNavigation> parseNavigation (String fileName)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRule*/

  WebsiteAntlrParser parser = create(fileName);
  de.monticore.gettingstarted.website._ast.ASTNavigation ast;
  ast = parser.navigation().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);

}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTNavigation> parseNavigation (java.io.Reader reader)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleReader*/

  WebsiteAntlrParser parser = create(reader);
  de.monticore.gettingstarted.website._ast.ASTNavigation ast;
  ast = parser.navigation().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTNavigation> parse_StringNavigation (String str)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleString*/

  return parseNavigation(new java.io.StringReader(str));
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTNavigationItem> parseNavigationItem (String fileName)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRule*/

  WebsiteAntlrParser parser = create(fileName);
  de.monticore.gettingstarted.website._ast.ASTNavigationItem ast;
  ast = parser.navigationItem().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);

}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTNavigationItem> parseNavigationItem (java.io.Reader reader)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleReader*/

  WebsiteAntlrParser parser = create(reader);
  de.monticore.gettingstarted.website._ast.ASTNavigationItem ast;
  ast = parser.navigationItem().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTNavigationItem> parse_StringNavigationItem (String str)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleString*/

  return parseNavigationItem(new java.io.StringReader(str));
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTPage> parsePage (String fileName)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRule*/

  WebsiteAntlrParser parser = create(fileName);
  de.monticore.gettingstarted.website._ast.ASTPage ast;
  ast = parser.page().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);

}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTPage> parsePage (java.io.Reader reader)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleReader*/

  WebsiteAntlrParser parser = create(reader);
  de.monticore.gettingstarted.website._ast.ASTPage ast;
  ast = parser.page().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTPage> parse_StringPage (String str)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleString*/

  return parsePage(new java.io.StringReader(str));
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTPageContent> parsePageContent (String fileName)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRule*/

  WebsiteAntlrParser parser = create(fileName);
  de.monticore.gettingstarted.website._ast.ASTPageContent ast;
  ast = parser.pageContent().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);

}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTPageContent> parsePageContent (java.io.Reader reader)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleReader*/

  WebsiteAntlrParser parser = create(reader);
  de.monticore.gettingstarted.website._ast.ASTPageContent ast;
  ast = parser.pageContent().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTPageContent> parse_StringPageContent (String str)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleString*/

  return parsePageContent(new java.io.StringReader(str));
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTLink> parseLink (String fileName)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRule*/

  WebsiteAntlrParser parser = create(fileName);
  de.monticore.gettingstarted.website._ast.ASTLink ast;
  ast = parser.link().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);

}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTLink> parseLink (java.io.Reader reader)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleReader*/

  WebsiteAntlrParser parser = create(reader);
  de.monticore.gettingstarted.website._ast.ASTLink ast;
  ast = parser.link().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTLink> parse_StringLink (String str)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleString*/

  return parseLink(new java.io.StringReader(str));
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTPicture> parsePicture (String fileName)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRule*/

  WebsiteAntlrParser parser = create(fileName);
  de.monticore.gettingstarted.website._ast.ASTPicture ast;
  ast = parser.picture().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);

}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTPicture> parsePicture (java.io.Reader reader)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleReader*/

  WebsiteAntlrParser parser = create(reader);
  de.monticore.gettingstarted.website._ast.ASTPicture ast;
  ast = parser.picture().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTPicture> parse_StringPicture (String str)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleString*/

  return parsePicture(new java.io.StringReader(str));
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTParagraph> parseParagraph (String fileName)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRule*/

  WebsiteAntlrParser parser = create(fileName);
  de.monticore.gettingstarted.website._ast.ASTParagraph ast;
  ast = parser.paragraph().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);

}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTParagraph> parseParagraph (java.io.Reader reader)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleReader*/

  WebsiteAntlrParser parser = create(reader);
  de.monticore.gettingstarted.website._ast.ASTParagraph ast;
  ast = parser.paragraph().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTParagraph> parse_StringParagraph (String str)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleString*/

  return parseParagraph(new java.io.StringReader(str));
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTTextBlock> parseTextBlock (String fileName)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRule*/

  WebsiteAntlrParser parser = create(fileName);
  de.monticore.gettingstarted.website._ast.ASTTextBlock ast;
  ast = parser.textBlock().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);

}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTTextBlock> parseTextBlock (java.io.Reader reader)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleReader*/

  WebsiteAntlrParser parser = create(reader);
  de.monticore.gettingstarted.website._ast.ASTTextBlock ast;
  ast = parser.textBlock().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTTextBlock> parse_StringTextBlock (String str)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleString*/

  return parseTextBlock(new java.io.StringReader(str));
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTCodeBlock> parseCodeBlock (String fileName)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRule*/

  WebsiteAntlrParser parser = create(fileName);
  de.monticore.gettingstarted.website._ast.ASTCodeBlock ast;
  ast = parser.codeBlock().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);

}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTCodeBlock> parseCodeBlock (java.io.Reader reader)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleReader*/

  WebsiteAntlrParser parser = create(reader);
  de.monticore.gettingstarted.website._ast.ASTCodeBlock ast;
  ast = parser.codeBlock().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTCodeBlock> parse_StringCodeBlock (String str)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleString*/

  return parseCodeBlock(new java.io.StringReader(str));
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTAside> parseAside (String fileName)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRule*/

  WebsiteAntlrParser parser = create(fileName);
  de.monticore.gettingstarted.website._ast.ASTAside ast;
  ast = parser.aside().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);

}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTAside> parseAside (java.io.Reader reader)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleReader*/

  WebsiteAntlrParser parser = create(reader);
  de.monticore.gettingstarted.website._ast.ASTAside ast;
  ast = parser.aside().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTAside> parse_StringAside (String str)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleString*/

  return parseAside(new java.io.StringReader(str));
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTRow> parseRow (String fileName)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRule*/

  WebsiteAntlrParser parser = create(fileName);
  de.monticore.gettingstarted.website._ast.ASTRow ast;
  ast = parser.row().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);

}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTRow> parseRow (java.io.Reader reader)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleReader*/

  WebsiteAntlrParser parser = create(reader);
  de.monticore.gettingstarted.website._ast.ASTRow ast;
  ast = parser.row().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTRow> parse_StringRow (String str)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleString*/

  return parseRow(new java.io.StringReader(str));
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTLandImage> parseLandImage (String fileName)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRule*/

  WebsiteAntlrParser parser = create(fileName);
  de.monticore.gettingstarted.website._ast.ASTLandImage ast;
  ast = parser.landImage().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);

}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTLandImage> parseLandImage (java.io.Reader reader)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleReader*/

  WebsiteAntlrParser parser = create(reader);
  de.monticore.gettingstarted.website._ast.ASTLandImage ast;
  ast = parser.landImage().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTLandImage> parse_StringLandImage (String str)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleString*/

  return parseLandImage(new java.io.StringReader(str));
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTCard> parseCard (String fileName)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRule*/

  WebsiteAntlrParser parser = create(fileName);
  de.monticore.gettingstarted.website._ast.ASTCard ast;
  ast = parser.card().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);

}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTCard> parseCard (java.io.Reader reader)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleReader*/

  WebsiteAntlrParser parser = create(reader);
  de.monticore.gettingstarted.website._ast.ASTCard ast;
  ast = parser.card().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTCard> parse_StringCard (String str)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleString*/

  return parseCard(new java.io.StringReader(str));
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTTable> parseTable (String fileName)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRule*/

  WebsiteAntlrParser parser = create(fileName);
  de.monticore.gettingstarted.website._ast.ASTTable ast;
  ast = parser.table().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);

}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTTable> parseTable (java.io.Reader reader)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleReader*/

  WebsiteAntlrParser parser = create(reader);
  de.monticore.gettingstarted.website._ast.ASTTable ast;
  ast = parser.table().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTTable> parse_StringTable (String str)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleString*/

  return parseTable(new java.io.StringReader(str));
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTWebsiteElement> parseWebsiteElement (String fileName)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRule*/

  WebsiteAntlrParser parser = create(fileName);
  de.monticore.gettingstarted.website._ast.ASTWebsiteElement ast;
  ast = parser.websiteElement().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);

}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTWebsiteElement> parseWebsiteElement (java.io.Reader reader)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleReader*/

  WebsiteAntlrParser parser = create(reader);
  de.monticore.gettingstarted.website._ast.ASTWebsiteElement ast;
  ast = parser.websiteElement().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTWebsiteElement> parse_StringWebsiteElement (String str)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleString*/

  return parseWebsiteElement(new java.io.StringReader(str));
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTPageContentElement> parsePageContentElement (String fileName)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRule*/

  WebsiteAntlrParser parser = create(fileName);
  de.monticore.gettingstarted.website._ast.ASTPageContentElement ast;
  ast = parser.pageContentElement().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);

}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTPageContentElement> parsePageContentElement (java.io.Reader reader)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleReader*/

  WebsiteAntlrParser parser = create(reader);
  de.monticore.gettingstarted.website._ast.ASTPageContentElement ast;
  ast = parser.pageContentElement().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.gettingstarted.website._ast.ASTPageContentElement> parse_StringPageContentElement (String str)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleString*/

  return parsePageContentElement(new java.io.StringReader(str));
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTNullLiteral> parseNullLiteral (String fileName)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRule*/

  WebsiteAntlrParser parser = create(fileName);
  de.monticore.literals.mccommonliterals._ast.ASTNullLiteral ast;
  ast = parser.nullLiteral().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);

}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTNullLiteral> parseNullLiteral (java.io.Reader reader)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleReader*/

  WebsiteAntlrParser parser = create(reader);
  de.monticore.literals.mccommonliterals._ast.ASTNullLiteral ast;
  ast = parser.nullLiteral().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTNullLiteral> parse_StringNullLiteral (String str)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleString*/

  return parseNullLiteral(new java.io.StringReader(str));
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTBooleanLiteral> parseBooleanLiteral (String fileName)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRule*/

  WebsiteAntlrParser parser = create(fileName);
  de.monticore.literals.mccommonliterals._ast.ASTBooleanLiteral ast;
  ast = parser.booleanLiteral().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);

}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTBooleanLiteral> parseBooleanLiteral (java.io.Reader reader)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleReader*/

  WebsiteAntlrParser parser = create(reader);
  de.monticore.literals.mccommonliterals._ast.ASTBooleanLiteral ast;
  ast = parser.booleanLiteral().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTBooleanLiteral> parse_StringBooleanLiteral (String str)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleString*/

  return parseBooleanLiteral(new java.io.StringReader(str));
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTCharLiteral> parseCharLiteral (String fileName)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRule*/

  WebsiteAntlrParser parser = create(fileName);
  de.monticore.literals.mccommonliterals._ast.ASTCharLiteral ast;
  ast = parser.charLiteral().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);

}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTCharLiteral> parseCharLiteral (java.io.Reader reader)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleReader*/

  WebsiteAntlrParser parser = create(reader);
  de.monticore.literals.mccommonliterals._ast.ASTCharLiteral ast;
  ast = parser.charLiteral().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTCharLiteral> parse_StringCharLiteral (String str)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleString*/

  return parseCharLiteral(new java.io.StringReader(str));
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> parseStringLiteral (String fileName)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRule*/

  WebsiteAntlrParser parser = create(fileName);
  de.monticore.literals.mccommonliterals._ast.ASTStringLiteral ast;
  ast = parser.stringLiteral().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);

}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> parseStringLiteral (java.io.Reader reader)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleReader*/

  WebsiteAntlrParser parser = create(reader);
  de.monticore.literals.mccommonliterals._ast.ASTStringLiteral ast;
  ast = parser.stringLiteral().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> parse_StringStringLiteral (String str)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleString*/

  return parseStringLiteral(new java.io.StringReader(str));
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTNatLiteral> parseNatLiteral (String fileName)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRule*/

  WebsiteAntlrParser parser = create(fileName);
  de.monticore.literals.mccommonliterals._ast.ASTNatLiteral ast;
  ast = parser.natLiteral().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);

}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTNatLiteral> parseNatLiteral (java.io.Reader reader)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleReader*/

  WebsiteAntlrParser parser = create(reader);
  de.monticore.literals.mccommonliterals._ast.ASTNatLiteral ast;
  ast = parser.natLiteral().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTNatLiteral> parse_StringNatLiteral (String str)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleString*/

  return parseNatLiteral(new java.io.StringReader(str));
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteral> parseSignedNatLiteral (String fileName)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRule*/

  WebsiteAntlrParser parser = create(fileName);
  de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteral ast;
  ast = parser.signedNatLiteral().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);

}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteral> parseSignedNatLiteral (java.io.Reader reader)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleReader*/

  WebsiteAntlrParser parser = create(reader);
  de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteral ast;
  ast = parser.signedNatLiteral().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteral> parse_StringSignedNatLiteral (String str)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleString*/

  return parseSignedNatLiteral(new java.io.StringReader(str));
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTBasicLongLiteral> parseBasicLongLiteral (String fileName)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRule*/

  WebsiteAntlrParser parser = create(fileName);
  de.monticore.literals.mccommonliterals._ast.ASTBasicLongLiteral ast;
  ast = parser.basicLongLiteral().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);

}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTBasicLongLiteral> parseBasicLongLiteral (java.io.Reader reader)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleReader*/

  WebsiteAntlrParser parser = create(reader);
  de.monticore.literals.mccommonliterals._ast.ASTBasicLongLiteral ast;
  ast = parser.basicLongLiteral().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTBasicLongLiteral> parse_StringBasicLongLiteral (String str)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleString*/

  return parseBasicLongLiteral(new java.io.StringReader(str));
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTSignedBasicLongLiteral> parseSignedBasicLongLiteral (String fileName)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRule*/

  WebsiteAntlrParser parser = create(fileName);
  de.monticore.literals.mccommonliterals._ast.ASTSignedBasicLongLiteral ast;
  ast = parser.signedBasicLongLiteral().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);

}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTSignedBasicLongLiteral> parseSignedBasicLongLiteral (java.io.Reader reader)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleReader*/

  WebsiteAntlrParser parser = create(reader);
  de.monticore.literals.mccommonliterals._ast.ASTSignedBasicLongLiteral ast;
  ast = parser.signedBasicLongLiteral().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTSignedBasicLongLiteral> parse_StringSignedBasicLongLiteral (String str)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleString*/

  return parseSignedBasicLongLiteral(new java.io.StringReader(str));
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTBasicFloatLiteral> parseBasicFloatLiteral (String fileName)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRule*/

  WebsiteAntlrParser parser = create(fileName);
  de.monticore.literals.mccommonliterals._ast.ASTBasicFloatLiteral ast;
  ast = parser.basicFloatLiteral().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);

}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTBasicFloatLiteral> parseBasicFloatLiteral (java.io.Reader reader)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleReader*/

  WebsiteAntlrParser parser = create(reader);
  de.monticore.literals.mccommonliterals._ast.ASTBasicFloatLiteral ast;
  ast = parser.basicFloatLiteral().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTBasicFloatLiteral> parse_StringBasicFloatLiteral (String str)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleString*/

  return parseBasicFloatLiteral(new java.io.StringReader(str));
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTSignedBasicFloatLiteral> parseSignedBasicFloatLiteral (String fileName)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRule*/

  WebsiteAntlrParser parser = create(fileName);
  de.monticore.literals.mccommonliterals._ast.ASTSignedBasicFloatLiteral ast;
  ast = parser.signedBasicFloatLiteral().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);

}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTSignedBasicFloatLiteral> parseSignedBasicFloatLiteral (java.io.Reader reader)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleReader*/

  WebsiteAntlrParser parser = create(reader);
  de.monticore.literals.mccommonliterals._ast.ASTSignedBasicFloatLiteral ast;
  ast = parser.signedBasicFloatLiteral().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTSignedBasicFloatLiteral> parse_StringSignedBasicFloatLiteral (String str)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleString*/

  return parseSignedBasicFloatLiteral(new java.io.StringReader(str));
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTBasicDoubleLiteral> parseBasicDoubleLiteral (String fileName)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRule*/

  WebsiteAntlrParser parser = create(fileName);
  de.monticore.literals.mccommonliterals._ast.ASTBasicDoubleLiteral ast;
  ast = parser.basicDoubleLiteral().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);

}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTBasicDoubleLiteral> parseBasicDoubleLiteral (java.io.Reader reader)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleReader*/

  WebsiteAntlrParser parser = create(reader);
  de.monticore.literals.mccommonliterals._ast.ASTBasicDoubleLiteral ast;
  ast = parser.basicDoubleLiteral().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTBasicDoubleLiteral> parse_StringBasicDoubleLiteral (String str)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleString*/

  return parseBasicDoubleLiteral(new java.io.StringReader(str));
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTSignedBasicDoubleLiteral> parseSignedBasicDoubleLiteral (String fileName)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRule*/

  WebsiteAntlrParser parser = create(fileName);
  de.monticore.literals.mccommonliterals._ast.ASTSignedBasicDoubleLiteral ast;
  ast = parser.signedBasicDoubleLiteral().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);

}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTSignedBasicDoubleLiteral> parseSignedBasicDoubleLiteral (java.io.Reader reader)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleReader*/

  WebsiteAntlrParser parser = create(reader);
  de.monticore.literals.mccommonliterals._ast.ASTSignedBasicDoubleLiteral ast;
  ast = parser.signedBasicDoubleLiteral().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTSignedBasicDoubleLiteral> parse_StringSignedBasicDoubleLiteral (String str)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleString*/

  return parseSignedBasicDoubleLiteral(new java.io.StringReader(str));
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTSignedLiteral> parseSignedLiteral (String fileName)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRule*/

  WebsiteAntlrParser parser = create(fileName);
  de.monticore.literals.mccommonliterals._ast.ASTSignedLiteral ast;
  ast = parser.signedLiteral().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);

}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTSignedLiteral> parseSignedLiteral (java.io.Reader reader)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleReader*/

  WebsiteAntlrParser parser = create(reader);
  de.monticore.literals.mccommonliterals._ast.ASTSignedLiteral ast;
  ast = parser.signedLiteral().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTSignedLiteral> parse_StringSignedLiteral (String str)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleString*/

  return parseSignedLiteral(new java.io.StringReader(str));
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTNumericLiteral> parseNumericLiteral (String fileName)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRule*/

  WebsiteAntlrParser parser = create(fileName);
  de.monticore.literals.mccommonliterals._ast.ASTNumericLiteral ast;
  ast = parser.numericLiteral().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);

}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTNumericLiteral> parseNumericLiteral (java.io.Reader reader)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleReader*/

  WebsiteAntlrParser parser = create(reader);
  de.monticore.literals.mccommonliterals._ast.ASTNumericLiteral ast;
  ast = parser.numericLiteral().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTNumericLiteral> parse_StringNumericLiteral (String str)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleString*/

  return parseNumericLiteral(new java.io.StringReader(str));
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTSignedNumericLiteral> parseSignedNumericLiteral (String fileName)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRule*/

  WebsiteAntlrParser parser = create(fileName);
  de.monticore.literals.mccommonliterals._ast.ASTSignedNumericLiteral ast;
  ast = parser.signedNumericLiteral().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);

}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTSignedNumericLiteral> parseSignedNumericLiteral (java.io.Reader reader)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleReader*/

  WebsiteAntlrParser parser = create(reader);
  de.monticore.literals.mccommonliterals._ast.ASTSignedNumericLiteral ast;
  ast = parser.signedNumericLiteral().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._ast.ASTSignedNumericLiteral> parse_StringSignedNumericLiteral (String str)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleString*/

  return parseSignedNumericLiteral(new java.io.StringReader(str));
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mcliteralsbasis._ast.ASTLiteral> parseLiteral (String fileName)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRule*/

  WebsiteAntlrParser parser = create(fileName);
  de.monticore.literals.mcliteralsbasis._ast.ASTLiteral ast;
  ast = parser.literal().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);

}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mcliteralsbasis._ast.ASTLiteral> parseLiteral (java.io.Reader reader)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleReader*/

  WebsiteAntlrParser parser = create(reader);
  de.monticore.literals.mcliteralsbasis._ast.ASTLiteral ast;
  ast = parser.literal().ret;
  if (parser.hasErrors()) {
    setError(true);
    return Optional.empty();
  }
  // Check for EOF
  if (parser.getCurrentToken() != null && parser.getCurrentToken().getType() != -1) {
    setError(true);
    return Optional.empty();
  }
  return Optional.of(ast);
}

    /* generated by template cd2java.Method*/
 public  Optional<de.monticore.literals.mcliteralsbasis._ast.ASTLiteral> parse_StringLiteral (String str)
 throws java.io.IOException
 {
    /* generated by template _parser.ParseRuleString*/

  return parseLiteral(new java.io.StringReader(str));
}


}


