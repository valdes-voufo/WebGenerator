/* generated by template parser.EmptyParserInfo*/

package de.monticore.gettingstarted.website._parser;

import java.util.*;
import de.monticore.gettingstarted.website._parser._auxiliary.WebsiteParserInfoForMCCommonLiterals;
import de.monticore.gettingstarted.website._parser._auxiliary.WebsiteParserInfoForMCBasics;
import de.monticore.gettingstarted.website._parser._auxiliary.WebsiteParserInfoForMCLiteralsBasis;
import de.monticore.literals.mccommonliterals._parser.MCCommonLiteralsParserInfo;
import de.monticore.mcbasics._parser.MCBasicsParserInfo;
import de.monticore.literals.mcliteralsbasis._parser.MCLiteralsBasisParserInfo;

/**
 * Implementation of WebsiteParserInfo where every method returns false.
 * This is used in the static delegate pattern as the superclass for the ParserInfoForSuperLang classes.
 * Therefore, the ParserInfoForSuperLang classes don't have to know all symbol references and usage names that are used in a super-language, but not in the sub-language.
 */
public abstract class EmptyWebsiteParserInfo extends WebsiteParserInfo{
    @Override
    protected boolean _stateHasUsageNameSource(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameDigits(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNamePre(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNamePost(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameName(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameNavigation(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNamePage(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameNavigationItem(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameSubItem(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameTitle(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNamePageContent(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNamePageContentElement(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameWidth(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameHeight(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameText(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameParagraph(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameSubtitle(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNamePicture(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameLink(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameFileName(int state){
      return false;
    }


  protected boolean _stateDefinesName(int state){
    return false;
  }
}
