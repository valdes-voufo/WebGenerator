/* generated from model Website */
/* generated by template cd2java.Class*/

/* (c) https://github.com/MontiCore/monticore */

/* Hookpoint: ClassContent:addComment */

/* generated by template cd2java.Package*/
package de.monticore.gettingstarted.website._symboltable;


/* generated by template cd2java.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.se_rwth.commons.SourcePosition;



/* Hookpoint: ClassContent:Imports */

/* generated by template cd2java.Annotations*/
// empty template: no Annotation


/* Hookpoint: ClassContent:Annotations */

 public  class PageSymbol  implements de.monticore.gettingstarted.website._symboltable.ICommonWebsiteSymbol {

/* Hookpoint: ClassContent:Elements */

    /* generated by template cd2java.Attribute*/
/* generated by template cd2java.Annotations*/
// empty template: no Annotation

/* Hookpoint: AttributeContent:Annotations */
 protected  String name
  
;

    /* generated by template cd2java.Attribute*/
/* generated by template cd2java.Annotations*/
// empty template: no Annotation

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope
  
;

    /* generated by template cd2java.Attribute*/
/* generated by template cd2java.Annotations*/
// empty template: no Annotation

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.gettingstarted.website._ast.ASTPage> astNode
  = Optional.empty()
;

    /* generated by template cd2java.Attribute*/
/* generated by template cd2java.Annotations*/
// empty template: no Annotation

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.symboltable.modifiers.AccessModifier accessModifier
  = de.monticore.symboltable.modifiers.AccessModifier.ALL_INCLUSION
;

    /* generated by template cd2java.Attribute*/
/* generated by template cd2java.Annotations*/
// empty template: no Annotation

/* Hookpoint: AttributeContent:Annotations */
 protected  String fullName
  
;

    /* generated by template cd2java.Attribute*/
/* generated by template cd2java.Annotations*/
// empty template: no Annotation

/* Hookpoint: AttributeContent:Annotations */
 protected  String packageName
  
;


    /* generated by template cd2java.Constructor*/
 public  PageSymbol(String name)
 {
  this.name = name;
}


    /* generated by template cd2java.Method*/
 public  String getName ()

 {
    /* generated by template methods.Get*/

return this.name;

}

    /* generated by template cd2java.Method*/
 public  void setName (String name)

 {
    /* generated by template methods.Set*/

this.name = name;

}

    /* generated by template cd2java.Method*/
 public  de.monticore.gettingstarted.website._symboltable.IWebsiteScope getEnclosingScope ()

 {
    /* generated by template methods.Get*/

return this.enclosingScope;

}

    /* generated by template cd2java.Method*/
 public  void setEnclosingScope (de.monticore.gettingstarted.website._symboltable.IWebsiteScope enclosingScope)

 {
    /* generated by template methods.Set*/

this.enclosingScope = enclosingScope;

}

    /* generated by template cd2java.Method*/
 public  de.monticore.gettingstarted.website._ast.ASTPage getAstNode ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentAstNode()) {
        return this.astNode.get();
    }
    Log.error("0xA7003x79036 get for AstNode can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/
 public  boolean isPresentAstNode ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.astNode.isPresent();

}

    /* generated by template cd2java.Method*/
 public  void setAstNode (de.monticore.gettingstarted.website._ast.ASTPage astNode)

 {
    /* generated by template methods.opt.Set4Opt*/

this.astNode = Optional.ofNullable(astNode);

}

    /* generated by template cd2java.Method*/
 public  void setAstNodeAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.astNode = Optional.empty();

}

    /* generated by template cd2java.Method*/
 public  de.monticore.symboltable.modifiers.AccessModifier getAccessModifier ()

 {
    /* generated by template methods.Get*/

return this.accessModifier;

}

    /* generated by template cd2java.Method*/
 public  void setAccessModifier (de.monticore.symboltable.modifiers.AccessModifier accessModifier)

 {
    /* generated by template methods.Set*/

this.accessModifier = accessModifier;

}

    /* generated by template cd2java.Method*/
 public  void setFullName (String fullName)

 {
    /* generated by template methods.Set*/

this.fullName = fullName;

}

    /* generated by template cd2java.Method*/
 public  String getFullName ()

 {
    /* generated by template _symboltable.symbol.NameSetter*/

  if (fullName == null) {
    fullName = determineFullName();
  }
  return fullName;
}

    /* generated by template cd2java.Method*/
 public  void setPackageName (String packageName)

 {
    /* generated by template methods.Set*/

this.packageName = packageName;

}

    /* generated by template cd2java.Method*/
 public  String getPackageName ()

 {
    /* generated by template _symboltable.symbol.NameSetter*/

  if (packageName == null) {
    packageName = determinePackageName();
  }
  return packageName;
}

    /* generated by template cd2java.Method*/
 public  void accept (de.monticore.gettingstarted.website._visitor.WebsiteTraverser visitor)

 {
    visitor.handle(this);
}

    /* generated by template cd2java.Method*/
 public  void accept (de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor)

 {
    /* generated by template _symboltable.AcceptSuper*/

  if (visitor instanceof de.monticore.gettingstarted.website._visitor.WebsiteTraverser) {
    accept((de.monticore.gettingstarted.website._visitor.WebsiteTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7010x04436 Symbol type Page expected a visitor of type de.monticore.gettingstarted.website._visitor.WebsiteTraverser, but got de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser. Visitors of a super language may not be used on Symbols containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template cd2java.Method*/
 public  void accept (de.monticore.mcbasics._visitor.MCBasicsTraverser visitor)

 {
    /* generated by template _symboltable.AcceptSuper*/

  if (visitor instanceof de.monticore.gettingstarted.website._visitor.WebsiteTraverser) {
    accept((de.monticore.gettingstarted.website._visitor.WebsiteTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7010x35784 Symbol type Page expected a visitor of type de.monticore.gettingstarted.website._visitor.WebsiteTraverser, but got de.monticore.mcbasics._visitor.MCBasicsTraverser. Visitors of a super language may not be used on Symbols containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template cd2java.Method*/
 public  void accept (de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor)

 {
    /* generated by template _symboltable.AcceptSuper*/

  if (visitor instanceof de.monticore.gettingstarted.website._visitor.WebsiteTraverser) {
    accept((de.monticore.gettingstarted.website._visitor.WebsiteTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7010x44936 Symbol type Page expected a visitor of type de.monticore.gettingstarted.website._visitor.WebsiteTraverser, but got de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser. Visitors of a super language may not be used on Symbols containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template cd2java.Method*/
 public  void accept (de.monticore.visitor.ITraverser visitor)

 {
    /* generated by template _symboltable.AcceptSuper*/

  if (visitor instanceof de.monticore.gettingstarted.website._visitor.WebsiteTraverser) {
    accept((de.monticore.gettingstarted.website._visitor.WebsiteTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7010x06008 Symbol type Page expected a visitor of type de.monticore.gettingstarted.website._visitor.WebsiteTraverser, but got de.monticore.visitor.ITraverser. Visitors of a super language may not be used on Symbols containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template cd2java.Method*/
 protected  String determinePackageName ()

 {
    /* generated by template _symboltable.symbol.DeterminePackageName*/

de.monticore.symboltable.IScope optCurrentScope = enclosingScope;
while (optCurrentScope != null) {
final de.monticore.symboltable.IScope currentScope = optCurrentScope;
    if (currentScope.isPresentSpanningSymbol()) {
      // If one of the enclosing scope(s) is spanned by a symbol, take its
      // package name. This check is important, since the package name of the
      // enclosing symbol might be set manually.
      return currentScope.getSpanningSymbol().getPackageName();
    } else if (currentScope instanceof de.monticore.symboltable.IArtifactScope) {
      return ((de.monticore.symboltable.IArtifactScope) currentScope).getPackageName();
    }
optCurrentScope = currentScope.getEnclosingScope();
  }
  return "";
}

    /* generated by template cd2java.Method*/
 protected  String determineFullName ()

 {
    /* generated by template _symboltable.symbol.DetermineFullName*/

  if (enclosingScope == null) {
    // There should not be a symbol that is not defined in any scope. This case should only
    // occur while the symbol is built (by the symbol table creator). So, here the full name
    // should not be cached yet.
    return name;
  }

  final Deque<String> nameParts = new ArrayDeque<>();
    nameParts.addFirst(name);

    de.monticore.symboltable.IScope optCurrentScope = getEnclosingScope();

  while (optCurrentScope != null) {
  final de.monticore.symboltable.IScope currentScope = optCurrentScope;
      if (currentScope.isPresentSpanningSymbol()) {
        // If one of the enclosing scope(s) is spanned by a symbol, the full name
        // of that symbol is the missing prefix, and hence, the calculation
        // ends here. This check is important, since the full name of the enclosing
        // symbol might be set manually.
        nameParts.addFirst(currentScope.getSpanningSymbol().getFullName());
        break;
      }

      if (!(currentScope instanceof de.monticore.symboltable.IGlobalScope)) {
        if (currentScope instanceof de.monticore.symboltable.IArtifactScope) {
          // We have reached the artifact scope. Get the package name from the
          // symbol itself, since it might be set manually.
          if (!getPackageName().isEmpty()) {
            nameParts.addFirst(getPackageName());
          }
        } else {
          if (currentScope.isPresentName()) {
            nameParts.addFirst(currentScope.getName());
          }
          // ...else stop? If one of the enclosing scopes is unnamed,
          //         the full name is same as the simple name.
        }
  optCurrentScope = currentScope.getEnclosingScope();
  } else {
  break;
  }
    }

    return de.se_rwth.commons.Names.getQualifiedName(nameParts);

}


}


