/* generated by template parser.Parser*/


/* generated by template parser.ParserHeader*/
parser grammar WebsiteAntlrParser;
@parser::header {
package de.monticore.gettingstarted.website._parser;
import de.monticore.antlr4.*;
import de.monticore.parser.*;
import de.monticore.gettingstarted.website.*;
}

options {
  superClass=MCParser;
  tokenVocab=WebsiteAntlrLexer;
}

@parser::members

{

  // convert function for Name
private String convertName(Token t)  {
    return t.getText();
}

  // convert function for NEWLINE
private String convertNEWLINE(Token t)  {
    return t.getText();
}

  // convert function for WS
private String convertWS(Token t)  {
    return t.getText();
}

  // convert function for SL_COMMENT
private String convertSL_COMMENT(Token t)  {
    return t.getText();
}

  // convert function for ML_COMMENT
private String convertML_COMMENT(Token t)  {
    return t.getText();
}

  // convert function for Digits
private String convertDigits(Token t)  {
    return t.getText();
}

  // convert function for Digit
private String convertDigit(Token t)  {
    return t.getText();
}

  // convert function for Char
private String convertChar(Token t)  {
    return t.getText();
}

  // convert function for SingleCharacter
private String convertSingleCharacter(Token t)  {
    return t.getText();
}

  // convert function for String
private String convertString(Token t)  {
    return t.getText();
}

  // convert function for StringCharacters
private String convertStringCharacters(Token t)  {
    return t.getText();
}

  // convert function for StringCharacter
private String convertStringCharacter(Token t)  {
    return t.getText();
}

  // convert function for EscapeSequence
private String convertEscapeSequence(Token t)  {
    return t.getText();
}

  // convert function for OctalEscape
private String convertOctalEscape(Token t)  {
    return t.getText();
}

  // convert function for UnicodeEscape
private String convertUnicodeEscape(Token t)  {
    return t.getText();
}

  // convert function for ZeroToThree
private String convertZeroToThree(Token t)  {
    return t.getText();
}

  // convert function for HexDigit
private String convertHexDigit(Token t)  {
    return t.getText();
}

  // convert function for OctalDigit
private String convertOctalDigit(Token t)  {
    return t.getText();
}

}

  
 // Start of 'ASTClassProd NullLiteral'
nullLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTNullLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTNullLiteralBuilder _builder = de.monticore.gettingstarted.website.WebsiteMill.nullLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal null'
NULL3392903
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd BooleanLiteral'
booleanLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTBooleanLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTBooleanLiteralBuilder _builder = de.monticore.gettingstarted.website.WebsiteMill.booleanLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTConstantGroup'
('true'{
_builder.setSource(de.monticore.literals.mccommonliterals._ast.ASTConstantsMCCommonLiterals.TRUE);
}|
'false'{
_builder.setSource(de.monticore.literals.mccommonliterals._ast.ASTConstantsMCCommonLiterals.FALSE);
})// End of 'ASTConstantGroup'

  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd CharLiteral'
charLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTCharLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTCharLiteralBuilder _builder = de.monticore.gettingstarted.website.WebsiteMill.charLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  (tmp0=Char{_builder.setSource(convertChar($tmp0));}

  ) 
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd StringLiteral'
stringLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTStringLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTStringLiteralBuilder _builder = de.monticore.gettingstarted.website.WebsiteMill.stringLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  (tmp0=String{_builder.setSource(convertString($tmp0));}

  ) 
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd NatLiteral'
natLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTNatLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTNatLiteralBuilder _builder = de.monticore.gettingstarted.website.WebsiteMill.natLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  (tmp0=Digits{_builder.setDigits(convertDigits($tmp0));}

  ) 
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd SignedNatLiteral'
signedNatLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteralBuilder _builder = de.monticore.gettingstarted.website.WebsiteMill.signedNatLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  {noSpace(2)}?
  (
  
  
 // Start of 'ASTConstantGroup'
(MINUS{
_builder.setNegative(true);
})// End of 'ASTConstantGroup'

  
)
  (tmp0=Digits{_builder.setDigits(convertDigits($tmp0));}

  ) 
  
  |
  (tmp1=Digits{_builder.setDigits(convertDigits($tmp1));}

  ) 
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd BasicLongLiteral'
basicLongLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTBasicLongLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTBasicLongLiteralBuilder _builder = de.monticore.gettingstarted.website.WebsiteMill.basicLongLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  {cmpToken(2,"l","L") && noSpace(2)}?
  (tmp0=Digits{_builder.setDigits(convertDigits($tmp0));}

  ) 
  
  
 // Start of 'ASTKeyTerminal l'
((nokeyword_l108 | nokeyword_L76))// End of 'ASTKeyTerminal'

  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd SignedBasicLongLiteral'
signedBasicLongLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTSignedBasicLongLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTSignedBasicLongLiteralBuilder _builder = de.monticore.gettingstarted.website.WebsiteMill.signedBasicLongLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  {cmpToken(3,"l","L") && noSpace(2,3)}?
  
 // Start of 'ASTConstantGroup'
(MINUS{
_builder.setNegative(true);
})// End of 'ASTConstantGroup'

  (tmp0=Digits{_builder.setDigits(convertDigits($tmp0));}

  ) 
  
  
 // Start of 'ASTKeyTerminal l'
((nokeyword_l108 | nokeyword_L76))// End of 'ASTKeyTerminal'

  |
  {cmpToken(2,"l","L") && noSpace(2)}?
  (tmp1=Digits{_builder.setDigits(convertDigits($tmp1));}

  ) 
  
  
 // Start of 'ASTKeyTerminal l'
((nokeyword_l108 | nokeyword_L76))// End of 'ASTKeyTerminal'

  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd BasicFloatLiteral'
basicFloatLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTBasicFloatLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTBasicFloatLiteralBuilder _builder = de.monticore.gettingstarted.website.WebsiteMill.basicFloatLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  {cmpToken(4,"f","F") && noSpace(2,3,4)}?
  (tmp0=Digits{_builder.setPre(convertDigits($tmp0));}

  ) 
  
  
 // Start of 'ASTTerminal .'
POINT
  (tmp1=Digits{_builder.setPost(convertDigits($tmp1));}

  ) 
  
  
 // Start of 'ASTKeyTerminal f'
((nokeyword_f102 | nokeyword_F70))// End of 'ASTKeyTerminal'

  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd SignedBasicFloatLiteral'
signedBasicFloatLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTSignedBasicFloatLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTSignedBasicFloatLiteralBuilder _builder = de.monticore.gettingstarted.website.WebsiteMill.signedBasicFloatLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  {cmpToken(5,"f","F") && noSpace(2,3,4,5)}?
  
 // Start of 'ASTConstantGroup'
(MINUS{
_builder.setNegative(true);
})// End of 'ASTConstantGroup'

  (tmp0=Digits{_builder.setPre(convertDigits($tmp0));}

  ) 
  
  
 // Start of 'ASTTerminal .'
POINT
  (tmp1=Digits{_builder.setPost(convertDigits($tmp1));}

  ) 
  
  
 // Start of 'ASTKeyTerminal f'
((nokeyword_f102 | nokeyword_F70))// End of 'ASTKeyTerminal'

  |
  {cmpToken(4,"f","F") && noSpace(2,3,4)}?
  (tmp2=Digits{_builder.setPre(convertDigits($tmp2));}

  ) 
  
  
 // Start of 'ASTTerminal .'
POINT
  (tmp3=Digits{_builder.setPost(convertDigits($tmp3));}

  ) 
  
  
 // Start of 'ASTKeyTerminal f'
((nokeyword_f102 | nokeyword_F70))// End of 'ASTKeyTerminal'

  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd BasicDoubleLiteral'
basicDoubleLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTBasicDoubleLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTBasicDoubleLiteralBuilder _builder = de.monticore.gettingstarted.website.WebsiteMill.basicDoubleLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  {noSpace(2,3)}?
  (tmp0=Digits{_builder.setPre(convertDigits($tmp0));}

  ) 
  
  
 // Start of 'ASTTerminal .'
POINT
  (tmp1=Digits{_builder.setPost(convertDigits($tmp1));}

  ) 
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd SignedBasicDoubleLiteral'
signedBasicDoubleLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTSignedBasicDoubleLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTSignedBasicDoubleLiteralBuilder _builder = de.monticore.gettingstarted.website.WebsiteMill.signedBasicDoubleLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  {noSpace(2,3,4)}?
  
 // Start of 'ASTConstantGroup'
(MINUS{
_builder.setNegative(true);
})// End of 'ASTConstantGroup'

  (tmp0=Digits{_builder.setPre(convertDigits($tmp0));}

  ) 
  
  
 // Start of 'ASTTerminal .'
POINT
  (tmp1=Digits{_builder.setPost(convertDigits($tmp1));}

  ) 
  
  |
  {noSpace(2,3)}?
  (tmp2=Digits{_builder.setPre(convertDigits($tmp2));}

  ) 
  
  
 // Start of 'ASTTerminal .'
POINT
  (tmp3=Digits{_builder.setPost(convertDigits($tmp3));}

  ) 
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd Website'
website returns [de.monticore.gettingstarted.website._ast.ASTWebsite ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.gettingstarted.website._ast.ASTWebsiteBuilder _builder = de.monticore.gettingstarted.website.WebsiteMill.websiteBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal website'
WEBSITE1224335515
  (tmp0=Name{_builder.setName(convertName($tmp0));}

  ) 
  
  
 // Start of 'ASTTerminal {'
LCURLY
  (
  
   tmp1=navigation{_builder.setNavigation(_localctx.tmp1.ret);}  
  
  
)?
  (
  
   tmp2=page{addToIteratedAttributeIfNotNull(_builder.getPageList(), _localctx.tmp2.ret);}  
  
  
)+
  
 // Start of 'ASTTerminal }'
RCURLY
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd Navigation'
navigation returns [de.monticore.gettingstarted.website._ast.ASTNavigation ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.gettingstarted.website._ast.ASTNavigationBuilder _builder = de.monticore.gettingstarted.website.WebsiteMill.navigationBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal navigation'
NAVIGATION1862666772
  
 // Start of 'ASTTerminal {'
LCURLY
  (
  
   tmp0=navigationItem{addToIteratedAttributeIfNotNull(_builder.getNavigationItemList(), _localctx.tmp0.ret);}  
  
  
)+
  
 // Start of 'ASTTerminal }'
RCURLY
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd NavigationItem'
navigationItem returns [de.monticore.gettingstarted.website._ast.ASTNavigationItem ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.gettingstarted.website._ast.ASTNavigationItemBuilder _builder = de.monticore.gettingstarted.website.WebsiteMill.navigationItemBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  (tmp0=Name{_builder.setName(convertName($tmp0));}

  ) 
  
  (
  
  
 // Start of 'ASTTerminal ;'
SEMI
  |
  (
  
  
 // Start of 'ASTTerminal {'
LCURLY
  (
  
   tmp1=navigationItem{addToIteratedAttributeIfNotNull(_builder.getSubItemList(), _localctx.tmp1.ret);}  
  
  
)+
  
 // Start of 'ASTTerminal }'
RCURLY
  
)
  
)
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd Page'
page returns [de.monticore.gettingstarted.website._ast.ASTPage ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.gettingstarted.website._ast.ASTPageBuilder _builder = de.monticore.gettingstarted.website.WebsiteMill.pageBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  (
  
  
 // Start of 'ASTConstantGroup'
(START109757538{
_builder.setStart(true);
})// End of 'ASTConstantGroup'

  
)?
  
 // Start of 'ASTTerminal page'
PAGE3433103
  (tmp0=Name{_builder.setName(convertName($tmp0));}

  ) 
  
  
 // Start of 'ASTTerminal {'
LCURLY
  (
  
  (tmp1=String{_builder.setTitle(convertString($tmp1));}

  ) 
  
  
 // Start of 'ASTTerminal ;'
SEMI
  
)?
   tmp2=pageContent{_builder.setPageContent(_localctx.tmp2.ret);}  
  
  
 // Start of 'ASTTerminal }'
RCURLY
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd PageContent'
pageContent returns [de.monticore.gettingstarted.website._ast.ASTPageContent ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.gettingstarted.website._ast.ASTPageContentBuilder _builder = de.monticore.gettingstarted.website.WebsiteMill.pageContentBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal content'
CONTENT951530617
  
 // Start of 'ASTTerminal {'
LCURLY
  ( tmp0=pageContentElement{addToIteratedAttributeIfNotNull(_builder.getPageContentElementList(), _localctx.tmp0.ret);}) * 
  
  
 // Start of 'ASTTerminal }'
RCURLY
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd Link'
link returns [de.monticore.gettingstarted.website._ast.ASTLink ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.gettingstarted.website._ast.ASTLinkBuilder _builder = de.monticore.gettingstarted.website.WebsiteMill.linkBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal ->'
MINUSGT
  (tmp0=Name{_builder.setName(convertName($tmp0));}

  ) 
  
  (
  
  (tmp1=String{_builder.setTitle(convertString($tmp1));}

  ) 
  
  
)?
  
 // Start of 'ASTTerminal ;'
SEMI
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd Picture'
picture returns [de.monticore.gettingstarted.website._ast.ASTPicture ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.gettingstarted.website._ast.ASTPictureBuilder _builder = de.monticore.gettingstarted.website.WebsiteMill.pictureBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal pic'
PIC110986
  (tmp0=Name{_builder.setName(convertName($tmp0));}

  ) 
  
  (
  
   tmp1=signedNatLiteral{_builder.setWidth(_localctx.tmp1.ret);}  
  
  
)
  
 // Start of 'ASTTerminal x'
X120
  (
  
   tmp2=signedNatLiteral{_builder.setHeight(_localctx.tmp2.ret);}  
  
  
)
  
 // Start of 'ASTTerminal ;'
SEMI
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd Paragraph'
paragraph returns [de.monticore.gettingstarted.website._ast.ASTParagraph ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.gettingstarted.website._ast.ASTParagraphBuilder _builder = de.monticore.gettingstarted.website.WebsiteMill.paragraphBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  (tmp0=String{_builder.setText(convertString($tmp0));}

  ) 
  
  
 // Start of 'ASTTerminal ;'
SEMI
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd TextBlock'
textBlock returns [de.monticore.gettingstarted.website._ast.ASTTextBlock ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.gettingstarted.website._ast.ASTTextBlockBuilder _builder = de.monticore.gettingstarted.website.WebsiteMill.textBlockBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal textBlock'
TEXTBLOCK3230384992
  
 // Start of 'ASTTerminal {'
LCURLY
  (tmp0=String{_builder.setTitle(convertString($tmp0));}

  ) 
  
  (
  
   tmp1=paragraph{addToIteratedAttributeIfNotNull(_builder.getParagraphList(), _localctx.tmp1.ret);}  
  
  
)*
  
 // Start of 'ASTTerminal }'
RCURLY
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd CodeBlock'
codeBlock returns [de.monticore.gettingstarted.website._ast.ASTCodeBlock ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.gettingstarted.website._ast.ASTCodeBlockBuilder _builder = de.monticore.gettingstarted.website.WebsiteMill.codeBlockBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal codeBlock'
CODEBLOCK3140932256
  
 // Start of 'ASTTerminal {'
LCURLY
  (
  
   tmp0=paragraph{addToIteratedAttributeIfNotNull(_builder.getParagraphList(), _localctx.tmp0.ret);}  
  
  
)*
  
 // Start of 'ASTTerminal }'
RCURLY
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd Aside'
aside returns [de.monticore.gettingstarted.website._ast.ASTAside ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.gettingstarted.website._ast.ASTAsideBuilder _builder = de.monticore.gettingstarted.website.WebsiteMill.asideBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal aside'
ASIDE93111608
  
 // Start of 'ASTTerminal {'
LCURLY
  (
  
   tmp0=pageContentElement{addToIteratedAttributeIfNotNull(_builder.getSubItemList(), _localctx.tmp0.ret);}  
  
  
)+
  
 // Start of 'ASTTerminal }'
RCURLY
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd Row'
row returns [de.monticore.gettingstarted.website._ast.ASTRow ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.gettingstarted.website._ast.ASTRowBuilder _builder = de.monticore.gettingstarted.website.WebsiteMill.rowBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal row'
ROW113114
  
 // Start of 'ASTTerminal {'
LCURLY
  (
  
   tmp0=pageContentElement{addToIteratedAttributeIfNotNull(_builder.getPageContentElementList(), _localctx.tmp0.ret);}  
  
  
)+
  
 // Start of 'ASTTerminal }'
RCURLY
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd LandImage'
landImage returns [de.monticore.gettingstarted.website._ast.ASTLandImage ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.gettingstarted.website._ast.ASTLandImageBuilder _builder = de.monticore.gettingstarted.website.WebsiteMill.landImageBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal landImage'
LANDIMAGE1392157232
  
 // Start of 'ASTTerminal {'
LCURLY
  (tmp0=String{_builder.setTitle(convertString($tmp0));}

  ) 
  
  
 // Start of 'ASTTerminal ;'
SEMI
  (tmp1=String{_builder.setSubtitle(convertString($tmp1));}

  ) 
  
  
 // Start of 'ASTTerminal ;'
SEMI
  (tmp2=String{_builder.setPicture(convertString($tmp2));}

  ) 
  
  
 // Start of 'ASTTerminal }'
RCURLY
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd Card'
card returns [de.monticore.gettingstarted.website._ast.ASTCard ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.gettingstarted.website._ast.ASTCardBuilder _builder = de.monticore.gettingstarted.website.WebsiteMill.cardBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal card'
CARD3046160
  
 // Start of 'ASTTerminal {'
LCURLY
  (tmp0=String{_builder.setTitle(convertString($tmp0));}

  ) 
  
  (tmp1=String{_builder.setPicture(convertString($tmp1));}

  ) 
  
   tmp2=paragraph{_builder.setParagraph(_localctx.tmp2.ret);}  
  
  (tmp3=String{_builder.setLink(convertString($tmp3));}

  ) 
  
  
 // Start of 'ASTTerminal }'
RCURLY
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd Table'
table returns [de.monticore.gettingstarted.website._ast.ASTTable ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.gettingstarted.website._ast.ASTTableBuilder _builder = de.monticore.gettingstarted.website.WebsiteMill.tableBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal table'
TABLE110115790
  (tmp0=String{_builder.setTitle(convertString($tmp0));}

  ) 
  
  (tmp1=String{_builder.setFileName(convertString($tmp1));}

  ) 
  
  
 // Start of 'ASTTerminal ;'
SEMI
  ;
  // End of 'ASTClassProd'


  literal
   returns [de.monticore.literals.mcliteralsbasis._ast.ASTLiteral ret]
  : 
  
  tmp2=numericLiteral
{$ret=$tmp2.ret;}
  |
  tmp3=nullLiteral
{$ret=$tmp3.ret;}
  |
  tmp4=booleanLiteral
{$ret=$tmp4.ret;}
  |
  tmp5=charLiteral
{$ret=$tmp5.ret;}
  |
  tmp6=stringLiteral
{$ret=$tmp6.ret;}
  ;
  signedLiteral
   returns [de.monticore.literals.mccommonliterals._ast.ASTSignedLiteral ret]
  : 
  
  tmp7=signedNumericLiteral
{$ret=$tmp7.ret;}
  |
  tmp3=nullLiteral
{$ret=$tmp3.ret;}
  |
  tmp4=booleanLiteral
{$ret=$tmp4.ret;}
  |
  tmp5=charLiteral
{$ret=$tmp5.ret;}
  |
  tmp6=stringLiteral
{$ret=$tmp6.ret;}
  ;
  numericLiteral
   returns [de.monticore.literals.mccommonliterals._ast.ASTNumericLiteral ret]
  : 
  
  tmp8=natLiteral
{$ret=$tmp8.ret;}
  |
  tmp9=basicLongLiteral
{$ret=$tmp9.ret;}
  |
  tmp10=basicFloatLiteral
{$ret=$tmp10.ret;}
  |
  tmp11=basicDoubleLiteral
{$ret=$tmp11.ret;}
  ;
  signedNumericLiteral
   returns [de.monticore.literals.mccommonliterals._ast.ASTSignedNumericLiteral ret]
  : 
  
  tmp12=signedNatLiteral
{$ret=$tmp12.ret;}
  |
  tmp13=signedBasicLongLiteral
{$ret=$tmp13.ret;}
  |
  tmp14=signedBasicFloatLiteral
{$ret=$tmp14.ret;}
  |
  tmp15=signedBasicDoubleLiteral
{$ret=$tmp15.ret;}
  ;
  websiteElement
   returns [de.monticore.gettingstarted.website._ast.ASTWebsiteElement ret]
  : 
  
  tmp16=navigation
{$ret=$tmp16.ret;}
  |
  tmp17=navigationItem
{$ret=$tmp17.ret;}
  |
  tmp18=page
{$ret=$tmp18.ret;}
  ;
  pageContentElement
   returns [de.monticore.gettingstarted.website._ast.ASTPageContentElement ret]
  : 
  
  tmp19=link
{$ret=$tmp19.ret;}
  |
  tmp20=picture
{$ret=$tmp20.ret;}
  |
  tmp21=paragraph
{$ret=$tmp21.ret;}
  |
  tmp22=textBlock
{$ret=$tmp22.ret;}
  |
  tmp23=codeBlock
{$ret=$tmp23.ret;}
  |
  tmp24=aside
{$ret=$tmp24.ret;}
  |
  tmp25=row
{$ret=$tmp25.ret;}
  |
  tmp26=landImage
{$ret=$tmp26.ret;}
  |
  tmp27=card
{$ret=$tmp27.ret;}
  |
  tmp28=table
{$ret=$tmp28.ret;}
  ;

  nokeyword_f102 : {next("f")}? Name;
  nokeyword_F70 : {next("F")}? Name;
  nokeyword_l108 : {next("l")}? Name;
  nokeyword_L76 : {next("L")}? Name;


